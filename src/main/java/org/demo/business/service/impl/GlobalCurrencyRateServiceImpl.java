/*
 * Created on 24 Þub 2016 ( Time 16:36:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.demo.bean.GlobalCurrencyRate;
import org.demo.bean.jpa.GlobalCurrencyRateEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.GlobalCurrencyRateService;
import org.demo.business.service.mapping.GlobalCurrencyRateServiceMapper;
import org.demo.data.repository.jpa.GlobalCurrencyRateJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of GlobalCurrencyRateService
 */
@Component
@Transactional
public class GlobalCurrencyRateServiceImpl implements GlobalCurrencyRateService {

	@Resource
	private GlobalCurrencyRateJpaRepository globalCurrencyRateJpaRepository;

	@Resource
	private GlobalCurrencyRateServiceMapper globalCurrencyRateServiceMapper;
	
	public GlobalCurrencyRate findById(Integer id) {
		GlobalCurrencyRateEntity globalCurrencyRateEntity = globalCurrencyRateJpaRepository.findOne(id);
		return globalCurrencyRateServiceMapper.mapGlobalCurrencyRateEntityToGlobalCurrencyRate(globalCurrencyRateEntity);
	}

	public List<GlobalCurrencyRate> findAll() {
		Iterable<GlobalCurrencyRateEntity> entities = globalCurrencyRateJpaRepository.findAll();
		List<GlobalCurrencyRate> beans = new ArrayList<GlobalCurrencyRate>();
		for(GlobalCurrencyRateEntity globalCurrencyRateEntity : entities) {
			beans.add(globalCurrencyRateServiceMapper.mapGlobalCurrencyRateEntityToGlobalCurrencyRate(globalCurrencyRateEntity));
		}
		return beans;
	}

	public GlobalCurrencyRate save(GlobalCurrencyRate globalCurrencyRate) {
		return update(globalCurrencyRate) ;
	}

	public GlobalCurrencyRate create(GlobalCurrencyRate globalCurrencyRate) {
		GlobalCurrencyRateEntity globalCurrencyRateEntity = globalCurrencyRateJpaRepository.findOne(globalCurrencyRate.getId());
		if( globalCurrencyRateEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		globalCurrencyRateEntity = new GlobalCurrencyRateEntity();
		globalCurrencyRateServiceMapper.mapGlobalCurrencyRateToGlobalCurrencyRateEntity(globalCurrencyRate, globalCurrencyRateEntity);
		GlobalCurrencyRateEntity globalCurrencyRateEntitySaved = globalCurrencyRateJpaRepository.save(globalCurrencyRateEntity);
		return globalCurrencyRateServiceMapper.mapGlobalCurrencyRateEntityToGlobalCurrencyRate(globalCurrencyRateEntitySaved);
	}

	public GlobalCurrencyRate update(GlobalCurrencyRate globalCurrencyRate) {
		GlobalCurrencyRateEntity globalCurrencyRateEntity = globalCurrencyRateJpaRepository.findOne(globalCurrencyRate.getId());
		globalCurrencyRateServiceMapper.mapGlobalCurrencyRateToGlobalCurrencyRateEntity(globalCurrencyRate, globalCurrencyRateEntity);
		GlobalCurrencyRateEntity globalCurrencyRateEntitySaved = globalCurrencyRateJpaRepository.save(globalCurrencyRateEntity);
		return globalCurrencyRateServiceMapper.mapGlobalCurrencyRateEntityToGlobalCurrencyRate(globalCurrencyRateEntitySaved);
	}

	public void delete(Integer id) {
		globalCurrencyRateJpaRepository.delete(id);
	}

	public GlobalCurrencyRateJpaRepository getGlobalCurrencyRateJpaRepository() {
		return globalCurrencyRateJpaRepository;
	}

	public void setGlobalCurrencyRateJpaRepository(GlobalCurrencyRateJpaRepository globalCurrencyRateJpaRepository) {
		this.globalCurrencyRateJpaRepository = globalCurrencyRateJpaRepository;
	}

	public GlobalCurrencyRateServiceMapper getGlobalCurrencyRateServiceMapper() {
		return globalCurrencyRateServiceMapper;
	}

	public void setGlobalCurrencyRateServiceMapper(GlobalCurrencyRateServiceMapper globalCurrencyRateServiceMapper) {
		this.globalCurrencyRateServiceMapper = globalCurrencyRateServiceMapper;
	}

}
