/*
 * Created on 24 Þub 2016 ( Time 16:36:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.demo.bean.GlobalTransPoint;
import org.demo.bean.jpa.GlobalTransPointEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.GlobalTransPointService;
import org.demo.business.service.mapping.GlobalTransPointServiceMapper;
import org.demo.data.repository.jpa.GlobalTransPointJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of GlobalTransPointService
 */
@Component
@Transactional
public class GlobalTransPointServiceImpl implements GlobalTransPointService {

	@Resource
	private GlobalTransPointJpaRepository globalTransPointJpaRepository;

	@Resource
	private GlobalTransPointServiceMapper globalTransPointServiceMapper;
	
	public GlobalTransPoint findById(Integer id) {
		GlobalTransPointEntity globalTransPointEntity = globalTransPointJpaRepository.findOne(id);
		return globalTransPointServiceMapper.mapGlobalTransPointEntityToGlobalTransPoint(globalTransPointEntity);
	}

	public List<GlobalTransPoint> findAll() {
		Iterable<GlobalTransPointEntity> entities = globalTransPointJpaRepository.findAll();
		List<GlobalTransPoint> beans = new ArrayList<GlobalTransPoint>();
		for(GlobalTransPointEntity globalTransPointEntity : entities) {
			beans.add(globalTransPointServiceMapper.mapGlobalTransPointEntityToGlobalTransPoint(globalTransPointEntity));
		}
		return beans;
	}

	public GlobalTransPoint save(GlobalTransPoint globalTransPoint) {
		return update(globalTransPoint) ;
	}

	public GlobalTransPoint create(GlobalTransPoint globalTransPoint) {
		GlobalTransPointEntity globalTransPointEntity = globalTransPointJpaRepository.findOne(globalTransPoint.getId());
		if( globalTransPointEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		globalTransPointEntity = new GlobalTransPointEntity();
		globalTransPointServiceMapper.mapGlobalTransPointToGlobalTransPointEntity(globalTransPoint, globalTransPointEntity);
		GlobalTransPointEntity globalTransPointEntitySaved = globalTransPointJpaRepository.save(globalTransPointEntity);
		return globalTransPointServiceMapper.mapGlobalTransPointEntityToGlobalTransPoint(globalTransPointEntitySaved);
	}

	public GlobalTransPoint update(GlobalTransPoint globalTransPoint) {
		GlobalTransPointEntity globalTransPointEntity = globalTransPointJpaRepository.findOne(globalTransPoint.getId());
		globalTransPointServiceMapper.mapGlobalTransPointToGlobalTransPointEntity(globalTransPoint, globalTransPointEntity);
		GlobalTransPointEntity globalTransPointEntitySaved = globalTransPointJpaRepository.save(globalTransPointEntity);
		return globalTransPointServiceMapper.mapGlobalTransPointEntityToGlobalTransPoint(globalTransPointEntitySaved);
	}

	public void delete(Integer id) {
		globalTransPointJpaRepository.delete(id);
	}

	public GlobalTransPointJpaRepository getGlobalTransPointJpaRepository() {
		return globalTransPointJpaRepository;
	}

	public void setGlobalTransPointJpaRepository(GlobalTransPointJpaRepository globalTransPointJpaRepository) {
		this.globalTransPointJpaRepository = globalTransPointJpaRepository;
	}

	public GlobalTransPointServiceMapper getGlobalTransPointServiceMapper() {
		return globalTransPointServiceMapper;
	}

	public void setGlobalTransPointServiceMapper(GlobalTransPointServiceMapper globalTransPointServiceMapper) {
		this.globalTransPointServiceMapper = globalTransPointServiceMapper;
	}

}
