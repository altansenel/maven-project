/*
 * Created on 24 Þub 2016 ( Time 16:36:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.demo.bean.OrderTransFactor;
import org.demo.bean.jpa.OrderTransFactorEntity;
import org.demo.business.service.OrderTransFactorService;
import org.demo.business.service.mapping.OrderTransFactorServiceMapper;
import org.demo.data.repository.jpa.OrderTransFactorJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of OrderTransFactorService
 */
@Component
@Transactional
public class OrderTransFactorServiceImpl implements OrderTransFactorService {

	@Resource
	private OrderTransFactorJpaRepository orderTransFactorJpaRepository;

	@Resource
	private OrderTransFactorServiceMapper orderTransFactorServiceMapper;
	
	public OrderTransFactor findById(Integer id) {
		OrderTransFactorEntity orderTransFactorEntity = orderTransFactorJpaRepository.findOne(id);
		return orderTransFactorServiceMapper.mapOrderTransFactorEntityToOrderTransFactor(orderTransFactorEntity);
	}

	public List<OrderTransFactor> findAll() {
		Iterable<OrderTransFactorEntity> entities = orderTransFactorJpaRepository.findAll();
		List<OrderTransFactor> beans = new ArrayList<OrderTransFactor>();
		for(OrderTransFactorEntity orderTransFactorEntity : entities) {
			beans.add(orderTransFactorServiceMapper.mapOrderTransFactorEntityToOrderTransFactor(orderTransFactorEntity));
		}
		return beans;
	}

	public OrderTransFactor save(OrderTransFactor orderTransFactor) {
		return update(orderTransFactor) ;
	}

	public OrderTransFactor create(OrderTransFactor orderTransFactor) {
		OrderTransFactorEntity orderTransFactorEntity = orderTransFactorJpaRepository.findOne(orderTransFactor.getId());
		if( orderTransFactorEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		orderTransFactorEntity = new OrderTransFactorEntity();
		orderTransFactorServiceMapper.mapOrderTransFactorToOrderTransFactorEntity(orderTransFactor, orderTransFactorEntity);
		OrderTransFactorEntity orderTransFactorEntitySaved = orderTransFactorJpaRepository.save(orderTransFactorEntity);
		return orderTransFactorServiceMapper.mapOrderTransFactorEntityToOrderTransFactor(orderTransFactorEntitySaved);
	}

	public OrderTransFactor update(OrderTransFactor orderTransFactor) {
		OrderTransFactorEntity orderTransFactorEntity = orderTransFactorJpaRepository.findOne(orderTransFactor.getId());
		orderTransFactorServiceMapper.mapOrderTransFactorToOrderTransFactorEntity(orderTransFactor, orderTransFactorEntity);
		OrderTransFactorEntity orderTransFactorEntitySaved = orderTransFactorJpaRepository.save(orderTransFactorEntity);
		return orderTransFactorServiceMapper.mapOrderTransFactorEntityToOrderTransFactor(orderTransFactorEntitySaved);
	}

	public void delete(Integer id) {
		orderTransFactorJpaRepository.delete(id);
	}

	public OrderTransFactorJpaRepository getOrderTransFactorJpaRepository() {
		return orderTransFactorJpaRepository;
	}

	public void setOrderTransFactorJpaRepository(OrderTransFactorJpaRepository orderTransFactorJpaRepository) {
		this.orderTransFactorJpaRepository = orderTransFactorJpaRepository;
	}

	public OrderTransFactorServiceMapper getOrderTransFactorServiceMapper() {
		return orderTransFactorServiceMapper;
	}

	public void setOrderTransFactorServiceMapper(OrderTransFactorServiceMapper orderTransFactorServiceMapper) {
		this.orderTransFactorServiceMapper = orderTransFactorServiceMapper;
	}

}
