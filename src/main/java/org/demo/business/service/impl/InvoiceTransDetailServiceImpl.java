/*
 * Created on 24 Þub 2016 ( Time 16:36:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.demo.bean.InvoiceTransDetail;
import org.demo.bean.jpa.InvoiceTransDetailEntity;
import java.util.Date;
import org.demo.business.service.InvoiceTransDetailService;
import org.demo.business.service.mapping.InvoiceTransDetailServiceMapper;
import org.demo.data.repository.jpa.InvoiceTransDetailJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of InvoiceTransDetailService
 */
@Component
@Transactional
public class InvoiceTransDetailServiceImpl implements InvoiceTransDetailService {

	@Resource
	private InvoiceTransDetailJpaRepository invoiceTransDetailJpaRepository;

	@Resource
	private InvoiceTransDetailServiceMapper invoiceTransDetailServiceMapper;
	
	public InvoiceTransDetail findById(Integer id) {
		InvoiceTransDetailEntity invoiceTransDetailEntity = invoiceTransDetailJpaRepository.findOne(id);
		return invoiceTransDetailServiceMapper.mapInvoiceTransDetailEntityToInvoiceTransDetail(invoiceTransDetailEntity);
	}

	public List<InvoiceTransDetail> findAll() {
		Iterable<InvoiceTransDetailEntity> entities = invoiceTransDetailJpaRepository.findAll();
		List<InvoiceTransDetail> beans = new ArrayList<InvoiceTransDetail>();
		for(InvoiceTransDetailEntity invoiceTransDetailEntity : entities) {
			beans.add(invoiceTransDetailServiceMapper.mapInvoiceTransDetailEntityToInvoiceTransDetail(invoiceTransDetailEntity));
		}
		return beans;
	}

	public InvoiceTransDetail save(InvoiceTransDetail invoiceTransDetail) {
		return update(invoiceTransDetail) ;
	}

	public InvoiceTransDetail create(InvoiceTransDetail invoiceTransDetail) {
		InvoiceTransDetailEntity invoiceTransDetailEntity = invoiceTransDetailJpaRepository.findOne(invoiceTransDetail.getId());
		if( invoiceTransDetailEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		invoiceTransDetailEntity = new InvoiceTransDetailEntity();
		invoiceTransDetailServiceMapper.mapInvoiceTransDetailToInvoiceTransDetailEntity(invoiceTransDetail, invoiceTransDetailEntity);
		InvoiceTransDetailEntity invoiceTransDetailEntitySaved = invoiceTransDetailJpaRepository.save(invoiceTransDetailEntity);
		return invoiceTransDetailServiceMapper.mapInvoiceTransDetailEntityToInvoiceTransDetail(invoiceTransDetailEntitySaved);
	}

	public InvoiceTransDetail update(InvoiceTransDetail invoiceTransDetail) {
		InvoiceTransDetailEntity invoiceTransDetailEntity = invoiceTransDetailJpaRepository.findOne(invoiceTransDetail.getId());
		invoiceTransDetailServiceMapper.mapInvoiceTransDetailToInvoiceTransDetailEntity(invoiceTransDetail, invoiceTransDetailEntity);
		InvoiceTransDetailEntity invoiceTransDetailEntitySaved = invoiceTransDetailJpaRepository.save(invoiceTransDetailEntity);
		return invoiceTransDetailServiceMapper.mapInvoiceTransDetailEntityToInvoiceTransDetail(invoiceTransDetailEntitySaved);
	}

	public void delete(Integer id) {
		invoiceTransDetailJpaRepository.delete(id);
	}

	public InvoiceTransDetailJpaRepository getInvoiceTransDetailJpaRepository() {
		return invoiceTransDetailJpaRepository;
	}

	public void setInvoiceTransDetailJpaRepository(InvoiceTransDetailJpaRepository invoiceTransDetailJpaRepository) {
		this.invoiceTransDetailJpaRepository = invoiceTransDetailJpaRepository;
	}

	public InvoiceTransDetailServiceMapper getInvoiceTransDetailServiceMapper() {
		return invoiceTransDetailServiceMapper;
	}

	public void setInvoiceTransDetailServiceMapper(InvoiceTransDetailServiceMapper invoiceTransDetailServiceMapper) {
		this.invoiceTransDetailServiceMapper = invoiceTransDetailServiceMapper;
	}

}
