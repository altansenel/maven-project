/*
 * Created on 24 Þub 2016 ( Time 16:36:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.demo.bean.InvoiceTransRelation;
import org.demo.bean.jpa.InvoiceTransRelationEntity;
import org.demo.business.service.InvoiceTransRelationService;
import org.demo.business.service.mapping.InvoiceTransRelationServiceMapper;
import org.demo.data.repository.jpa.InvoiceTransRelationJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of InvoiceTransRelationService
 */
@Component
@Transactional
public class InvoiceTransRelationServiceImpl implements InvoiceTransRelationService {

	@Resource
	private InvoiceTransRelationJpaRepository invoiceTransRelationJpaRepository;

	@Resource
	private InvoiceTransRelationServiceMapper invoiceTransRelationServiceMapper;
	
	public InvoiceTransRelation findById(Integer id) {
		InvoiceTransRelationEntity invoiceTransRelationEntity = invoiceTransRelationJpaRepository.findOne(id);
		return invoiceTransRelationServiceMapper.mapInvoiceTransRelationEntityToInvoiceTransRelation(invoiceTransRelationEntity);
	}

	public List<InvoiceTransRelation> findAll() {
		Iterable<InvoiceTransRelationEntity> entities = invoiceTransRelationJpaRepository.findAll();
		List<InvoiceTransRelation> beans = new ArrayList<InvoiceTransRelation>();
		for(InvoiceTransRelationEntity invoiceTransRelationEntity : entities) {
			beans.add(invoiceTransRelationServiceMapper.mapInvoiceTransRelationEntityToInvoiceTransRelation(invoiceTransRelationEntity));
		}
		return beans;
	}

	public InvoiceTransRelation save(InvoiceTransRelation invoiceTransRelation) {
		return update(invoiceTransRelation) ;
	}

	public InvoiceTransRelation create(InvoiceTransRelation invoiceTransRelation) {
		InvoiceTransRelationEntity invoiceTransRelationEntity = invoiceTransRelationJpaRepository.findOne(invoiceTransRelation.getId());
		if( invoiceTransRelationEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		invoiceTransRelationEntity = new InvoiceTransRelationEntity();
		invoiceTransRelationServiceMapper.mapInvoiceTransRelationToInvoiceTransRelationEntity(invoiceTransRelation, invoiceTransRelationEntity);
		InvoiceTransRelationEntity invoiceTransRelationEntitySaved = invoiceTransRelationJpaRepository.save(invoiceTransRelationEntity);
		return invoiceTransRelationServiceMapper.mapInvoiceTransRelationEntityToInvoiceTransRelation(invoiceTransRelationEntitySaved);
	}

	public InvoiceTransRelation update(InvoiceTransRelation invoiceTransRelation) {
		InvoiceTransRelationEntity invoiceTransRelationEntity = invoiceTransRelationJpaRepository.findOne(invoiceTransRelation.getId());
		invoiceTransRelationServiceMapper.mapInvoiceTransRelationToInvoiceTransRelationEntity(invoiceTransRelation, invoiceTransRelationEntity);
		InvoiceTransRelationEntity invoiceTransRelationEntitySaved = invoiceTransRelationJpaRepository.save(invoiceTransRelationEntity);
		return invoiceTransRelationServiceMapper.mapInvoiceTransRelationEntityToInvoiceTransRelation(invoiceTransRelationEntitySaved);
	}

	public void delete(Integer id) {
		invoiceTransRelationJpaRepository.delete(id);
	}

	public InvoiceTransRelationJpaRepository getInvoiceTransRelationJpaRepository() {
		return invoiceTransRelationJpaRepository;
	}

	public void setInvoiceTransRelationJpaRepository(InvoiceTransRelationJpaRepository invoiceTransRelationJpaRepository) {
		this.invoiceTransRelationJpaRepository = invoiceTransRelationJpaRepository;
	}

	public InvoiceTransRelationServiceMapper getInvoiceTransRelationServiceMapper() {
		return invoiceTransRelationServiceMapper;
	}

	public void setInvoiceTransRelationServiceMapper(InvoiceTransRelationServiceMapper invoiceTransRelationServiceMapper) {
		this.invoiceTransRelationServiceMapper = invoiceTransRelationServiceMapper;
	}

}
