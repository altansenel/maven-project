/*
 * Created on 24 Þub 2016 ( Time 16:36:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.demo.bean.InvoiceTrans;
import org.demo.bean.jpa.InvoiceTransEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.InvoiceTransService;
import org.demo.business.service.mapping.InvoiceTransServiceMapper;
import org.demo.data.repository.jpa.InvoiceTransJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of InvoiceTransService
 */
@Component
@Transactional
public class InvoiceTransServiceImpl implements InvoiceTransService {

	@Resource
	private InvoiceTransJpaRepository invoiceTransJpaRepository;

	@Resource
	private InvoiceTransServiceMapper invoiceTransServiceMapper;
	
	public InvoiceTrans findById(Integer id) {
		InvoiceTransEntity invoiceTransEntity = invoiceTransJpaRepository.findOne(id);
		return invoiceTransServiceMapper.mapInvoiceTransEntityToInvoiceTrans(invoiceTransEntity);
	}

	public List<InvoiceTrans> findAll() {
		Iterable<InvoiceTransEntity> entities = invoiceTransJpaRepository.findAll();
		List<InvoiceTrans> beans = new ArrayList<InvoiceTrans>();
		for(InvoiceTransEntity invoiceTransEntity : entities) {
			beans.add(invoiceTransServiceMapper.mapInvoiceTransEntityToInvoiceTrans(invoiceTransEntity));
		}
		return beans;
	}

	public InvoiceTrans save(InvoiceTrans invoiceTrans) {
		return update(invoiceTrans) ;
	}

	public InvoiceTrans create(InvoiceTrans invoiceTrans) {
		InvoiceTransEntity invoiceTransEntity = invoiceTransJpaRepository.findOne(invoiceTrans.getId());
		if( invoiceTransEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		invoiceTransEntity = new InvoiceTransEntity();
		invoiceTransServiceMapper.mapInvoiceTransToInvoiceTransEntity(invoiceTrans, invoiceTransEntity);
		InvoiceTransEntity invoiceTransEntitySaved = invoiceTransJpaRepository.save(invoiceTransEntity);
		return invoiceTransServiceMapper.mapInvoiceTransEntityToInvoiceTrans(invoiceTransEntitySaved);
	}

	public InvoiceTrans update(InvoiceTrans invoiceTrans) {
		InvoiceTransEntity invoiceTransEntity = invoiceTransJpaRepository.findOne(invoiceTrans.getId());
		invoiceTransServiceMapper.mapInvoiceTransToInvoiceTransEntity(invoiceTrans, invoiceTransEntity);
		InvoiceTransEntity invoiceTransEntitySaved = invoiceTransJpaRepository.save(invoiceTransEntity);
		return invoiceTransServiceMapper.mapInvoiceTransEntityToInvoiceTrans(invoiceTransEntitySaved);
	}

	public void delete(Integer id) {
		invoiceTransJpaRepository.delete(id);
	}

	public InvoiceTransJpaRepository getInvoiceTransJpaRepository() {
		return invoiceTransJpaRepository;
	}

	public void setInvoiceTransJpaRepository(InvoiceTransJpaRepository invoiceTransJpaRepository) {
		this.invoiceTransJpaRepository = invoiceTransJpaRepository;
	}

	public InvoiceTransServiceMapper getInvoiceTransServiceMapper() {
		return invoiceTransServiceMapper;
	}

	public void setInvoiceTransServiceMapper(InvoiceTransServiceMapper invoiceTransServiceMapper) {
		this.invoiceTransServiceMapper = invoiceTransServiceMapper;
	}

}
