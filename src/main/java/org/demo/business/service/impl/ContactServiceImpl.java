/*
 * Created on 24 Þub 2016 ( Time 16:36:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.demo.bean.Contact;
import org.demo.bean.jpa.ContactEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.ContactService;
import org.demo.business.service.mapping.ContactServiceMapper;
import org.demo.data.repository.jpa.ContactJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of ContactService
 */
@Component
@Transactional
public class ContactServiceImpl implements ContactService {

	@Resource
	private ContactJpaRepository contactJpaRepository;

	@Resource
	private ContactServiceMapper contactServiceMapper;
	
	public Contact findById(Integer id) {
		ContactEntity contactEntity = contactJpaRepository.findOne(id);
		return contactServiceMapper.mapContactEntityToContact(contactEntity);
	}

	public List<Contact> findAll() {
		Iterable<ContactEntity> entities = contactJpaRepository.findAll();
		List<Contact> beans = new ArrayList<Contact>();
		for(ContactEntity contactEntity : entities) {
			beans.add(contactServiceMapper.mapContactEntityToContact(contactEntity));
		}
		return beans;
	}

	public Contact save(Contact contact) {
		return update(contact) ;
	}

	public Contact create(Contact contact) {
		ContactEntity contactEntity = contactJpaRepository.findOne(contact.getId());
		if( contactEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		contactEntity = new ContactEntity();
		contactServiceMapper.mapContactToContactEntity(contact, contactEntity);
		ContactEntity contactEntitySaved = contactJpaRepository.save(contactEntity);
		return contactServiceMapper.mapContactEntityToContact(contactEntitySaved);
	}

	public Contact update(Contact contact) {
		ContactEntity contactEntity = contactJpaRepository.findOne(contact.getId());
		contactServiceMapper.mapContactToContactEntity(contact, contactEntity);
		ContactEntity contactEntitySaved = contactJpaRepository.save(contactEntity);
		return contactServiceMapper.mapContactEntityToContact(contactEntitySaved);
	}

	public void delete(Integer id) {
		contactJpaRepository.delete(id);
	}

	public ContactJpaRepository getContactJpaRepository() {
		return contactJpaRepository;
	}

	public void setContactJpaRepository(ContactJpaRepository contactJpaRepository) {
		this.contactJpaRepository = contactJpaRepository;
	}

	public ContactServiceMapper getContactServiceMapper() {
		return contactServiceMapper;
	}

	public void setContactServiceMapper(ContactServiceMapper contactServiceMapper) {
		this.contactServiceMapper = contactServiceMapper;
	}

}
