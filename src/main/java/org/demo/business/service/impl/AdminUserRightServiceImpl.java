/*
 * Created on 24 Þub 2016 ( Time 16:36:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.demo.bean.AdminUserRight;
import org.demo.bean.jpa.AdminUserRightEntity;
import org.demo.business.service.AdminUserRightService;
import org.demo.business.service.mapping.AdminUserRightServiceMapper;
import org.demo.data.repository.jpa.AdminUserRightJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of AdminUserRightService
 */
@Component
@Transactional
public class AdminUserRightServiceImpl implements AdminUserRightService {

	@Resource
	private AdminUserRightJpaRepository adminUserRightJpaRepository;

	@Resource
	private AdminUserRightServiceMapper adminUserRightServiceMapper;
	
	public AdminUserRight findById(Integer id) {
		AdminUserRightEntity adminUserRightEntity = adminUserRightJpaRepository.findOne(id);
		return adminUserRightServiceMapper.mapAdminUserRightEntityToAdminUserRight(adminUserRightEntity);
	}

	public List<AdminUserRight> findAll() {
		Iterable<AdminUserRightEntity> entities = adminUserRightJpaRepository.findAll();
		List<AdminUserRight> beans = new ArrayList<AdminUserRight>();
		for(AdminUserRightEntity adminUserRightEntity : entities) {
			beans.add(adminUserRightServiceMapper.mapAdminUserRightEntityToAdminUserRight(adminUserRightEntity));
		}
		return beans;
	}

	public AdminUserRight save(AdminUserRight adminUserRight) {
		return update(adminUserRight) ;
	}

	public AdminUserRight create(AdminUserRight adminUserRight) {
		AdminUserRightEntity adminUserRightEntity = adminUserRightJpaRepository.findOne(adminUserRight.getId());
		if( adminUserRightEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		adminUserRightEntity = new AdminUserRightEntity();
		adminUserRightServiceMapper.mapAdminUserRightToAdminUserRightEntity(adminUserRight, adminUserRightEntity);
		AdminUserRightEntity adminUserRightEntitySaved = adminUserRightJpaRepository.save(adminUserRightEntity);
		return adminUserRightServiceMapper.mapAdminUserRightEntityToAdminUserRight(adminUserRightEntitySaved);
	}

	public AdminUserRight update(AdminUserRight adminUserRight) {
		AdminUserRightEntity adminUserRightEntity = adminUserRightJpaRepository.findOne(adminUserRight.getId());
		adminUserRightServiceMapper.mapAdminUserRightToAdminUserRightEntity(adminUserRight, adminUserRightEntity);
		AdminUserRightEntity adminUserRightEntitySaved = adminUserRightJpaRepository.save(adminUserRightEntity);
		return adminUserRightServiceMapper.mapAdminUserRightEntityToAdminUserRight(adminUserRightEntitySaved);
	}

	public void delete(Integer id) {
		adminUserRightJpaRepository.delete(id);
	}

	public AdminUserRightJpaRepository getAdminUserRightJpaRepository() {
		return adminUserRightJpaRepository;
	}

	public void setAdminUserRightJpaRepository(AdminUserRightJpaRepository adminUserRightJpaRepository) {
		this.adminUserRightJpaRepository = adminUserRightJpaRepository;
	}

	public AdminUserRightServiceMapper getAdminUserRightServiceMapper() {
		return adminUserRightServiceMapper;
	}

	public void setAdminUserRightServiceMapper(AdminUserRightServiceMapper adminUserRightServiceMapper) {
		this.adminUserRightServiceMapper = adminUserRightServiceMapper;
	}

}
