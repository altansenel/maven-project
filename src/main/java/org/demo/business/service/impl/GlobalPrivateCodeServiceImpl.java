/*
 * Created on 24 Þub 2016 ( Time 16:36:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.demo.bean.GlobalPrivateCode;
import org.demo.bean.jpa.GlobalPrivateCodeEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.GlobalPrivateCodeService;
import org.demo.business.service.mapping.GlobalPrivateCodeServiceMapper;
import org.demo.data.repository.jpa.GlobalPrivateCodeJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of GlobalPrivateCodeService
 */
@Component
@Transactional
public class GlobalPrivateCodeServiceImpl implements GlobalPrivateCodeService {

	@Resource
	private GlobalPrivateCodeJpaRepository globalPrivateCodeJpaRepository;

	@Resource
	private GlobalPrivateCodeServiceMapper globalPrivateCodeServiceMapper;
	
	public GlobalPrivateCode findById(Integer id) {
		GlobalPrivateCodeEntity globalPrivateCodeEntity = globalPrivateCodeJpaRepository.findOne(id);
		return globalPrivateCodeServiceMapper.mapGlobalPrivateCodeEntityToGlobalPrivateCode(globalPrivateCodeEntity);
	}

	public List<GlobalPrivateCode> findAll() {
		Iterable<GlobalPrivateCodeEntity> entities = globalPrivateCodeJpaRepository.findAll();
		List<GlobalPrivateCode> beans = new ArrayList<GlobalPrivateCode>();
		for(GlobalPrivateCodeEntity globalPrivateCodeEntity : entities) {
			beans.add(globalPrivateCodeServiceMapper.mapGlobalPrivateCodeEntityToGlobalPrivateCode(globalPrivateCodeEntity));
		}
		return beans;
	}

	public GlobalPrivateCode save(GlobalPrivateCode globalPrivateCode) {
		return update(globalPrivateCode) ;
	}

	public GlobalPrivateCode create(GlobalPrivateCode globalPrivateCode) {
		GlobalPrivateCodeEntity globalPrivateCodeEntity = globalPrivateCodeJpaRepository.findOne(globalPrivateCode.getId());
		if( globalPrivateCodeEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		globalPrivateCodeEntity = new GlobalPrivateCodeEntity();
		globalPrivateCodeServiceMapper.mapGlobalPrivateCodeToGlobalPrivateCodeEntity(globalPrivateCode, globalPrivateCodeEntity);
		GlobalPrivateCodeEntity globalPrivateCodeEntitySaved = globalPrivateCodeJpaRepository.save(globalPrivateCodeEntity);
		return globalPrivateCodeServiceMapper.mapGlobalPrivateCodeEntityToGlobalPrivateCode(globalPrivateCodeEntitySaved);
	}

	public GlobalPrivateCode update(GlobalPrivateCode globalPrivateCode) {
		GlobalPrivateCodeEntity globalPrivateCodeEntity = globalPrivateCodeJpaRepository.findOne(globalPrivateCode.getId());
		globalPrivateCodeServiceMapper.mapGlobalPrivateCodeToGlobalPrivateCodeEntity(globalPrivateCode, globalPrivateCodeEntity);
		GlobalPrivateCodeEntity globalPrivateCodeEntitySaved = globalPrivateCodeJpaRepository.save(globalPrivateCodeEntity);
		return globalPrivateCodeServiceMapper.mapGlobalPrivateCodeEntityToGlobalPrivateCode(globalPrivateCodeEntitySaved);
	}

	public void delete(Integer id) {
		globalPrivateCodeJpaRepository.delete(id);
	}

	public GlobalPrivateCodeJpaRepository getGlobalPrivateCodeJpaRepository() {
		return globalPrivateCodeJpaRepository;
	}

	public void setGlobalPrivateCodeJpaRepository(GlobalPrivateCodeJpaRepository globalPrivateCodeJpaRepository) {
		this.globalPrivateCodeJpaRepository = globalPrivateCodeJpaRepository;
	}

	public GlobalPrivateCodeServiceMapper getGlobalPrivateCodeServiceMapper() {
		return globalPrivateCodeServiceMapper;
	}

	public void setGlobalPrivateCodeServiceMapper(GlobalPrivateCodeServiceMapper globalPrivateCodeServiceMapper) {
		this.globalPrivateCodeServiceMapper = globalPrivateCodeServiceMapper;
	}

}
