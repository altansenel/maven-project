/*
 * Created on 24 Þub 2016 ( Time 16:36:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.demo.bean.AdminUserRole;
import org.demo.bean.jpa.AdminUserRoleEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.AdminUserRoleService;
import org.demo.business.service.mapping.AdminUserRoleServiceMapper;
import org.demo.data.repository.jpa.AdminUserRoleJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of AdminUserRoleService
 */
@Component
@Transactional
public class AdminUserRoleServiceImpl implements AdminUserRoleService {

	@Resource
	private AdminUserRoleJpaRepository adminUserRoleJpaRepository;

	@Resource
	private AdminUserRoleServiceMapper adminUserRoleServiceMapper;
	
	public AdminUserRole findById(Integer id) {
		AdminUserRoleEntity adminUserRoleEntity = adminUserRoleJpaRepository.findOne(id);
		return adminUserRoleServiceMapper.mapAdminUserRoleEntityToAdminUserRole(adminUserRoleEntity);
	}

	public List<AdminUserRole> findAll() {
		Iterable<AdminUserRoleEntity> entities = adminUserRoleJpaRepository.findAll();
		List<AdminUserRole> beans = new ArrayList<AdminUserRole>();
		for(AdminUserRoleEntity adminUserRoleEntity : entities) {
			beans.add(adminUserRoleServiceMapper.mapAdminUserRoleEntityToAdminUserRole(adminUserRoleEntity));
		}
		return beans;
	}

	public AdminUserRole save(AdminUserRole adminUserRole) {
		return update(adminUserRole) ;
	}

	public AdminUserRole create(AdminUserRole adminUserRole) {
		AdminUserRoleEntity adminUserRoleEntity = adminUserRoleJpaRepository.findOne(adminUserRole.getId());
		if( adminUserRoleEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		adminUserRoleEntity = new AdminUserRoleEntity();
		adminUserRoleServiceMapper.mapAdminUserRoleToAdminUserRoleEntity(adminUserRole, adminUserRoleEntity);
		AdminUserRoleEntity adminUserRoleEntitySaved = adminUserRoleJpaRepository.save(adminUserRoleEntity);
		return adminUserRoleServiceMapper.mapAdminUserRoleEntityToAdminUserRole(adminUserRoleEntitySaved);
	}

	public AdminUserRole update(AdminUserRole adminUserRole) {
		AdminUserRoleEntity adminUserRoleEntity = adminUserRoleJpaRepository.findOne(adminUserRole.getId());
		adminUserRoleServiceMapper.mapAdminUserRoleToAdminUserRoleEntity(adminUserRole, adminUserRoleEntity);
		AdminUserRoleEntity adminUserRoleEntitySaved = adminUserRoleJpaRepository.save(adminUserRoleEntity);
		return adminUserRoleServiceMapper.mapAdminUserRoleEntityToAdminUserRole(adminUserRoleEntitySaved);
	}

	public void delete(Integer id) {
		adminUserRoleJpaRepository.delete(id);
	}

	public AdminUserRoleJpaRepository getAdminUserRoleJpaRepository() {
		return adminUserRoleJpaRepository;
	}

	public void setAdminUserRoleJpaRepository(AdminUserRoleJpaRepository adminUserRoleJpaRepository) {
		this.adminUserRoleJpaRepository = adminUserRoleJpaRepository;
	}

	public AdminUserRoleServiceMapper getAdminUserRoleServiceMapper() {
		return adminUserRoleServiceMapper;
	}

	public void setAdminUserRoleServiceMapper(AdminUserRoleServiceMapper adminUserRoleServiceMapper) {
		this.adminUserRoleServiceMapper = adminUserRoleServiceMapper;
	}

}
