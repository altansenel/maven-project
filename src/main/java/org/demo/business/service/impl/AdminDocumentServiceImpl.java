/*
 * Created on 24 Þub 2016 ( Time 16:36:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.demo.bean.AdminDocument;
import org.demo.bean.jpa.AdminDocumentEntity;
import java.util.List;
import org.demo.business.service.AdminDocumentService;
import org.demo.business.service.mapping.AdminDocumentServiceMapper;
import org.demo.data.repository.jpa.AdminDocumentJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of AdminDocumentService
 */
@Component
@Transactional
public class AdminDocumentServiceImpl implements AdminDocumentService {

	@Resource
	private AdminDocumentJpaRepository adminDocumentJpaRepository;

	@Resource
	private AdminDocumentServiceMapper adminDocumentServiceMapper;
	
	public AdminDocument findById(Integer id) {
		AdminDocumentEntity adminDocumentEntity = adminDocumentJpaRepository.findOne(id);
		return adminDocumentServiceMapper.mapAdminDocumentEntityToAdminDocument(adminDocumentEntity);
	}

	public List<AdminDocument> findAll() {
		Iterable<AdminDocumentEntity> entities = adminDocumentJpaRepository.findAll();
		List<AdminDocument> beans = new ArrayList<AdminDocument>();
		for(AdminDocumentEntity adminDocumentEntity : entities) {
			beans.add(adminDocumentServiceMapper.mapAdminDocumentEntityToAdminDocument(adminDocumentEntity));
		}
		return beans;
	}

	public AdminDocument save(AdminDocument adminDocument) {
		return update(adminDocument) ;
	}

	public AdminDocument create(AdminDocument adminDocument) {
		AdminDocumentEntity adminDocumentEntity = adminDocumentJpaRepository.findOne(adminDocument.getId());
		if( adminDocumentEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		adminDocumentEntity = new AdminDocumentEntity();
		adminDocumentServiceMapper.mapAdminDocumentToAdminDocumentEntity(adminDocument, adminDocumentEntity);
		AdminDocumentEntity adminDocumentEntitySaved = adminDocumentJpaRepository.save(adminDocumentEntity);
		return adminDocumentServiceMapper.mapAdminDocumentEntityToAdminDocument(adminDocumentEntitySaved);
	}

	public AdminDocument update(AdminDocument adminDocument) {
		AdminDocumentEntity adminDocumentEntity = adminDocumentJpaRepository.findOne(adminDocument.getId());
		adminDocumentServiceMapper.mapAdminDocumentToAdminDocumentEntity(adminDocument, adminDocumentEntity);
		AdminDocumentEntity adminDocumentEntitySaved = adminDocumentJpaRepository.save(adminDocumentEntity);
		return adminDocumentServiceMapper.mapAdminDocumentEntityToAdminDocument(adminDocumentEntitySaved);
	}

	public void delete(Integer id) {
		adminDocumentJpaRepository.delete(id);
	}

	public AdminDocumentJpaRepository getAdminDocumentJpaRepository() {
		return adminDocumentJpaRepository;
	}

	public void setAdminDocumentJpaRepository(AdminDocumentJpaRepository adminDocumentJpaRepository) {
		this.adminDocumentJpaRepository = adminDocumentJpaRepository;
	}

	public AdminDocumentServiceMapper getAdminDocumentServiceMapper() {
		return adminDocumentServiceMapper;
	}

	public void setAdminDocumentServiceMapper(AdminDocumentServiceMapper adminDocumentServiceMapper) {
		this.adminDocumentServiceMapper = adminDocumentServiceMapper;
	}

}
