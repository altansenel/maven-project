/*
 * Created on 24 Þub 2016 ( Time 16:36:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.demo.bean.InvoiceTransFactor;
import org.demo.bean.jpa.InvoiceTransFactorEntity;
import org.demo.business.service.InvoiceTransFactorService;
import org.demo.business.service.mapping.InvoiceTransFactorServiceMapper;
import org.demo.data.repository.jpa.InvoiceTransFactorJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of InvoiceTransFactorService
 */
@Component
@Transactional
public class InvoiceTransFactorServiceImpl implements InvoiceTransFactorService {

	@Resource
	private InvoiceTransFactorJpaRepository invoiceTransFactorJpaRepository;

	@Resource
	private InvoiceTransFactorServiceMapper invoiceTransFactorServiceMapper;
	
	public InvoiceTransFactor findById(Integer id) {
		InvoiceTransFactorEntity invoiceTransFactorEntity = invoiceTransFactorJpaRepository.findOne(id);
		return invoiceTransFactorServiceMapper.mapInvoiceTransFactorEntityToInvoiceTransFactor(invoiceTransFactorEntity);
	}

	public List<InvoiceTransFactor> findAll() {
		Iterable<InvoiceTransFactorEntity> entities = invoiceTransFactorJpaRepository.findAll();
		List<InvoiceTransFactor> beans = new ArrayList<InvoiceTransFactor>();
		for(InvoiceTransFactorEntity invoiceTransFactorEntity : entities) {
			beans.add(invoiceTransFactorServiceMapper.mapInvoiceTransFactorEntityToInvoiceTransFactor(invoiceTransFactorEntity));
		}
		return beans;
	}

	public InvoiceTransFactor save(InvoiceTransFactor invoiceTransFactor) {
		return update(invoiceTransFactor) ;
	}

	public InvoiceTransFactor create(InvoiceTransFactor invoiceTransFactor) {
		InvoiceTransFactorEntity invoiceTransFactorEntity = invoiceTransFactorJpaRepository.findOne(invoiceTransFactor.getId());
		if( invoiceTransFactorEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		invoiceTransFactorEntity = new InvoiceTransFactorEntity();
		invoiceTransFactorServiceMapper.mapInvoiceTransFactorToInvoiceTransFactorEntity(invoiceTransFactor, invoiceTransFactorEntity);
		InvoiceTransFactorEntity invoiceTransFactorEntitySaved = invoiceTransFactorJpaRepository.save(invoiceTransFactorEntity);
		return invoiceTransFactorServiceMapper.mapInvoiceTransFactorEntityToInvoiceTransFactor(invoiceTransFactorEntitySaved);
	}

	public InvoiceTransFactor update(InvoiceTransFactor invoiceTransFactor) {
		InvoiceTransFactorEntity invoiceTransFactorEntity = invoiceTransFactorJpaRepository.findOne(invoiceTransFactor.getId());
		invoiceTransFactorServiceMapper.mapInvoiceTransFactorToInvoiceTransFactorEntity(invoiceTransFactor, invoiceTransFactorEntity);
		InvoiceTransFactorEntity invoiceTransFactorEntitySaved = invoiceTransFactorJpaRepository.save(invoiceTransFactorEntity);
		return invoiceTransFactorServiceMapper.mapInvoiceTransFactorEntityToInvoiceTransFactor(invoiceTransFactorEntitySaved);
	}

	public void delete(Integer id) {
		invoiceTransFactorJpaRepository.delete(id);
	}

	public InvoiceTransFactorJpaRepository getInvoiceTransFactorJpaRepository() {
		return invoiceTransFactorJpaRepository;
	}

	public void setInvoiceTransFactorJpaRepository(InvoiceTransFactorJpaRepository invoiceTransFactorJpaRepository) {
		this.invoiceTransFactorJpaRepository = invoiceTransFactorJpaRepository;
	}

	public InvoiceTransFactorServiceMapper getInvoiceTransFactorServiceMapper() {
		return invoiceTransFactorServiceMapper;
	}

	public void setInvoiceTransFactorServiceMapper(InvoiceTransFactorServiceMapper invoiceTransFactorServiceMapper) {
		this.invoiceTransFactorServiceMapper = invoiceTransFactorServiceMapper;
	}

}
