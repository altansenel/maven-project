/*
 * Created on 24 Þub 2016 ( Time 16:36:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.demo.bean.WaybillTransRelation;
import org.demo.bean.jpa.WaybillTransRelationEntity;
import org.demo.business.service.WaybillTransRelationService;
import org.demo.business.service.mapping.WaybillTransRelationServiceMapper;
import org.demo.data.repository.jpa.WaybillTransRelationJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of WaybillTransRelationService
 */
@Component
@Transactional
public class WaybillTransRelationServiceImpl implements WaybillTransRelationService {

	@Resource
	private WaybillTransRelationJpaRepository waybillTransRelationJpaRepository;

	@Resource
	private WaybillTransRelationServiceMapper waybillTransRelationServiceMapper;
	
	public WaybillTransRelation findById(Integer id) {
		WaybillTransRelationEntity waybillTransRelationEntity = waybillTransRelationJpaRepository.findOne(id);
		return waybillTransRelationServiceMapper.mapWaybillTransRelationEntityToWaybillTransRelation(waybillTransRelationEntity);
	}

	public List<WaybillTransRelation> findAll() {
		Iterable<WaybillTransRelationEntity> entities = waybillTransRelationJpaRepository.findAll();
		List<WaybillTransRelation> beans = new ArrayList<WaybillTransRelation>();
		for(WaybillTransRelationEntity waybillTransRelationEntity : entities) {
			beans.add(waybillTransRelationServiceMapper.mapWaybillTransRelationEntityToWaybillTransRelation(waybillTransRelationEntity));
		}
		return beans;
	}

	public WaybillTransRelation save(WaybillTransRelation waybillTransRelation) {
		return update(waybillTransRelation) ;
	}

	public WaybillTransRelation create(WaybillTransRelation waybillTransRelation) {
		WaybillTransRelationEntity waybillTransRelationEntity = waybillTransRelationJpaRepository.findOne(waybillTransRelation.getId());
		if( waybillTransRelationEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		waybillTransRelationEntity = new WaybillTransRelationEntity();
		waybillTransRelationServiceMapper.mapWaybillTransRelationToWaybillTransRelationEntity(waybillTransRelation, waybillTransRelationEntity);
		WaybillTransRelationEntity waybillTransRelationEntitySaved = waybillTransRelationJpaRepository.save(waybillTransRelationEntity);
		return waybillTransRelationServiceMapper.mapWaybillTransRelationEntityToWaybillTransRelation(waybillTransRelationEntitySaved);
	}

	public WaybillTransRelation update(WaybillTransRelation waybillTransRelation) {
		WaybillTransRelationEntity waybillTransRelationEntity = waybillTransRelationJpaRepository.findOne(waybillTransRelation.getId());
		waybillTransRelationServiceMapper.mapWaybillTransRelationToWaybillTransRelationEntity(waybillTransRelation, waybillTransRelationEntity);
		WaybillTransRelationEntity waybillTransRelationEntitySaved = waybillTransRelationJpaRepository.save(waybillTransRelationEntity);
		return waybillTransRelationServiceMapper.mapWaybillTransRelationEntityToWaybillTransRelation(waybillTransRelationEntitySaved);
	}

	public void delete(Integer id) {
		waybillTransRelationJpaRepository.delete(id);
	}

	public WaybillTransRelationJpaRepository getWaybillTransRelationJpaRepository() {
		return waybillTransRelationJpaRepository;
	}

	public void setWaybillTransRelationJpaRepository(WaybillTransRelationJpaRepository waybillTransRelationJpaRepository) {
		this.waybillTransRelationJpaRepository = waybillTransRelationJpaRepository;
	}

	public WaybillTransRelationServiceMapper getWaybillTransRelationServiceMapper() {
		return waybillTransRelationServiceMapper;
	}

	public void setWaybillTransRelationServiceMapper(WaybillTransRelationServiceMapper waybillTransRelationServiceMapper) {
		this.waybillTransRelationServiceMapper = waybillTransRelationServiceMapper;
	}

}
