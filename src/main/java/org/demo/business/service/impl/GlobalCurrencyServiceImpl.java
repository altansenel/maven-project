/*
 * Created on 24 Þub 2016 ( Time 16:36:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.demo.bean.GlobalCurrency;
import org.demo.bean.jpa.GlobalCurrencyEntity;
import java.util.Date;
import org.demo.business.service.GlobalCurrencyService;
import org.demo.business.service.mapping.GlobalCurrencyServiceMapper;
import org.demo.data.repository.jpa.GlobalCurrencyJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of GlobalCurrencyService
 */
@Component
@Transactional
public class GlobalCurrencyServiceImpl implements GlobalCurrencyService {

	@Resource
	private GlobalCurrencyJpaRepository globalCurrencyJpaRepository;

	@Resource
	private GlobalCurrencyServiceMapper globalCurrencyServiceMapper;
	
	public GlobalCurrency findById(Integer id) {
		GlobalCurrencyEntity globalCurrencyEntity = globalCurrencyJpaRepository.findOne(id);
		return globalCurrencyServiceMapper.mapGlobalCurrencyEntityToGlobalCurrency(globalCurrencyEntity);
	}

	public List<GlobalCurrency> findAll() {
		Iterable<GlobalCurrencyEntity> entities = globalCurrencyJpaRepository.findAll();
		List<GlobalCurrency> beans = new ArrayList<GlobalCurrency>();
		for(GlobalCurrencyEntity globalCurrencyEntity : entities) {
			beans.add(globalCurrencyServiceMapper.mapGlobalCurrencyEntityToGlobalCurrency(globalCurrencyEntity));
		}
		return beans;
	}

	public GlobalCurrency save(GlobalCurrency globalCurrency) {
		return update(globalCurrency) ;
	}

	public GlobalCurrency create(GlobalCurrency globalCurrency) {
		GlobalCurrencyEntity globalCurrencyEntity = globalCurrencyJpaRepository.findOne(globalCurrency.getId());
		if( globalCurrencyEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		globalCurrencyEntity = new GlobalCurrencyEntity();
		globalCurrencyServiceMapper.mapGlobalCurrencyToGlobalCurrencyEntity(globalCurrency, globalCurrencyEntity);
		GlobalCurrencyEntity globalCurrencyEntitySaved = globalCurrencyJpaRepository.save(globalCurrencyEntity);
		return globalCurrencyServiceMapper.mapGlobalCurrencyEntityToGlobalCurrency(globalCurrencyEntitySaved);
	}

	public GlobalCurrency update(GlobalCurrency globalCurrency) {
		GlobalCurrencyEntity globalCurrencyEntity = globalCurrencyJpaRepository.findOne(globalCurrency.getId());
		globalCurrencyServiceMapper.mapGlobalCurrencyToGlobalCurrencyEntity(globalCurrency, globalCurrencyEntity);
		GlobalCurrencyEntity globalCurrencyEntitySaved = globalCurrencyJpaRepository.save(globalCurrencyEntity);
		return globalCurrencyServiceMapper.mapGlobalCurrencyEntityToGlobalCurrency(globalCurrencyEntitySaved);
	}

	public void delete(Integer id) {
		globalCurrencyJpaRepository.delete(id);
	}

	public GlobalCurrencyJpaRepository getGlobalCurrencyJpaRepository() {
		return globalCurrencyJpaRepository;
	}

	public void setGlobalCurrencyJpaRepository(GlobalCurrencyJpaRepository globalCurrencyJpaRepository) {
		this.globalCurrencyJpaRepository = globalCurrencyJpaRepository;
	}

	public GlobalCurrencyServiceMapper getGlobalCurrencyServiceMapper() {
		return globalCurrencyServiceMapper;
	}

	public void setGlobalCurrencyServiceMapper(GlobalCurrencyServiceMapper globalCurrencyServiceMapper) {
		this.globalCurrencyServiceMapper = globalCurrencyServiceMapper;
	}

}
