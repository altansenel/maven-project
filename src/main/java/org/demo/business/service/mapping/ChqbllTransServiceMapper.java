/*
 * Created on 24 Þub 2016 ( Time 16:27:50 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.demo.bean.ChqbllTrans;
import org.demo.bean.jpa.ChqbllTransEntity;
import org.demo.bean.jpa.BankEntity;
import org.demo.bean.jpa.ChqbllPayrollSourceEntity;
import org.demo.bean.jpa.ContactEntity;
import org.demo.bean.jpa.GlobalPrivateCodeEntity;
import org.demo.bean.jpa.SafeEntity;
import org.demo.bean.jpa.GlobalTransPointEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class ChqbllTransServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public ChqbllTransServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'ChqbllTransEntity' to 'ChqbllTrans'
	 * @param chqbllTransEntity
	 */
	public ChqbllTrans mapChqbllTransEntityToChqbllTrans(ChqbllTransEntity chqbllTransEntity) {
		if(chqbllTransEntity == null) {
			return null;
		}

		//--- Generic mapping 
		ChqbllTrans chqbllTrans = map(chqbllTransEntity, ChqbllTrans.class);

		//--- Link mapping ( link to Bank )
		if(chqbllTransEntity.getBank() != null) {
			chqbllTrans.setBankId(chqbllTransEntity.getBank().getId());
		}
		//--- Link mapping ( link to ChqbllPayrollSource )
		if(chqbllTransEntity.getChqbllPayrollSource() != null) {
			chqbllTrans.setTransSourceId(chqbllTransEntity.getChqbllPayrollSource().getId());
		}
		//--- Link mapping ( link to Contact )
		if(chqbllTransEntity.getContact() != null) {
			chqbllTrans.setContactId(chqbllTransEntity.getContact().getId());
		}
		//--- Link mapping ( link to GlobalPrivateCode )
		if(chqbllTransEntity.getGlobalPrivateCode() != null) {
			chqbllTrans.setPrivateCodeId(chqbllTransEntity.getGlobalPrivateCode().getId());
		}
		//--- Link mapping ( link to Safe )
		if(chqbllTransEntity.getSafe() != null) {
			chqbllTrans.setSafeId(chqbllTransEntity.getSafe().getId());
		}
		//--- Link mapping ( link to GlobalTransPoint )
		if(chqbllTransEntity.getGlobalTransPoint() != null) {
			chqbllTrans.setTransPointId(chqbllTransEntity.getGlobalTransPoint().getId());
		}
		return chqbllTrans;
	}
	
	/**
	 * Mapping from 'ChqbllTrans' to 'ChqbllTransEntity'
	 * @param chqbllTrans
	 * @param chqbllTransEntity
	 */
	public void mapChqbllTransToChqbllTransEntity(ChqbllTrans chqbllTrans, ChqbllTransEntity chqbllTransEntity) {
		if(chqbllTrans == null) {
			return;
		}

		//--- Generic mapping 
		map(chqbllTrans, chqbllTransEntity);

		//--- Link mapping ( link : chqbllTrans )
		if( hasLinkToBank(chqbllTrans) ) {
			BankEntity bank1 = new BankEntity();
			bank1.setId( chqbllTrans.getBankId() );
			chqbllTransEntity.setBank( bank1 );
		} else {
			chqbllTransEntity.setBank( null );
		}

		//--- Link mapping ( link : chqbllTrans )
		if( hasLinkToChqbllPayrollSource(chqbllTrans) ) {
			ChqbllPayrollSourceEntity chqbllPayrollSource2 = new ChqbllPayrollSourceEntity();
			chqbllPayrollSource2.setId( chqbllTrans.getTransSourceId() );
			chqbllTransEntity.setChqbllPayrollSource( chqbllPayrollSource2 );
		} else {
			chqbllTransEntity.setChqbllPayrollSource( null );
		}

		//--- Link mapping ( link : chqbllTrans )
		if( hasLinkToContact(chqbllTrans) ) {
			ContactEntity contact3 = new ContactEntity();
			contact3.setId( chqbllTrans.getContactId() );
			chqbllTransEntity.setContact( contact3 );
		} else {
			chqbllTransEntity.setContact( null );
		}

		//--- Link mapping ( link : chqbllTrans )
		if( hasLinkToGlobalPrivateCode(chqbllTrans) ) {
			GlobalPrivateCodeEntity globalPrivateCode4 = new GlobalPrivateCodeEntity();
			globalPrivateCode4.setId( chqbllTrans.getPrivateCodeId() );
			chqbllTransEntity.setGlobalPrivateCode( globalPrivateCode4 );
		} else {
			chqbllTransEntity.setGlobalPrivateCode( null );
		}

		//--- Link mapping ( link : chqbllTrans )
		if( hasLinkToSafe(chqbllTrans) ) {
			SafeEntity safe5 = new SafeEntity();
			safe5.setId( chqbllTrans.getSafeId() );
			chqbllTransEntity.setSafe( safe5 );
		} else {
			chqbllTransEntity.setSafe( null );
		}

		//--- Link mapping ( link : chqbllTrans )
		if( hasLinkToGlobalTransPoint(chqbllTrans) ) {
			GlobalTransPointEntity globalTransPoint6 = new GlobalTransPointEntity();
			globalTransPoint6.setId( chqbllTrans.getTransPointId() );
			chqbllTransEntity.setGlobalTransPoint( globalTransPoint6 );
		} else {
			chqbllTransEntity.setGlobalTransPoint( null );
		}

	}
	
	/**
	 * Verify that Bank id is valid.
	 * @param Bank Bank
	 * @return boolean
	 */
	private boolean hasLinkToBank(ChqbllTrans chqbllTrans) {
		if(chqbllTrans.getBankId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that ChqbllPayrollSource id is valid.
	 * @param ChqbllPayrollSource ChqbllPayrollSource
	 * @return boolean
	 */
	private boolean hasLinkToChqbllPayrollSource(ChqbllTrans chqbllTrans) {
		if(chqbllTrans.getTransSourceId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Contact id is valid.
	 * @param Contact Contact
	 * @return boolean
	 */
	private boolean hasLinkToContact(ChqbllTrans chqbllTrans) {
		if(chqbllTrans.getContactId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that GlobalPrivateCode id is valid.
	 * @param GlobalPrivateCode GlobalPrivateCode
	 * @return boolean
	 */
	private boolean hasLinkToGlobalPrivateCode(ChqbllTrans chqbllTrans) {
		if(chqbllTrans.getPrivateCodeId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Safe id is valid.
	 * @param Safe Safe
	 * @return boolean
	 */
	private boolean hasLinkToSafe(ChqbllTrans chqbllTrans) {
		if(chqbllTrans.getSafeId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that GlobalTransPoint id is valid.
	 * @param GlobalTransPoint GlobalTransPoint
	 * @return boolean
	 */
	private boolean hasLinkToGlobalTransPoint(ChqbllTrans chqbllTrans) {
		if(chqbllTrans.getTransPointId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}