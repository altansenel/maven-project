/*
 * Created on 24 Þub 2016 ( Time 16:27:53 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.demo.bean.WaybillTransFactor;
import org.demo.bean.jpa.WaybillTransFactorEntity;
import org.demo.bean.jpa.StockCostFactorEntity;
import org.demo.bean.jpa.WaybillTransEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class WaybillTransFactorServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public WaybillTransFactorServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'WaybillTransFactorEntity' to 'WaybillTransFactor'
	 * @param waybillTransFactorEntity
	 */
	public WaybillTransFactor mapWaybillTransFactorEntityToWaybillTransFactor(WaybillTransFactorEntity waybillTransFactorEntity) {
		if(waybillTransFactorEntity == null) {
			return null;
		}

		//--- Generic mapping 
		WaybillTransFactor waybillTransFactor = map(waybillTransFactorEntity, WaybillTransFactor.class);

		//--- Link mapping ( link to StockCostFactor )
		if(waybillTransFactorEntity.getStockCostFactor() != null) {
			waybillTransFactor.setFactorId(waybillTransFactorEntity.getStockCostFactor().getId());
		}
		//--- Link mapping ( link to WaybillTrans )
		if(waybillTransFactorEntity.getWaybillTrans() != null) {
			waybillTransFactor.setTransId(waybillTransFactorEntity.getWaybillTrans().getId());
		}
		return waybillTransFactor;
	}
	
	/**
	 * Mapping from 'WaybillTransFactor' to 'WaybillTransFactorEntity'
	 * @param waybillTransFactor
	 * @param waybillTransFactorEntity
	 */
	public void mapWaybillTransFactorToWaybillTransFactorEntity(WaybillTransFactor waybillTransFactor, WaybillTransFactorEntity waybillTransFactorEntity) {
		if(waybillTransFactor == null) {
			return;
		}

		//--- Generic mapping 
		map(waybillTransFactor, waybillTransFactorEntity);

		//--- Link mapping ( link : waybillTransFactor )
		if( hasLinkToStockCostFactor(waybillTransFactor) ) {
			StockCostFactorEntity stockCostFactor1 = new StockCostFactorEntity();
			stockCostFactor1.setId( waybillTransFactor.getFactorId() );
			waybillTransFactorEntity.setStockCostFactor( stockCostFactor1 );
		} else {
			waybillTransFactorEntity.setStockCostFactor( null );
		}

		//--- Link mapping ( link : waybillTransFactor )
		if( hasLinkToWaybillTrans(waybillTransFactor) ) {
			WaybillTransEntity waybillTrans2 = new WaybillTransEntity();
			waybillTrans2.setId( waybillTransFactor.getTransId() );
			waybillTransFactorEntity.setWaybillTrans( waybillTrans2 );
		} else {
			waybillTransFactorEntity.setWaybillTrans( null );
		}

	}
	
	/**
	 * Verify that StockCostFactor id is valid.
	 * @param StockCostFactor StockCostFactor
	 * @return boolean
	 */
	private boolean hasLinkToStockCostFactor(WaybillTransFactor waybillTransFactor) {
		if(waybillTransFactor.getFactorId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that WaybillTrans id is valid.
	 * @param WaybillTrans WaybillTrans
	 * @return boolean
	 */
	private boolean hasLinkToWaybillTrans(WaybillTransFactor waybillTransFactor) {
		if(waybillTransFactor.getTransId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}