/*
 * Created on 24 Þub 2016 ( Time 16:27:49 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.demo.bean.BankTrans;
import org.demo.bean.jpa.BankTransEntity;
import org.demo.bean.jpa.GlobalTransPointEntity;
import org.demo.bean.jpa.BankEntity;
import org.demo.bean.jpa.BankTransSourceEntity;
import org.demo.bean.jpa.GlobalPrivateCodeEntity;
import org.demo.bean.jpa.BankExpenseEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class BankTransServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public BankTransServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'BankTransEntity' to 'BankTrans'
	 * @param bankTransEntity
	 */
	public BankTrans mapBankTransEntityToBankTrans(BankTransEntity bankTransEntity) {
		if(bankTransEntity == null) {
			return null;
		}

		//--- Generic mapping 
		BankTrans bankTrans = map(bankTransEntity, BankTrans.class);

		//--- Link mapping ( link to GlobalTransPoint )
		if(bankTransEntity.getGlobalTransPoint() != null) {
			bankTrans.setTransPointId(bankTransEntity.getGlobalTransPoint().getId());
		}
		//--- Link mapping ( link to Bank )
		if(bankTransEntity.getBank() != null) {
			bankTrans.setBankId(bankTransEntity.getBank().getId());
		}
		//--- Link mapping ( link to BankTransSource )
		if(bankTransEntity.getBankTransSource() != null) {
			bankTrans.setTransSourceId(bankTransEntity.getBankTransSource().getId());
		}
		//--- Link mapping ( link to GlobalPrivateCode )
		if(bankTransEntity.getGlobalPrivateCode() != null) {
			bankTrans.setPrivateCodeId(bankTransEntity.getGlobalPrivateCode().getId());
		}
		//--- Link mapping ( link to BankExpense )
		if(bankTransEntity.getBankExpense() != null) {
			bankTrans.setExpenseId(bankTransEntity.getBankExpense().getId());
		}
		return bankTrans;
	}
	
	/**
	 * Mapping from 'BankTrans' to 'BankTransEntity'
	 * @param bankTrans
	 * @param bankTransEntity
	 */
	public void mapBankTransToBankTransEntity(BankTrans bankTrans, BankTransEntity bankTransEntity) {
		if(bankTrans == null) {
			return;
		}

		//--- Generic mapping 
		map(bankTrans, bankTransEntity);

		//--- Link mapping ( link : bankTrans )
		if( hasLinkToGlobalTransPoint(bankTrans) ) {
			GlobalTransPointEntity globalTransPoint1 = new GlobalTransPointEntity();
			globalTransPoint1.setId( bankTrans.getTransPointId() );
			bankTransEntity.setGlobalTransPoint( globalTransPoint1 );
		} else {
			bankTransEntity.setGlobalTransPoint( null );
		}

		//--- Link mapping ( link : bankTrans )
		if( hasLinkToBank(bankTrans) ) {
			BankEntity bank2 = new BankEntity();
			bank2.setId( bankTrans.getBankId() );
			bankTransEntity.setBank( bank2 );
		} else {
			bankTransEntity.setBank( null );
		}

		//--- Link mapping ( link : bankTrans )
		if( hasLinkToBankTransSource(bankTrans) ) {
			BankTransSourceEntity bankTransSource3 = new BankTransSourceEntity();
			bankTransSource3.setId( bankTrans.getTransSourceId() );
			bankTransEntity.setBankTransSource( bankTransSource3 );
		} else {
			bankTransEntity.setBankTransSource( null );
		}

		//--- Link mapping ( link : bankTrans )
		if( hasLinkToGlobalPrivateCode(bankTrans) ) {
			GlobalPrivateCodeEntity globalPrivateCode4 = new GlobalPrivateCodeEntity();
			globalPrivateCode4.setId( bankTrans.getPrivateCodeId() );
			bankTransEntity.setGlobalPrivateCode( globalPrivateCode4 );
		} else {
			bankTransEntity.setGlobalPrivateCode( null );
		}

		//--- Link mapping ( link : bankTrans )
		if( hasLinkToBankExpense(bankTrans) ) {
			BankExpenseEntity bankExpense5 = new BankExpenseEntity();
			bankExpense5.setId( bankTrans.getExpenseId() );
			bankTransEntity.setBankExpense( bankExpense5 );
		} else {
			bankTransEntity.setBankExpense( null );
		}

	}
	
	/**
	 * Verify that GlobalTransPoint id is valid.
	 * @param GlobalTransPoint GlobalTransPoint
	 * @return boolean
	 */
	private boolean hasLinkToGlobalTransPoint(BankTrans bankTrans) {
		if(bankTrans.getTransPointId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Bank id is valid.
	 * @param Bank Bank
	 * @return boolean
	 */
	private boolean hasLinkToBank(BankTrans bankTrans) {
		if(bankTrans.getBankId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that BankTransSource id is valid.
	 * @param BankTransSource BankTransSource
	 * @return boolean
	 */
	private boolean hasLinkToBankTransSource(BankTrans bankTrans) {
		if(bankTrans.getTransSourceId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that GlobalPrivateCode id is valid.
	 * @param GlobalPrivateCode GlobalPrivateCode
	 * @return boolean
	 */
	private boolean hasLinkToGlobalPrivateCode(BankTrans bankTrans) {
		if(bankTrans.getPrivateCodeId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that BankExpense id is valid.
	 * @param BankExpense BankExpense
	 * @return boolean
	 */
	private boolean hasLinkToBankExpense(BankTrans bankTrans) {
		if(bankTrans.getExpenseId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}