/*
 * Created on 24 Þub 2016 ( Time 16:27:51 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.demo.bean.InvoiceTransDetail;
import org.demo.bean.jpa.InvoiceTransDetailEntity;
import org.demo.bean.jpa.SaleSellerEntity;
import org.demo.bean.jpa.InvoiceTransEntity;
import org.demo.bean.jpa.InvoiceTransSourceEntity;
import org.demo.bean.jpa.StockEntity;
import org.demo.bean.jpa.GlobalTransPointEntity;
import org.demo.bean.jpa.StockDepotEntity;
import org.demo.bean.jpa.GlobalPrivateCodeEntity;
import org.demo.bean.jpa.ContactEntity;
import org.demo.bean.jpa.InvoiceTransStatusEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class InvoiceTransDetailServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public InvoiceTransDetailServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'InvoiceTransDetailEntity' to 'InvoiceTransDetail'
	 * @param invoiceTransDetailEntity
	 */
	public InvoiceTransDetail mapInvoiceTransDetailEntityToInvoiceTransDetail(InvoiceTransDetailEntity invoiceTransDetailEntity) {
		if(invoiceTransDetailEntity == null) {
			return null;
		}

		//--- Generic mapping 
		InvoiceTransDetail invoiceTransDetail = map(invoiceTransDetailEntity, InvoiceTransDetail.class);

		//--- Link mapping ( link to SaleSeller )
		if(invoiceTransDetailEntity.getSaleSeller() != null) {
			invoiceTransDetail.setSellerId(invoiceTransDetailEntity.getSaleSeller().getId());
		}
		//--- Link mapping ( link to InvoiceTrans )
		if(invoiceTransDetailEntity.getInvoiceTrans() != null) {
			invoiceTransDetail.setTransId(invoiceTransDetailEntity.getInvoiceTrans().getId());
		}
		//--- Link mapping ( link to InvoiceTransSource )
		if(invoiceTransDetailEntity.getInvoiceTransSource() != null) {
			invoiceTransDetail.setTransSourceId(invoiceTransDetailEntity.getInvoiceTransSource().getId());
		}
		//--- Link mapping ( link to Stock )
		if(invoiceTransDetailEntity.getStock() != null) {
			invoiceTransDetail.setStockId(invoiceTransDetailEntity.getStock().getId());
		}
		//--- Link mapping ( link to GlobalTransPoint )
		if(invoiceTransDetailEntity.getGlobalTransPoint() != null) {
			invoiceTransDetail.setTransPointId(invoiceTransDetailEntity.getGlobalTransPoint().getId());
		}
		//--- Link mapping ( link to StockDepot )
		if(invoiceTransDetailEntity.getStockDepot() != null) {
			invoiceTransDetail.setDepotId(invoiceTransDetailEntity.getStockDepot().getId());
		}
		//--- Link mapping ( link to GlobalPrivateCode )
		if(invoiceTransDetailEntity.getGlobalPrivateCode() != null) {
			invoiceTransDetail.setPrivateCodeId(invoiceTransDetailEntity.getGlobalPrivateCode().getId());
		}
		//--- Link mapping ( link to Contact )
		if(invoiceTransDetailEntity.getContact() != null) {
			invoiceTransDetail.setContactId(invoiceTransDetailEntity.getContact().getId());
		}
		//--- Link mapping ( link to InvoiceTransStatus )
		if(invoiceTransDetailEntity.getInvoiceTransStatus() != null) {
			invoiceTransDetail.setStatusId(invoiceTransDetailEntity.getInvoiceTransStatus().getId());
		}
		return invoiceTransDetail;
	}
	
	/**
	 * Mapping from 'InvoiceTransDetail' to 'InvoiceTransDetailEntity'
	 * @param invoiceTransDetail
	 * @param invoiceTransDetailEntity
	 */
	public void mapInvoiceTransDetailToInvoiceTransDetailEntity(InvoiceTransDetail invoiceTransDetail, InvoiceTransDetailEntity invoiceTransDetailEntity) {
		if(invoiceTransDetail == null) {
			return;
		}

		//--- Generic mapping 
		map(invoiceTransDetail, invoiceTransDetailEntity);

		//--- Link mapping ( link : invoiceTransDetail )
		if( hasLinkToSaleSeller(invoiceTransDetail) ) {
			SaleSellerEntity saleSeller1 = new SaleSellerEntity();
			saleSeller1.setId( invoiceTransDetail.getSellerId() );
			invoiceTransDetailEntity.setSaleSeller( saleSeller1 );
		} else {
			invoiceTransDetailEntity.setSaleSeller( null );
		}

		//--- Link mapping ( link : invoiceTransDetail )
		if( hasLinkToInvoiceTrans(invoiceTransDetail) ) {
			InvoiceTransEntity invoiceTrans2 = new InvoiceTransEntity();
			invoiceTrans2.setId( invoiceTransDetail.getTransId() );
			invoiceTransDetailEntity.setInvoiceTrans( invoiceTrans2 );
		} else {
			invoiceTransDetailEntity.setInvoiceTrans( null );
		}

		//--- Link mapping ( link : invoiceTransDetail )
		if( hasLinkToInvoiceTransSource(invoiceTransDetail) ) {
			InvoiceTransSourceEntity invoiceTransSource3 = new InvoiceTransSourceEntity();
			invoiceTransSource3.setId( invoiceTransDetail.getTransSourceId() );
			invoiceTransDetailEntity.setInvoiceTransSource( invoiceTransSource3 );
		} else {
			invoiceTransDetailEntity.setInvoiceTransSource( null );
		}

		//--- Link mapping ( link : invoiceTransDetail )
		if( hasLinkToStock(invoiceTransDetail) ) {
			StockEntity stock4 = new StockEntity();
			stock4.setId( invoiceTransDetail.getStockId() );
			invoiceTransDetailEntity.setStock( stock4 );
		} else {
			invoiceTransDetailEntity.setStock( null );
		}

		//--- Link mapping ( link : invoiceTransDetail )
		if( hasLinkToGlobalTransPoint(invoiceTransDetail) ) {
			GlobalTransPointEntity globalTransPoint5 = new GlobalTransPointEntity();
			globalTransPoint5.setId( invoiceTransDetail.getTransPointId() );
			invoiceTransDetailEntity.setGlobalTransPoint( globalTransPoint5 );
		} else {
			invoiceTransDetailEntity.setGlobalTransPoint( null );
		}

		//--- Link mapping ( link : invoiceTransDetail )
		if( hasLinkToStockDepot(invoiceTransDetail) ) {
			StockDepotEntity stockDepot6 = new StockDepotEntity();
			stockDepot6.setId( invoiceTransDetail.getDepotId() );
			invoiceTransDetailEntity.setStockDepot( stockDepot6 );
		} else {
			invoiceTransDetailEntity.setStockDepot( null );
		}

		//--- Link mapping ( link : invoiceTransDetail )
		if( hasLinkToGlobalPrivateCode(invoiceTransDetail) ) {
			GlobalPrivateCodeEntity globalPrivateCode7 = new GlobalPrivateCodeEntity();
			globalPrivateCode7.setId( invoiceTransDetail.getPrivateCodeId() );
			invoiceTransDetailEntity.setGlobalPrivateCode( globalPrivateCode7 );
		} else {
			invoiceTransDetailEntity.setGlobalPrivateCode( null );
		}

		//--- Link mapping ( link : invoiceTransDetail )
		if( hasLinkToContact(invoiceTransDetail) ) {
			ContactEntity contact8 = new ContactEntity();
			contact8.setId( invoiceTransDetail.getContactId() );
			invoiceTransDetailEntity.setContact( contact8 );
		} else {
			invoiceTransDetailEntity.setContact( null );
		}

		//--- Link mapping ( link : invoiceTransDetail )
		if( hasLinkToInvoiceTransStatus(invoiceTransDetail) ) {
			InvoiceTransStatusEntity invoiceTransStatus9 = new InvoiceTransStatusEntity();
			invoiceTransStatus9.setId( invoiceTransDetail.getStatusId() );
			invoiceTransDetailEntity.setInvoiceTransStatus( invoiceTransStatus9 );
		} else {
			invoiceTransDetailEntity.setInvoiceTransStatus( null );
		}

	}
	
	/**
	 * Verify that SaleSeller id is valid.
	 * @param SaleSeller SaleSeller
	 * @return boolean
	 */
	private boolean hasLinkToSaleSeller(InvoiceTransDetail invoiceTransDetail) {
		if(invoiceTransDetail.getSellerId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that InvoiceTrans id is valid.
	 * @param InvoiceTrans InvoiceTrans
	 * @return boolean
	 */
	private boolean hasLinkToInvoiceTrans(InvoiceTransDetail invoiceTransDetail) {
		if(invoiceTransDetail.getTransId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that InvoiceTransSource id is valid.
	 * @param InvoiceTransSource InvoiceTransSource
	 * @return boolean
	 */
	private boolean hasLinkToInvoiceTransSource(InvoiceTransDetail invoiceTransDetail) {
		if(invoiceTransDetail.getTransSourceId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Stock id is valid.
	 * @param Stock Stock
	 * @return boolean
	 */
	private boolean hasLinkToStock(InvoiceTransDetail invoiceTransDetail) {
		if(invoiceTransDetail.getStockId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that GlobalTransPoint id is valid.
	 * @param GlobalTransPoint GlobalTransPoint
	 * @return boolean
	 */
	private boolean hasLinkToGlobalTransPoint(InvoiceTransDetail invoiceTransDetail) {
		if(invoiceTransDetail.getTransPointId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that StockDepot id is valid.
	 * @param StockDepot StockDepot
	 * @return boolean
	 */
	private boolean hasLinkToStockDepot(InvoiceTransDetail invoiceTransDetail) {
		if(invoiceTransDetail.getDepotId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that GlobalPrivateCode id is valid.
	 * @param GlobalPrivateCode GlobalPrivateCode
	 * @return boolean
	 */
	private boolean hasLinkToGlobalPrivateCode(InvoiceTransDetail invoiceTransDetail) {
		if(invoiceTransDetail.getPrivateCodeId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Contact id is valid.
	 * @param Contact Contact
	 * @return boolean
	 */
	private boolean hasLinkToContact(InvoiceTransDetail invoiceTransDetail) {
		if(invoiceTransDetail.getContactId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that InvoiceTransStatus id is valid.
	 * @param InvoiceTransStatus InvoiceTransStatus
	 * @return boolean
	 */
	private boolean hasLinkToInvoiceTransStatus(InvoiceTransDetail invoiceTransDetail) {
		if(invoiceTransDetail.getStatusId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}