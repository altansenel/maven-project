/*
 * Created on 24 Þub 2016 ( Time 16:27:50 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.demo.bean.ContactTrans;
import org.demo.bean.jpa.ContactTransEntity;
import org.demo.bean.jpa.ContactTransSourceEntity;
import org.demo.bean.jpa.GlobalPrivateCodeEntity;
import org.demo.bean.jpa.ContactEntity;
import org.demo.bean.jpa.GlobalTransPointEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class ContactTransServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public ContactTransServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'ContactTransEntity' to 'ContactTrans'
	 * @param contactTransEntity
	 */
	public ContactTrans mapContactTransEntityToContactTrans(ContactTransEntity contactTransEntity) {
		if(contactTransEntity == null) {
			return null;
		}

		//--- Generic mapping 
		ContactTrans contactTrans = map(contactTransEntity, ContactTrans.class);

		//--- Link mapping ( link to ContactTransSource )
		if(contactTransEntity.getContactTransSource() != null) {
			contactTrans.setTransSourceId(contactTransEntity.getContactTransSource().getId());
		}
		//--- Link mapping ( link to GlobalPrivateCode )
		if(contactTransEntity.getGlobalPrivateCode() != null) {
			contactTrans.setPrivateCodeId(contactTransEntity.getGlobalPrivateCode().getId());
		}
		//--- Link mapping ( link to Contact )
		if(contactTransEntity.getContact() != null) {
			contactTrans.setContactId(contactTransEntity.getContact().getId());
		}
		//--- Link mapping ( link to GlobalTransPoint )
		if(contactTransEntity.getGlobalTransPoint() != null) {
			contactTrans.setTransPointId(contactTransEntity.getGlobalTransPoint().getId());
		}
		return contactTrans;
	}
	
	/**
	 * Mapping from 'ContactTrans' to 'ContactTransEntity'
	 * @param contactTrans
	 * @param contactTransEntity
	 */
	public void mapContactTransToContactTransEntity(ContactTrans contactTrans, ContactTransEntity contactTransEntity) {
		if(contactTrans == null) {
			return;
		}

		//--- Generic mapping 
		map(contactTrans, contactTransEntity);

		//--- Link mapping ( link : contactTrans )
		if( hasLinkToContactTransSource(contactTrans) ) {
			ContactTransSourceEntity contactTransSource1 = new ContactTransSourceEntity();
			contactTransSource1.setId( contactTrans.getTransSourceId() );
			contactTransEntity.setContactTransSource( contactTransSource1 );
		} else {
			contactTransEntity.setContactTransSource( null );
		}

		//--- Link mapping ( link : contactTrans )
		if( hasLinkToGlobalPrivateCode(contactTrans) ) {
			GlobalPrivateCodeEntity globalPrivateCode2 = new GlobalPrivateCodeEntity();
			globalPrivateCode2.setId( contactTrans.getPrivateCodeId() );
			contactTransEntity.setGlobalPrivateCode( globalPrivateCode2 );
		} else {
			contactTransEntity.setGlobalPrivateCode( null );
		}

		//--- Link mapping ( link : contactTrans )
		if( hasLinkToContact(contactTrans) ) {
			ContactEntity contact3 = new ContactEntity();
			contact3.setId( contactTrans.getContactId() );
			contactTransEntity.setContact( contact3 );
		} else {
			contactTransEntity.setContact( null );
		}

		//--- Link mapping ( link : contactTrans )
		if( hasLinkToGlobalTransPoint(contactTrans) ) {
			GlobalTransPointEntity globalTransPoint4 = new GlobalTransPointEntity();
			globalTransPoint4.setId( contactTrans.getTransPointId() );
			contactTransEntity.setGlobalTransPoint( globalTransPoint4 );
		} else {
			contactTransEntity.setGlobalTransPoint( null );
		}

	}
	
	/**
	 * Verify that ContactTransSource id is valid.
	 * @param ContactTransSource ContactTransSource
	 * @return boolean
	 */
	private boolean hasLinkToContactTransSource(ContactTrans contactTrans) {
		if(contactTrans.getTransSourceId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that GlobalPrivateCode id is valid.
	 * @param GlobalPrivateCode GlobalPrivateCode
	 * @return boolean
	 */
	private boolean hasLinkToGlobalPrivateCode(ContactTrans contactTrans) {
		if(contactTrans.getPrivateCodeId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Contact id is valid.
	 * @param Contact Contact
	 * @return boolean
	 */
	private boolean hasLinkToContact(ContactTrans contactTrans) {
		if(contactTrans.getContactId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that GlobalTransPoint id is valid.
	 * @param GlobalTransPoint GlobalTransPoint
	 * @return boolean
	 */
	private boolean hasLinkToGlobalTransPoint(ContactTrans contactTrans) {
		if(contactTrans.getTransPointId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}