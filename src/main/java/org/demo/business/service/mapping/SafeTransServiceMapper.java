/*
 * Created on 24 Þub 2016 ( Time 16:27:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.demo.bean.SafeTrans;
import org.demo.bean.jpa.SafeTransEntity;
import org.demo.bean.jpa.GlobalPrivateCodeEntity;
import org.demo.bean.jpa.SafeExpenseEntity;
import org.demo.bean.jpa.GlobalTransPointEntity;
import org.demo.bean.jpa.SafeEntity;
import org.demo.bean.jpa.SafeTransSourceEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class SafeTransServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public SafeTransServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'SafeTransEntity' to 'SafeTrans'
	 * @param safeTransEntity
	 */
	public SafeTrans mapSafeTransEntityToSafeTrans(SafeTransEntity safeTransEntity) {
		if(safeTransEntity == null) {
			return null;
		}

		//--- Generic mapping 
		SafeTrans safeTrans = map(safeTransEntity, SafeTrans.class);

		//--- Link mapping ( link to GlobalPrivateCode )
		if(safeTransEntity.getGlobalPrivateCode() != null) {
			safeTrans.setPrivateCodeId(safeTransEntity.getGlobalPrivateCode().getId());
		}
		//--- Link mapping ( link to SafeExpense )
		if(safeTransEntity.getSafeExpense() != null) {
			safeTrans.setExpenseId(safeTransEntity.getSafeExpense().getId());
		}
		//--- Link mapping ( link to GlobalTransPoint )
		if(safeTransEntity.getGlobalTransPoint() != null) {
			safeTrans.setTransPointId(safeTransEntity.getGlobalTransPoint().getId());
		}
		//--- Link mapping ( link to Safe )
		if(safeTransEntity.getSafe() != null) {
			safeTrans.setSafeId(safeTransEntity.getSafe().getId());
		}
		//--- Link mapping ( link to SafeTransSource )
		if(safeTransEntity.getSafeTransSource() != null) {
			safeTrans.setTransSourceId(safeTransEntity.getSafeTransSource().getId());
		}
		return safeTrans;
	}
	
	/**
	 * Mapping from 'SafeTrans' to 'SafeTransEntity'
	 * @param safeTrans
	 * @param safeTransEntity
	 */
	public void mapSafeTransToSafeTransEntity(SafeTrans safeTrans, SafeTransEntity safeTransEntity) {
		if(safeTrans == null) {
			return;
		}

		//--- Generic mapping 
		map(safeTrans, safeTransEntity);

		//--- Link mapping ( link : safeTrans )
		if( hasLinkToGlobalPrivateCode(safeTrans) ) {
			GlobalPrivateCodeEntity globalPrivateCode1 = new GlobalPrivateCodeEntity();
			globalPrivateCode1.setId( safeTrans.getPrivateCodeId() );
			safeTransEntity.setGlobalPrivateCode( globalPrivateCode1 );
		} else {
			safeTransEntity.setGlobalPrivateCode( null );
		}

		//--- Link mapping ( link : safeTrans )
		if( hasLinkToSafeExpense(safeTrans) ) {
			SafeExpenseEntity safeExpense2 = new SafeExpenseEntity();
			safeExpense2.setId( safeTrans.getExpenseId() );
			safeTransEntity.setSafeExpense( safeExpense2 );
		} else {
			safeTransEntity.setSafeExpense( null );
		}

		//--- Link mapping ( link : safeTrans )
		if( hasLinkToGlobalTransPoint(safeTrans) ) {
			GlobalTransPointEntity globalTransPoint3 = new GlobalTransPointEntity();
			globalTransPoint3.setId( safeTrans.getTransPointId() );
			safeTransEntity.setGlobalTransPoint( globalTransPoint3 );
		} else {
			safeTransEntity.setGlobalTransPoint( null );
		}

		//--- Link mapping ( link : safeTrans )
		if( hasLinkToSafe(safeTrans) ) {
			SafeEntity safe4 = new SafeEntity();
			safe4.setId( safeTrans.getSafeId() );
			safeTransEntity.setSafe( safe4 );
		} else {
			safeTransEntity.setSafe( null );
		}

		//--- Link mapping ( link : safeTrans )
		if( hasLinkToSafeTransSource(safeTrans) ) {
			SafeTransSourceEntity safeTransSource5 = new SafeTransSourceEntity();
			safeTransSource5.setId( safeTrans.getTransSourceId() );
			safeTransEntity.setSafeTransSource( safeTransSource5 );
		} else {
			safeTransEntity.setSafeTransSource( null );
		}

	}
	
	/**
	 * Verify that GlobalPrivateCode id is valid.
	 * @param GlobalPrivateCode GlobalPrivateCode
	 * @return boolean
	 */
	private boolean hasLinkToGlobalPrivateCode(SafeTrans safeTrans) {
		if(safeTrans.getPrivateCodeId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that SafeExpense id is valid.
	 * @param SafeExpense SafeExpense
	 * @return boolean
	 */
	private boolean hasLinkToSafeExpense(SafeTrans safeTrans) {
		if(safeTrans.getExpenseId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that GlobalTransPoint id is valid.
	 * @param GlobalTransPoint GlobalTransPoint
	 * @return boolean
	 */
	private boolean hasLinkToGlobalTransPoint(SafeTrans safeTrans) {
		if(safeTrans.getTransPointId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Safe id is valid.
	 * @param Safe Safe
	 * @return boolean
	 */
	private boolean hasLinkToSafe(SafeTrans safeTrans) {
		if(safeTrans.getSafeId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that SafeTransSource id is valid.
	 * @param SafeTransSource SafeTransSource
	 * @return boolean
	 */
	private boolean hasLinkToSafeTransSource(SafeTrans safeTrans) {
		if(safeTrans.getTransSourceId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}