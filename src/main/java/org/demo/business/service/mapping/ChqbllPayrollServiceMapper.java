/*
 * Created on 24 Þub 2016 ( Time 16:27:50 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.demo.bean.ChqbllPayroll;
import org.demo.bean.jpa.ChqbllPayrollEntity;
import org.demo.bean.jpa.ChqbllPayrollSourceEntity;
import org.demo.bean.jpa.GlobalPrivateCodeEntity;
import org.demo.bean.jpa.ContactEntity;
import org.demo.bean.jpa.GlobalTransPointEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class ChqbllPayrollServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public ChqbllPayrollServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'ChqbllPayrollEntity' to 'ChqbllPayroll'
	 * @param chqbllPayrollEntity
	 */
	public ChqbllPayroll mapChqbllPayrollEntityToChqbllPayroll(ChqbllPayrollEntity chqbllPayrollEntity) {
		if(chqbllPayrollEntity == null) {
			return null;
		}

		//--- Generic mapping 
		ChqbllPayroll chqbllPayroll = map(chqbllPayrollEntity, ChqbllPayroll.class);

		//--- Link mapping ( link to ChqbllPayrollSource )
		if(chqbllPayrollEntity.getChqbllPayrollSource() != null) {
			chqbllPayroll.setTransSourceId(chqbllPayrollEntity.getChqbllPayrollSource().getId());
		}
		//--- Link mapping ( link to GlobalPrivateCode )
		if(chqbllPayrollEntity.getGlobalPrivateCode() != null) {
			chqbllPayroll.setPrivateCodeId(chqbllPayrollEntity.getGlobalPrivateCode().getId());
		}
		//--- Link mapping ( link to Contact )
		if(chqbllPayrollEntity.getContact() != null) {
			chqbllPayroll.setContactId(chqbllPayrollEntity.getContact().getId());
		}
		//--- Link mapping ( link to GlobalTransPoint )
		if(chqbllPayrollEntity.getGlobalTransPoint() != null) {
			chqbllPayroll.setTransPointId(chqbllPayrollEntity.getGlobalTransPoint().getId());
		}
		return chqbllPayroll;
	}
	
	/**
	 * Mapping from 'ChqbllPayroll' to 'ChqbllPayrollEntity'
	 * @param chqbllPayroll
	 * @param chqbllPayrollEntity
	 */
	public void mapChqbllPayrollToChqbllPayrollEntity(ChqbllPayroll chqbllPayroll, ChqbllPayrollEntity chqbllPayrollEntity) {
		if(chqbllPayroll == null) {
			return;
		}

		//--- Generic mapping 
		map(chqbllPayroll, chqbllPayrollEntity);

		//--- Link mapping ( link : chqbllPayroll )
		if( hasLinkToChqbllPayrollSource(chqbllPayroll) ) {
			ChqbllPayrollSourceEntity chqbllPayrollSource1 = new ChqbllPayrollSourceEntity();
			chqbllPayrollSource1.setId( chqbllPayroll.getTransSourceId() );
			chqbllPayrollEntity.setChqbllPayrollSource( chqbllPayrollSource1 );
		} else {
			chqbllPayrollEntity.setChqbllPayrollSource( null );
		}

		//--- Link mapping ( link : chqbllPayroll )
		if( hasLinkToGlobalPrivateCode(chqbllPayroll) ) {
			GlobalPrivateCodeEntity globalPrivateCode2 = new GlobalPrivateCodeEntity();
			globalPrivateCode2.setId( chqbllPayroll.getPrivateCodeId() );
			chqbllPayrollEntity.setGlobalPrivateCode( globalPrivateCode2 );
		} else {
			chqbllPayrollEntity.setGlobalPrivateCode( null );
		}

		//--- Link mapping ( link : chqbllPayroll )
		if( hasLinkToContact(chqbllPayroll) ) {
			ContactEntity contact3 = new ContactEntity();
			contact3.setId( chqbllPayroll.getContactId() );
			chqbllPayrollEntity.setContact( contact3 );
		} else {
			chqbllPayrollEntity.setContact( null );
		}

		//--- Link mapping ( link : chqbllPayroll )
		if( hasLinkToGlobalTransPoint(chqbllPayroll) ) {
			GlobalTransPointEntity globalTransPoint4 = new GlobalTransPointEntity();
			globalTransPoint4.setId( chqbllPayroll.getTransPointId() );
			chqbllPayrollEntity.setGlobalTransPoint( globalTransPoint4 );
		} else {
			chqbllPayrollEntity.setGlobalTransPoint( null );
		}

	}
	
	/**
	 * Verify that ChqbllPayrollSource id is valid.
	 * @param ChqbllPayrollSource ChqbllPayrollSource
	 * @return boolean
	 */
	private boolean hasLinkToChqbllPayrollSource(ChqbllPayroll chqbllPayroll) {
		if(chqbllPayroll.getTransSourceId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that GlobalPrivateCode id is valid.
	 * @param GlobalPrivateCode GlobalPrivateCode
	 * @return boolean
	 */
	private boolean hasLinkToGlobalPrivateCode(ChqbllPayroll chqbllPayroll) {
		if(chqbllPayroll.getPrivateCodeId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Contact id is valid.
	 * @param Contact Contact
	 * @return boolean
	 */
	private boolean hasLinkToContact(ChqbllPayroll chqbllPayroll) {
		if(chqbllPayroll.getContactId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that GlobalTransPoint id is valid.
	 * @param GlobalTransPoint GlobalTransPoint
	 * @return boolean
	 */
	private boolean hasLinkToGlobalTransPoint(ChqbllPayroll chqbllPayroll) {
		if(chqbllPayroll.getTransPointId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}