/*
 * Created on 24 Þub 2016 ( Time 16:27:50 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.demo.bean.ChqbllPayrollDetail;
import org.demo.bean.jpa.ChqbllPayrollDetailEntity;
import org.demo.bean.jpa.GlobalPrivateCodeEntity;
import org.demo.bean.jpa.ChqbllPayrollEntity;
import org.demo.bean.jpa.ContactEntity;
import org.demo.bean.jpa.ChqbllPayrollSourceEntity;
import org.demo.bean.jpa.GlobalTransPointEntity;
import org.demo.bean.jpa.ChqbllTypeEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class ChqbllPayrollDetailServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public ChqbllPayrollDetailServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'ChqbllPayrollDetailEntity' to 'ChqbllPayrollDetail'
	 * @param chqbllPayrollDetailEntity
	 */
	public ChqbllPayrollDetail mapChqbllPayrollDetailEntityToChqbllPayrollDetail(ChqbllPayrollDetailEntity chqbllPayrollDetailEntity) {
		if(chqbllPayrollDetailEntity == null) {
			return null;
		}

		//--- Generic mapping 
		ChqbllPayrollDetail chqbllPayrollDetail = map(chqbllPayrollDetailEntity, ChqbllPayrollDetail.class);

		//--- Link mapping ( link to GlobalPrivateCode )
		if(chqbllPayrollDetailEntity.getGlobalPrivateCode() != null) {
			chqbllPayrollDetail.setPrivateCodeId(chqbllPayrollDetailEntity.getGlobalPrivateCode().getId());
		}
		//--- Link mapping ( link to ChqbllPayroll )
		if(chqbllPayrollDetailEntity.getChqbllPayroll() != null) {
			chqbllPayrollDetail.setTransId(chqbllPayrollDetailEntity.getChqbllPayroll().getId());
		}
		//--- Link mapping ( link to Contact )
		if(chqbllPayrollDetailEntity.getContact() != null) {
			chqbllPayrollDetail.setContactId(chqbllPayrollDetailEntity.getContact().getId());
		}
		//--- Link mapping ( link to ChqbllPayrollSource )
		if(chqbllPayrollDetailEntity.getChqbllPayrollSource() != null) {
			chqbllPayrollDetail.setTransSourceId(chqbllPayrollDetailEntity.getChqbllPayrollSource().getId());
		}
		//--- Link mapping ( link to GlobalTransPoint )
		if(chqbllPayrollDetailEntity.getGlobalTransPoint() != null) {
			chqbllPayrollDetail.setTransPointId(chqbllPayrollDetailEntity.getGlobalTransPoint().getId());
		}
		//--- Link mapping ( link to ChqbllType )
		if(chqbllPayrollDetailEntity.getChqbllType() != null) {
			chqbllPayrollDetail.setCbtypeId(chqbllPayrollDetailEntity.getChqbllType().getId());
		}
		return chqbllPayrollDetail;
	}
	
	/**
	 * Mapping from 'ChqbllPayrollDetail' to 'ChqbllPayrollDetailEntity'
	 * @param chqbllPayrollDetail
	 * @param chqbllPayrollDetailEntity
	 */
	public void mapChqbllPayrollDetailToChqbllPayrollDetailEntity(ChqbllPayrollDetail chqbllPayrollDetail, ChqbllPayrollDetailEntity chqbllPayrollDetailEntity) {
		if(chqbllPayrollDetail == null) {
			return;
		}

		//--- Generic mapping 
		map(chqbllPayrollDetail, chqbllPayrollDetailEntity);

		//--- Link mapping ( link : chqbllPayrollDetail )
		if( hasLinkToGlobalPrivateCode(chqbllPayrollDetail) ) {
			GlobalPrivateCodeEntity globalPrivateCode1 = new GlobalPrivateCodeEntity();
			globalPrivateCode1.setId( chqbllPayrollDetail.getPrivateCodeId() );
			chqbllPayrollDetailEntity.setGlobalPrivateCode( globalPrivateCode1 );
		} else {
			chqbllPayrollDetailEntity.setGlobalPrivateCode( null );
		}

		//--- Link mapping ( link : chqbllPayrollDetail )
		if( hasLinkToChqbllPayroll(chqbllPayrollDetail) ) {
			ChqbllPayrollEntity chqbllPayroll2 = new ChqbllPayrollEntity();
			chqbllPayroll2.setId( chqbllPayrollDetail.getTransId() );
			chqbllPayrollDetailEntity.setChqbllPayroll( chqbllPayroll2 );
		} else {
			chqbllPayrollDetailEntity.setChqbllPayroll( null );
		}

		//--- Link mapping ( link : chqbllPayrollDetail )
		if( hasLinkToContact(chqbllPayrollDetail) ) {
			ContactEntity contact3 = new ContactEntity();
			contact3.setId( chqbllPayrollDetail.getContactId() );
			chqbllPayrollDetailEntity.setContact( contact3 );
		} else {
			chqbllPayrollDetailEntity.setContact( null );
		}

		//--- Link mapping ( link : chqbllPayrollDetail )
		if( hasLinkToChqbllPayrollSource(chqbllPayrollDetail) ) {
			ChqbllPayrollSourceEntity chqbllPayrollSource4 = new ChqbllPayrollSourceEntity();
			chqbllPayrollSource4.setId( chqbllPayrollDetail.getTransSourceId() );
			chqbllPayrollDetailEntity.setChqbllPayrollSource( chqbllPayrollSource4 );
		} else {
			chqbllPayrollDetailEntity.setChqbllPayrollSource( null );
		}

		//--- Link mapping ( link : chqbllPayrollDetail )
		if( hasLinkToGlobalTransPoint(chqbllPayrollDetail) ) {
			GlobalTransPointEntity globalTransPoint5 = new GlobalTransPointEntity();
			globalTransPoint5.setId( chqbllPayrollDetail.getTransPointId() );
			chqbllPayrollDetailEntity.setGlobalTransPoint( globalTransPoint5 );
		} else {
			chqbllPayrollDetailEntity.setGlobalTransPoint( null );
		}

		//--- Link mapping ( link : chqbllPayrollDetail )
		if( hasLinkToChqbllType(chqbllPayrollDetail) ) {
			ChqbllTypeEntity chqbllType6 = new ChqbllTypeEntity();
			chqbllType6.setId( chqbllPayrollDetail.getCbtypeId() );
			chqbllPayrollDetailEntity.setChqbllType( chqbllType6 );
		} else {
			chqbllPayrollDetailEntity.setChqbllType( null );
		}

	}
	
	/**
	 * Verify that GlobalPrivateCode id is valid.
	 * @param GlobalPrivateCode GlobalPrivateCode
	 * @return boolean
	 */
	private boolean hasLinkToGlobalPrivateCode(ChqbllPayrollDetail chqbllPayrollDetail) {
		if(chqbllPayrollDetail.getPrivateCodeId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that ChqbllPayroll id is valid.
	 * @param ChqbllPayroll ChqbllPayroll
	 * @return boolean
	 */
	private boolean hasLinkToChqbllPayroll(ChqbllPayrollDetail chqbllPayrollDetail) {
		if(chqbllPayrollDetail.getTransId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Contact id is valid.
	 * @param Contact Contact
	 * @return boolean
	 */
	private boolean hasLinkToContact(ChqbllPayrollDetail chqbllPayrollDetail) {
		if(chqbllPayrollDetail.getContactId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that ChqbllPayrollSource id is valid.
	 * @param ChqbllPayrollSource ChqbllPayrollSource
	 * @return boolean
	 */
	private boolean hasLinkToChqbllPayrollSource(ChqbllPayrollDetail chqbllPayrollDetail) {
		if(chqbllPayrollDetail.getTransSourceId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that GlobalTransPoint id is valid.
	 * @param GlobalTransPoint GlobalTransPoint
	 * @return boolean
	 */
	private boolean hasLinkToGlobalTransPoint(ChqbllPayrollDetail chqbllPayrollDetail) {
		if(chqbllPayrollDetail.getTransPointId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that ChqbllType id is valid.
	 * @param ChqbllType ChqbllType
	 * @return boolean
	 */
	private boolean hasLinkToChqbllType(ChqbllPayrollDetail chqbllPayrollDetail) {
		if(chqbllPayrollDetail.getCbtypeId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}