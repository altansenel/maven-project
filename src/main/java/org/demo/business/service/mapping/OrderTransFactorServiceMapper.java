/*
 * Created on 24 Þub 2016 ( Time 16:27:51 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.demo.bean.OrderTransFactor;
import org.demo.bean.jpa.OrderTransFactorEntity;
import org.demo.bean.jpa.StockCostFactorEntity;
import org.demo.bean.jpa.OrderTransEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class OrderTransFactorServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public OrderTransFactorServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'OrderTransFactorEntity' to 'OrderTransFactor'
	 * @param orderTransFactorEntity
	 */
	public OrderTransFactor mapOrderTransFactorEntityToOrderTransFactor(OrderTransFactorEntity orderTransFactorEntity) {
		if(orderTransFactorEntity == null) {
			return null;
		}

		//--- Generic mapping 
		OrderTransFactor orderTransFactor = map(orderTransFactorEntity, OrderTransFactor.class);

		//--- Link mapping ( link to StockCostFactor )
		if(orderTransFactorEntity.getStockCostFactor() != null) {
			orderTransFactor.setFactorId(orderTransFactorEntity.getStockCostFactor().getId());
		}
		//--- Link mapping ( link to OrderTrans )
		if(orderTransFactorEntity.getOrderTrans() != null) {
			orderTransFactor.setTransId(orderTransFactorEntity.getOrderTrans().getId());
		}
		return orderTransFactor;
	}
	
	/**
	 * Mapping from 'OrderTransFactor' to 'OrderTransFactorEntity'
	 * @param orderTransFactor
	 * @param orderTransFactorEntity
	 */
	public void mapOrderTransFactorToOrderTransFactorEntity(OrderTransFactor orderTransFactor, OrderTransFactorEntity orderTransFactorEntity) {
		if(orderTransFactor == null) {
			return;
		}

		//--- Generic mapping 
		map(orderTransFactor, orderTransFactorEntity);

		//--- Link mapping ( link : orderTransFactor )
		if( hasLinkToStockCostFactor(orderTransFactor) ) {
			StockCostFactorEntity stockCostFactor1 = new StockCostFactorEntity();
			stockCostFactor1.setId( orderTransFactor.getFactorId() );
			orderTransFactorEntity.setStockCostFactor( stockCostFactor1 );
		} else {
			orderTransFactorEntity.setStockCostFactor( null );
		}

		//--- Link mapping ( link : orderTransFactor )
		if( hasLinkToOrderTrans(orderTransFactor) ) {
			OrderTransEntity orderTrans2 = new OrderTransEntity();
			orderTrans2.setId( orderTransFactor.getTransId() );
			orderTransFactorEntity.setOrderTrans( orderTrans2 );
		} else {
			orderTransFactorEntity.setOrderTrans( null );
		}

	}
	
	/**
	 * Verify that StockCostFactor id is valid.
	 * @param StockCostFactor StockCostFactor
	 * @return boolean
	 */
	private boolean hasLinkToStockCostFactor(OrderTransFactor orderTransFactor) {
		if(orderTransFactor.getFactorId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that OrderTrans id is valid.
	 * @param OrderTrans OrderTrans
	 * @return boolean
	 */
	private boolean hasLinkToOrderTrans(OrderTransFactor orderTransFactor) {
		if(orderTransFactor.getTransId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}