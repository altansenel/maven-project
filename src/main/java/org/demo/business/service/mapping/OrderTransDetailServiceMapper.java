/*
 * Created on 24 Þub 2016 ( Time 16:27:51 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.demo.bean.OrderTransDetail;
import org.demo.bean.jpa.OrderTransDetailEntity;
import org.demo.bean.jpa.StockDepotEntity;
import org.demo.bean.jpa.GlobalPrivateCodeEntity;
import org.demo.bean.jpa.ContactEntity;
import org.demo.bean.jpa.OrderTransStatusEntity;
import org.demo.bean.jpa.SaleSellerEntity;
import org.demo.bean.jpa.OrderTransEntity;
import org.demo.bean.jpa.OrderTransSourceEntity;
import org.demo.bean.jpa.StockEntity;
import org.demo.bean.jpa.GlobalTransPointEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class OrderTransDetailServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public OrderTransDetailServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'OrderTransDetailEntity' to 'OrderTransDetail'
	 * @param orderTransDetailEntity
	 */
	public OrderTransDetail mapOrderTransDetailEntityToOrderTransDetail(OrderTransDetailEntity orderTransDetailEntity) {
		if(orderTransDetailEntity == null) {
			return null;
		}

		//--- Generic mapping 
		OrderTransDetail orderTransDetail = map(orderTransDetailEntity, OrderTransDetail.class);

		//--- Link mapping ( link to StockDepot )
		if(orderTransDetailEntity.getStockDepot() != null) {
			orderTransDetail.setDepotId(orderTransDetailEntity.getStockDepot().getId());
		}
		//--- Link mapping ( link to GlobalPrivateCode )
		if(orderTransDetailEntity.getGlobalPrivateCode() != null) {
			orderTransDetail.setPrivateCodeId(orderTransDetailEntity.getGlobalPrivateCode().getId());
		}
		//--- Link mapping ( link to Contact )
		if(orderTransDetailEntity.getContact() != null) {
			orderTransDetail.setContactId(orderTransDetailEntity.getContact().getId());
		}
		//--- Link mapping ( link to OrderTransStatus )
		if(orderTransDetailEntity.getOrderTransStatus() != null) {
			orderTransDetail.setStatusId(orderTransDetailEntity.getOrderTransStatus().getId());
		}
		//--- Link mapping ( link to SaleSeller )
		if(orderTransDetailEntity.getSaleSeller() != null) {
			orderTransDetail.setSellerId(orderTransDetailEntity.getSaleSeller().getId());
		}
		//--- Link mapping ( link to OrderTrans )
		if(orderTransDetailEntity.getOrderTrans() != null) {
			orderTransDetail.setTransId(orderTransDetailEntity.getOrderTrans().getId());
		}
		//--- Link mapping ( link to OrderTransSource )
		if(orderTransDetailEntity.getOrderTransSource() != null) {
			orderTransDetail.setTransSourceId(orderTransDetailEntity.getOrderTransSource().getId());
		}
		//--- Link mapping ( link to Stock )
		if(orderTransDetailEntity.getStock() != null) {
			orderTransDetail.setStockId(orderTransDetailEntity.getStock().getId());
		}
		//--- Link mapping ( link to GlobalTransPoint )
		if(orderTransDetailEntity.getGlobalTransPoint() != null) {
			orderTransDetail.setTransPointId(orderTransDetailEntity.getGlobalTransPoint().getId());
		}
		return orderTransDetail;
	}
	
	/**
	 * Mapping from 'OrderTransDetail' to 'OrderTransDetailEntity'
	 * @param orderTransDetail
	 * @param orderTransDetailEntity
	 */
	public void mapOrderTransDetailToOrderTransDetailEntity(OrderTransDetail orderTransDetail, OrderTransDetailEntity orderTransDetailEntity) {
		if(orderTransDetail == null) {
			return;
		}

		//--- Generic mapping 
		map(orderTransDetail, orderTransDetailEntity);

		//--- Link mapping ( link : orderTransDetail )
		if( hasLinkToStockDepot(orderTransDetail) ) {
			StockDepotEntity stockDepot1 = new StockDepotEntity();
			stockDepot1.setId( orderTransDetail.getDepotId() );
			orderTransDetailEntity.setStockDepot( stockDepot1 );
		} else {
			orderTransDetailEntity.setStockDepot( null );
		}

		//--- Link mapping ( link : orderTransDetail )
		if( hasLinkToGlobalPrivateCode(orderTransDetail) ) {
			GlobalPrivateCodeEntity globalPrivateCode2 = new GlobalPrivateCodeEntity();
			globalPrivateCode2.setId( orderTransDetail.getPrivateCodeId() );
			orderTransDetailEntity.setGlobalPrivateCode( globalPrivateCode2 );
		} else {
			orderTransDetailEntity.setGlobalPrivateCode( null );
		}

		//--- Link mapping ( link : orderTransDetail )
		if( hasLinkToContact(orderTransDetail) ) {
			ContactEntity contact3 = new ContactEntity();
			contact3.setId( orderTransDetail.getContactId() );
			orderTransDetailEntity.setContact( contact3 );
		} else {
			orderTransDetailEntity.setContact( null );
		}

		//--- Link mapping ( link : orderTransDetail )
		if( hasLinkToOrderTransStatus(orderTransDetail) ) {
			OrderTransStatusEntity orderTransStatus4 = new OrderTransStatusEntity();
			orderTransStatus4.setId( orderTransDetail.getStatusId() );
			orderTransDetailEntity.setOrderTransStatus( orderTransStatus4 );
		} else {
			orderTransDetailEntity.setOrderTransStatus( null );
		}

		//--- Link mapping ( link : orderTransDetail )
		if( hasLinkToSaleSeller(orderTransDetail) ) {
			SaleSellerEntity saleSeller5 = new SaleSellerEntity();
			saleSeller5.setId( orderTransDetail.getSellerId() );
			orderTransDetailEntity.setSaleSeller( saleSeller5 );
		} else {
			orderTransDetailEntity.setSaleSeller( null );
		}

		//--- Link mapping ( link : orderTransDetail )
		if( hasLinkToOrderTrans(orderTransDetail) ) {
			OrderTransEntity orderTrans6 = new OrderTransEntity();
			orderTrans6.setId( orderTransDetail.getTransId() );
			orderTransDetailEntity.setOrderTrans( orderTrans6 );
		} else {
			orderTransDetailEntity.setOrderTrans( null );
		}

		//--- Link mapping ( link : orderTransDetail )
		if( hasLinkToOrderTransSource(orderTransDetail) ) {
			OrderTransSourceEntity orderTransSource7 = new OrderTransSourceEntity();
			orderTransSource7.setId( orderTransDetail.getTransSourceId() );
			orderTransDetailEntity.setOrderTransSource( orderTransSource7 );
		} else {
			orderTransDetailEntity.setOrderTransSource( null );
		}

		//--- Link mapping ( link : orderTransDetail )
		if( hasLinkToStock(orderTransDetail) ) {
			StockEntity stock8 = new StockEntity();
			stock8.setId( orderTransDetail.getStockId() );
			orderTransDetailEntity.setStock( stock8 );
		} else {
			orderTransDetailEntity.setStock( null );
		}

		//--- Link mapping ( link : orderTransDetail )
		if( hasLinkToGlobalTransPoint(orderTransDetail) ) {
			GlobalTransPointEntity globalTransPoint9 = new GlobalTransPointEntity();
			globalTransPoint9.setId( orderTransDetail.getTransPointId() );
			orderTransDetailEntity.setGlobalTransPoint( globalTransPoint9 );
		} else {
			orderTransDetailEntity.setGlobalTransPoint( null );
		}

	}
	
	/**
	 * Verify that StockDepot id is valid.
	 * @param StockDepot StockDepot
	 * @return boolean
	 */
	private boolean hasLinkToStockDepot(OrderTransDetail orderTransDetail) {
		if(orderTransDetail.getDepotId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that GlobalPrivateCode id is valid.
	 * @param GlobalPrivateCode GlobalPrivateCode
	 * @return boolean
	 */
	private boolean hasLinkToGlobalPrivateCode(OrderTransDetail orderTransDetail) {
		if(orderTransDetail.getPrivateCodeId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Contact id is valid.
	 * @param Contact Contact
	 * @return boolean
	 */
	private boolean hasLinkToContact(OrderTransDetail orderTransDetail) {
		if(orderTransDetail.getContactId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that OrderTransStatus id is valid.
	 * @param OrderTransStatus OrderTransStatus
	 * @return boolean
	 */
	private boolean hasLinkToOrderTransStatus(OrderTransDetail orderTransDetail) {
		if(orderTransDetail.getStatusId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that SaleSeller id is valid.
	 * @param SaleSeller SaleSeller
	 * @return boolean
	 */
	private boolean hasLinkToSaleSeller(OrderTransDetail orderTransDetail) {
		if(orderTransDetail.getSellerId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that OrderTrans id is valid.
	 * @param OrderTrans OrderTrans
	 * @return boolean
	 */
	private boolean hasLinkToOrderTrans(OrderTransDetail orderTransDetail) {
		if(orderTransDetail.getTransId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that OrderTransSource id is valid.
	 * @param OrderTransSource OrderTransSource
	 * @return boolean
	 */
	private boolean hasLinkToOrderTransSource(OrderTransDetail orderTransDetail) {
		if(orderTransDetail.getTransSourceId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Stock id is valid.
	 * @param Stock Stock
	 * @return boolean
	 */
	private boolean hasLinkToStock(OrderTransDetail orderTransDetail) {
		if(orderTransDetail.getStockId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that GlobalTransPoint id is valid.
	 * @param GlobalTransPoint GlobalTransPoint
	 * @return boolean
	 */
	private boolean hasLinkToGlobalTransPoint(OrderTransDetail orderTransDetail) {
		if(orderTransDetail.getTransPointId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}