/*
 * Created on 24 Þub 2016 ( Time 15:56:49 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.rest.controller;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.demo.bean.InvoiceTransCurrency;
import org.demo.business.service.InvoiceTransCurrencyService;
import org.demo.web.listitem.InvoiceTransCurrencyListItem;

/**
 * Spring MVC controller for 'InvoiceTransCurrency' management.
 */
@Controller
public class InvoiceTransCurrencyRestController {

	@Resource
	private InvoiceTransCurrencyService invoiceTransCurrencyService;
	
	@RequestMapping( value="/items/invoiceTransCurrency",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<InvoiceTransCurrencyListItem> findAllAsListItems() {
		List<InvoiceTransCurrency> list = invoiceTransCurrencyService.findAll();
		List<InvoiceTransCurrencyListItem> items = new LinkedList<InvoiceTransCurrencyListItem>();
		for ( InvoiceTransCurrency invoiceTransCurrency : list ) {
			items.add(new InvoiceTransCurrencyListItem( invoiceTransCurrency ) );
		}
		return items;
	}
	
	@RequestMapping( value="/invoiceTransCurrency",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<InvoiceTransCurrency> findAll() {
		return invoiceTransCurrencyService.findAll();
	}

	@RequestMapping( value="/invoiceTransCurrency/{id}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public InvoiceTransCurrency findOne(@PathVariable("id") Integer id) {
		return invoiceTransCurrencyService.findById(id);
	}
	
	@RequestMapping( value="/invoiceTransCurrency",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public InvoiceTransCurrency create(@RequestBody InvoiceTransCurrency invoiceTransCurrency) {
		return invoiceTransCurrencyService.create(invoiceTransCurrency);
	}

	@RequestMapping( value="/invoiceTransCurrency/{id}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public InvoiceTransCurrency update(@PathVariable("id") Integer id, @RequestBody InvoiceTransCurrency invoiceTransCurrency) {
		return invoiceTransCurrencyService.update(invoiceTransCurrency);
	}

	@RequestMapping( value="/invoiceTransCurrency/{id}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("id") Integer id) {
		invoiceTransCurrencyService.delete(id);
	}
	
}
