/*
 * Created on 24 Þub 2016 ( Time 16:18:05 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package org.demo.bean.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;
import java.util.List;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "stock_cost_factor"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="stock_cost_factor", catalog="seyhan" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="StockCostFactorEntity.countAll", query="SELECT COUNT(x) FROM StockCostFactorEntity x" )
} )
public class StockCostFactorEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="name", nullable=false, length=30)
    private String     name         ;

    @Column(name="factor_type", nullable=false, length=8)
    private String     factorType   ;

    @Column(name="calc_type", nullable=false, length=7)
    private String     calcType     ;

    @Column(name="effect_type", nullable=false, length=7)
    private String     effectType   ;

    @Column(name="effect")
    private Double     effect       ;

    @Column(name="insert_by", length=20)
    private String     insertBy     ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="insert_at")
    private Date       insertAt     ;

    @Column(name="update_by", length=20)
    private String     updateBy     ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="update_at")
    private Date       updateAt     ;

    @Column(name="is_active")
    private Boolean    isActive     ;

    @Column(name="workspace", nullable=false)
    private Integer    workspace    ;

    @Column(name="version")
    private Integer    version      ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @OneToMany(mappedBy="stockCostFactor", targetEntity=InvoiceTransFactorEntity.class)
    private List<InvoiceTransFactorEntity> listOfInvoiceTransFactor;

    @OneToMany(mappedBy="stockCostFactor", targetEntity=WaybillTransFactorEntity.class)
    private List<WaybillTransFactorEntity> listOfWaybillTransFactor;

    @OneToMany(mappedBy="stockCostFactor", targetEntity=StockTransFactorEntity.class)
    private List<StockTransFactorEntity> listOfStockTransFactor;

    @OneToMany(mappedBy="stockCostFactor", targetEntity=OrderTransFactorEntity.class)
    private List<OrderTransFactorEntity> listOfOrderTransFactor;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public StockCostFactorEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : name ( VARCHAR ) 
    public void setName( String name ) {
        this.name = name;
    }
    public String getName() {
        return this.name;
    }

    //--- DATABASE MAPPING : factor_type ( VARCHAR ) 
    public void setFactorType( String factorType ) {
        this.factorType = factorType;
    }
    public String getFactorType() {
        return this.factorType;
    }

    //--- DATABASE MAPPING : calc_type ( VARCHAR ) 
    public void setCalcType( String calcType ) {
        this.calcType = calcType;
    }
    public String getCalcType() {
        return this.calcType;
    }

    //--- DATABASE MAPPING : effect_type ( VARCHAR ) 
    public void setEffectType( String effectType ) {
        this.effectType = effectType;
    }
    public String getEffectType() {
        return this.effectType;
    }

    //--- DATABASE MAPPING : effect ( DOUBLE ) 
    public void setEffect( Double effect ) {
        this.effect = effect;
    }
    public Double getEffect() {
        return this.effect;
    }

    //--- DATABASE MAPPING : insert_by ( VARCHAR ) 
    public void setInsertBy( String insertBy ) {
        this.insertBy = insertBy;
    }
    public String getInsertBy() {
        return this.insertBy;
    }

    //--- DATABASE MAPPING : insert_at ( DATETIME ) 
    public void setInsertAt( Date insertAt ) {
        this.insertAt = insertAt;
    }
    public Date getInsertAt() {
        return this.insertAt;
    }

    //--- DATABASE MAPPING : update_by ( VARCHAR ) 
    public void setUpdateBy( String updateBy ) {
        this.updateBy = updateBy;
    }
    public String getUpdateBy() {
        return this.updateBy;
    }

    //--- DATABASE MAPPING : update_at ( DATETIME ) 
    public void setUpdateAt( Date updateAt ) {
        this.updateAt = updateAt;
    }
    public Date getUpdateAt() {
        return this.updateAt;
    }

    //--- DATABASE MAPPING : is_active ( BIT ) 
    public void setIsActive( Boolean isActive ) {
        this.isActive = isActive;
    }
    public Boolean getIsActive() {
        return this.isActive;
    }

    //--- DATABASE MAPPING : workspace ( INT ) 
    public void setWorkspace( Integer workspace ) {
        this.workspace = workspace;
    }
    public Integer getWorkspace() {
        return this.workspace;
    }

    //--- DATABASE MAPPING : version ( INT ) 
    public void setVersion( Integer version ) {
        this.version = version;
    }
    public Integer getVersion() {
        return this.version;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfInvoiceTransFactor( List<InvoiceTransFactorEntity> listOfInvoiceTransFactor ) {
        this.listOfInvoiceTransFactor = listOfInvoiceTransFactor;
    }
    public List<InvoiceTransFactorEntity> getListOfInvoiceTransFactor() {
        return this.listOfInvoiceTransFactor;
    }

    public void setListOfWaybillTransFactor( List<WaybillTransFactorEntity> listOfWaybillTransFactor ) {
        this.listOfWaybillTransFactor = listOfWaybillTransFactor;
    }
    public List<WaybillTransFactorEntity> getListOfWaybillTransFactor() {
        return this.listOfWaybillTransFactor;
    }

    public void setListOfStockTransFactor( List<StockTransFactorEntity> listOfStockTransFactor ) {
        this.listOfStockTransFactor = listOfStockTransFactor;
    }
    public List<StockTransFactorEntity> getListOfStockTransFactor() {
        return this.listOfStockTransFactor;
    }

    public void setListOfOrderTransFactor( List<OrderTransFactorEntity> listOfOrderTransFactor ) {
        this.listOfOrderTransFactor = listOfOrderTransFactor;
    }
    public List<OrderTransFactorEntity> getListOfOrderTransFactor() {
        return this.listOfOrderTransFactor;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(name);
        sb.append("|");
        sb.append(factorType);
        sb.append("|");
        sb.append(calcType);
        sb.append("|");
        sb.append(effectType);
        sb.append("|");
        sb.append(effect);
        sb.append("|");
        sb.append(insertBy);
        sb.append("|");
        sb.append(insertAt);
        sb.append("|");
        sb.append(updateBy);
        sb.append("|");
        sb.append(updateAt);
        sb.append("|");
        sb.append(isActive);
        sb.append("|");
        sb.append(workspace);
        sb.append("|");
        sb.append(version);
        return sb.toString(); 
    } 

}
