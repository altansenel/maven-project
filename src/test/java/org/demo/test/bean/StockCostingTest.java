/*
 * JUnit test case for bean StockCosting
 * Created on 24 Þub 2016 ( Date ISO 2016-02-24 - Time 15:13:29 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */

package org.demo.test.bean;


import java.math.BigDecimal;

import org.demo.bean.StockCosting ;

import org.junit.Assert;
import org.junit.Test;

/**
 * JUnit test case for bean StockCosting
 * 
 * @author Telosys Tools Generator
 *
 */
public class StockCostingTest 
{
	protected static final byte    byteValue    = 1 ;
	protected static final short   shortValue   = 1 ;
	protected static final int     intValue     = 1 ;
	protected static final int     integerValue = 1 ;
	protected static final long    longValue    = 1 ;
	
	protected static final float   floatValue    = 1.234f ;
	protected static final double  doubleValue   = 1.234 ;
	
	protected static final BigDecimal bigdecimalValue = new BigDecimal("12.3456");
	
	protected static final String  stringValue  = "A" ;
	
	protected static final java.util.Date     dateValue         = new java.util.Date();
	protected static final java.sql.Date      sqldateValue      = new java.sql.Date(dateValue.getTime());
	protected static final java.sql.Time      sqltimeValue      = new java.sql.Time(dateValue.getTime());
	protected static final java.sql.Timestamp sqltimestampValue = new java.sql.Timestamp(dateValue.getTime());

	protected static final byte[]  bytesArray  = "ABCD".getBytes() ;

	@Test
	public void testSettersAndGetters() {
		
		System.out.println("Checking class StockCosting getters and setters ..." );
		
		StockCosting stockCosting = new StockCosting();
		
		//--- Test setter/getter for field "id"  ( type : Integer )
		// System.out.println(" checking field id ..." );
		stockCosting.setId( integerValue ) ;
		Assert.assertTrue( integerValue == stockCosting.getId() ) ;

		//--- Test setter/getter for field "name"  ( type : String )
		// System.out.println(" checking field name ..." );
		stockCosting.setName( stringValue ) ;
		Assert.assertTrue( stringValue.equals( stockCosting.getName() ) ) ;

		//--- Test setter/getter for field "properties"  ( type : String )
		// System.out.println(" checking field properties ..." );
		stockCosting.setProperties( stringValue ) ;
		Assert.assertTrue( stringValue.equals( stockCosting.getProperties() ) ) ;

		//--- Test setter/getter for field "execDate"  ( type : Date )
		// System.out.println(" checking field execDate ..." );
		stockCosting.setExecDate( dateValue ) ;
		Assert.assertTrue( dateValue.equals( stockCosting.getExecDate() ) );

		//--- Test setter/getter for field "calcDate"  ( type : Date )
		// System.out.println(" checking field calcDate ..." );
		stockCosting.setCalcDate( dateValue ) ;
		Assert.assertTrue( dateValue.equals( stockCosting.getCalcDate() ) );

		//--- Test setter/getter for field "costingType"  ( type : String )
		// System.out.println(" checking field costingType ..." );
		stockCosting.setCostingType( stringValue ) ;
		Assert.assertTrue( stringValue.equals( stockCosting.getCostingType() ) ) ;

		//--- Test setter/getter for field "providerCode"  ( type : String )
		// System.out.println(" checking field providerCode ..." );
		stockCosting.setProviderCode( stringValue ) ;
		Assert.assertTrue( stringValue.equals( stockCosting.getProviderCode() ) ) ;

		//--- Test setter/getter for field "transPointId"  ( type : Integer )
		// System.out.println(" checking field transPointId ..." );
		stockCosting.setTransPointId( integerValue ) ;
		Assert.assertTrue( integerValue == stockCosting.getTransPointId() ) ;

		//--- Test setter/getter for field "categoryId"  ( type : Integer )
		// System.out.println(" checking field categoryId ..." );
		stockCosting.setCategoryId( integerValue ) ;
		Assert.assertTrue( integerValue == stockCosting.getCategoryId() ) ;

		//--- Test setter/getter for field "depotId"  ( type : Integer )
		// System.out.println(" checking field depotId ..." );
		stockCosting.setDepotId( integerValue ) ;
		Assert.assertTrue( integerValue == stockCosting.getDepotId() ) ;

		//--- Test setter/getter for field "stockId"  ( type : Integer )
		// System.out.println(" checking field stockId ..." );
		stockCosting.setStockId( integerValue ) ;
		Assert.assertTrue( integerValue == stockCosting.getStockId() ) ;

		//--- Test setter/getter for field "extraField0Id"  ( type : Integer )
		// System.out.println(" checking field extraField0Id ..." );
		stockCosting.setExtraField0Id( integerValue ) ;
		Assert.assertTrue( integerValue == stockCosting.getExtraField0Id() ) ;

		//--- Test setter/getter for field "extraField1Id"  ( type : Integer )
		// System.out.println(" checking field extraField1Id ..." );
		stockCosting.setExtraField1Id( integerValue ) ;
		Assert.assertTrue( integerValue == stockCosting.getExtraField1Id() ) ;

		//--- Test setter/getter for field "extraField2Id"  ( type : Integer )
		// System.out.println(" checking field extraField2Id ..." );
		stockCosting.setExtraField2Id( integerValue ) ;
		Assert.assertTrue( integerValue == stockCosting.getExtraField2Id() ) ;

		//--- Test setter/getter for field "extraField3Id"  ( type : Integer )
		// System.out.println(" checking field extraField3Id ..." );
		stockCosting.setExtraField3Id( integerValue ) ;
		Assert.assertTrue( integerValue == stockCosting.getExtraField3Id() ) ;

		//--- Test setter/getter for field "extraField4Id"  ( type : Integer )
		// System.out.println(" checking field extraField4Id ..." );
		stockCosting.setExtraField4Id( integerValue ) ;
		Assert.assertTrue( integerValue == stockCosting.getExtraField4Id() ) ;

		//--- Test setter/getter for field "extraField5Id"  ( type : Integer )
		// System.out.println(" checking field extraField5Id ..." );
		stockCosting.setExtraField5Id( integerValue ) ;
		Assert.assertTrue( integerValue == stockCosting.getExtraField5Id() ) ;

		//--- Test setter/getter for field "extraField6Id"  ( type : Integer )
		// System.out.println(" checking field extraField6Id ..." );
		stockCosting.setExtraField6Id( integerValue ) ;
		Assert.assertTrue( integerValue == stockCosting.getExtraField6Id() ) ;

		//--- Test setter/getter for field "extraField7Id"  ( type : Integer )
		// System.out.println(" checking field extraField7Id ..." );
		stockCosting.setExtraField7Id( integerValue ) ;
		Assert.assertTrue( integerValue == stockCosting.getExtraField7Id() ) ;

		//--- Test setter/getter for field "extraField8Id"  ( type : Integer )
		// System.out.println(" checking field extraField8Id ..." );
		stockCosting.setExtraField8Id( integerValue ) ;
		Assert.assertTrue( integerValue == stockCosting.getExtraField8Id() ) ;

		//--- Test setter/getter for field "extraField9Id"  ( type : Integer )
		// System.out.println(" checking field extraField9Id ..." );
		stockCosting.setExtraField9Id( integerValue ) ;
		Assert.assertTrue( integerValue == stockCosting.getExtraField9Id() ) ;

		//--- Test setter/getter for field "insertBy"  ( type : String )
		// System.out.println(" checking field insertBy ..." );
		stockCosting.setInsertBy( stringValue ) ;
		Assert.assertTrue( stringValue.equals( stockCosting.getInsertBy() ) ) ;

		//--- Test setter/getter for field "insertAt"  ( type : Date )
		// System.out.println(" checking field insertAt ..." );
		stockCosting.setInsertAt( dateValue ) ;
		Assert.assertTrue( dateValue.equals( stockCosting.getInsertAt() ) );

		//--- Test setter/getter for field "updateBy"  ( type : String )
		// System.out.println(" checking field updateBy ..." );
		stockCosting.setUpdateBy( stringValue ) ;
		Assert.assertTrue( stringValue.equals( stockCosting.getUpdateBy() ) ) ;

		//--- Test setter/getter for field "updateAt"  ( type : Date )
		// System.out.println(" checking field updateAt ..." );
		stockCosting.setUpdateAt( dateValue ) ;
		Assert.assertTrue( dateValue.equals( stockCosting.getUpdateAt() ) );

		//--- Test setter/getter for field "isActive"  ( type : Boolean )
		// System.out.println(" checking field isActive ..." );
		stockCosting.setIsActive( true ) ;
		Assert.assertTrue( stockCosting.getIsActive() ) ;
		stockCosting.setIsActive( false ) ;
		Assert.assertFalse( stockCosting.getIsActive() ) ;

		//--- Test setter/getter for field "workspace"  ( type : Integer )
		// System.out.println(" checking field workspace ..." );
		stockCosting.setWorkspace( integerValue ) ;
		Assert.assertTrue( integerValue == stockCosting.getWorkspace() ) ;

		//--- Test setter/getter for field "version"  ( type : Integer )
		// System.out.println(" checking field version ..." );
		stockCosting.setVersion( integerValue ) ;
		Assert.assertTrue( integerValue == stockCosting.getVersion() ) ;

		
	}



}
