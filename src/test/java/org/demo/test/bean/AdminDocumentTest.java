/*
 * JUnit test case for bean AdminDocument
 * Created on 24 Þub 2016 ( Date ISO 2016-02-24 - Time 15:13:24 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */

package org.demo.test.bean;


import java.math.BigDecimal;

import org.demo.bean.AdminDocument ;

import org.junit.Assert;
import org.junit.Test;

/**
 * JUnit test case for bean AdminDocument
 * 
 * @author Telosys Tools Generator
 *
 */
public class AdminDocumentTest 
{
	protected static final byte    byteValue    = 1 ;
	protected static final short   shortValue   = 1 ;
	protected static final int     intValue     = 1 ;
	protected static final int     integerValue = 1 ;
	protected static final long    longValue    = 1 ;
	
	protected static final float   floatValue    = 1.234f ;
	protected static final double  doubleValue   = 1.234 ;
	
	protected static final BigDecimal bigdecimalValue = new BigDecimal("12.3456");
	
	protected static final String  stringValue  = "A" ;
	
	protected static final java.util.Date     dateValue         = new java.util.Date();
	protected static final java.sql.Date      sqldateValue      = new java.sql.Date(dateValue.getTime());
	protected static final java.sql.Time      sqltimeValue      = new java.sql.Time(dateValue.getTime());
	protected static final java.sql.Timestamp sqltimestampValue = new java.sql.Timestamp(dateValue.getTime());

	protected static final byte[]  bytesArray  = "ABCD".getBytes() ;

	@Test
	public void testSettersAndGetters() {
		
		System.out.println("Checking class AdminDocument getters and setters ..." );
		
		AdminDocument adminDocument = new AdminDocument();
		
		//--- Test setter/getter for field "id"  ( type : Integer )
		// System.out.println(" checking field id ..." );
		adminDocument.setId( integerValue ) ;
		Assert.assertTrue( integerValue == adminDocument.getId() ) ;

		//--- Test setter/getter for field "module"  ( type : String )
		// System.out.println(" checking field module ..." );
		adminDocument.setModule( stringValue ) ;
		Assert.assertTrue( stringValue.equals( adminDocument.getModule() ) ) ;

		//--- Test setter/getter for field "header"  ( type : String )
		// System.out.println(" checking field header ..." );
		adminDocument.setHeader( stringValue ) ;
		Assert.assertTrue( stringValue.equals( adminDocument.getHeader() ) ) ;

		//--- Test setter/getter for field "right"  ( type : String )
		// System.out.println(" checking field right ..." );
		adminDocument.setRight( stringValue ) ;
		Assert.assertTrue( stringValue.equals( adminDocument.getRight() ) ) ;

		//--- Test setter/getter for field "name"  ( type : String )
		// System.out.println(" checking field name ..." );
		adminDocument.setName( stringValue ) ;
		Assert.assertTrue( stringValue.equals( adminDocument.getName() ) ) ;

		//--- Test setter/getter for field "pageRows"  ( type : Integer )
		// System.out.println(" checking field pageRows ..." );
		adminDocument.setPageRows( integerValue ) ;
		Assert.assertTrue( integerValue == adminDocument.getPageRows() ) ;

		//--- Test setter/getter for field "reportTitleRows"  ( type : Integer )
		// System.out.println(" checking field reportTitleRows ..." );
		adminDocument.setReportTitleRows( integerValue ) ;
		Assert.assertTrue( integerValue == adminDocument.getReportTitleRows() ) ;

		//--- Test setter/getter for field "pageTitleRows"  ( type : Integer )
		// System.out.println(" checking field pageTitleRows ..." );
		adminDocument.setPageTitleRows( integerValue ) ;
		Assert.assertTrue( integerValue == adminDocument.getPageTitleRows() ) ;

		//--- Test setter/getter for field "detailRows"  ( type : Integer )
		// System.out.println(" checking field detailRows ..." );
		adminDocument.setDetailRows( integerValue ) ;
		Assert.assertTrue( integerValue == adminDocument.getDetailRows() ) ;

		//--- Test setter/getter for field "pageFooterRows"  ( type : Integer )
		// System.out.println(" checking field pageFooterRows ..." );
		adminDocument.setPageFooterRows( integerValue ) ;
		Assert.assertTrue( integerValue == adminDocument.getPageFooterRows() ) ;

		//--- Test setter/getter for field "reportFooterRows"  ( type : Integer )
		// System.out.println(" checking field reportFooterRows ..." );
		adminDocument.setReportFooterRows( integerValue ) ;
		Assert.assertTrue( integerValue == adminDocument.getReportFooterRows() ) ;

		//--- Test setter/getter for field "reportTitleLabels"  ( type : Boolean )
		// System.out.println(" checking field reportTitleLabels ..." );
		adminDocument.setReportTitleLabels( true ) ;
		Assert.assertTrue( adminDocument.getReportTitleLabels() ) ;
		adminDocument.setReportTitleLabels( false ) ;
		Assert.assertFalse( adminDocument.getReportTitleLabels() ) ;

		//--- Test setter/getter for field "pageTitleLabels"  ( type : Boolean )
		// System.out.println(" checking field pageTitleLabels ..." );
		adminDocument.setPageTitleLabels( true ) ;
		Assert.assertTrue( adminDocument.getPageTitleLabels() ) ;
		adminDocument.setPageTitleLabels( false ) ;
		Assert.assertFalse( adminDocument.getPageTitleLabels() ) ;

		//--- Test setter/getter for field "detailLabels"  ( type : Boolean )
		// System.out.println(" checking field detailLabels ..." );
		adminDocument.setDetailLabels( true ) ;
		Assert.assertTrue( adminDocument.getDetailLabels() ) ;
		adminDocument.setDetailLabels( false ) ;
		Assert.assertFalse( adminDocument.getDetailLabels() ) ;

		//--- Test setter/getter for field "pageFooterLabels"  ( type : Boolean )
		// System.out.println(" checking field pageFooterLabels ..." );
		adminDocument.setPageFooterLabels( true ) ;
		Assert.assertTrue( adminDocument.getPageFooterLabels() ) ;
		adminDocument.setPageFooterLabels( false ) ;
		Assert.assertFalse( adminDocument.getPageFooterLabels() ) ;

		//--- Test setter/getter for field "reportFooterLabels"  ( type : Boolean )
		// System.out.println(" checking field reportFooterLabels ..." );
		adminDocument.setReportFooterLabels( true ) ;
		Assert.assertTrue( adminDocument.getReportFooterLabels() ) ;
		adminDocument.setReportFooterLabels( false ) ;
		Assert.assertFalse( adminDocument.getReportFooterLabels() ) ;

		//--- Test setter/getter for field "leftMargin"  ( type : Integer )
		// System.out.println(" checking field leftMargin ..." );
		adminDocument.setLeftMargin( integerValue ) ;
		Assert.assertTrue( integerValue == adminDocument.getLeftMargin() ) ;

		//--- Test setter/getter for field "topMargin"  ( type : Integer )
		// System.out.println(" checking field topMargin ..." );
		adminDocument.setTopMargin( integerValue ) ;
		Assert.assertTrue( integerValue == adminDocument.getTopMargin() ) ;

		//--- Test setter/getter for field "bottomMargin"  ( type : Integer )
		// System.out.println(" checking field bottomMargin ..." );
		adminDocument.setBottomMargin( integerValue ) ;
		Assert.assertTrue( integerValue == adminDocument.getBottomMargin() ) ;

		//--- Test setter/getter for field "isSinglePage"  ( type : Boolean )
		// System.out.println(" checking field isSinglePage ..." );
		adminDocument.setIsSinglePage( true ) ;
		Assert.assertTrue( adminDocument.getIsSinglePage() ) ;
		adminDocument.setIsSinglePage( false ) ;
		Assert.assertFalse( adminDocument.getIsSinglePage() ) ;

		//--- Test setter/getter for field "hasPaging"  ( type : Boolean )
		// System.out.println(" checking field hasPaging ..." );
		adminDocument.setHasPaging( true ) ;
		Assert.assertTrue( adminDocument.getHasPaging() ) ;
		adminDocument.setHasPaging( false ) ;
		Assert.assertFalse( adminDocument.getHasPaging() ) ;

		//--- Test setter/getter for field "columnTitleType"  ( type : String )
		// System.out.println(" checking field columnTitleType ..." );
		adminDocument.setColumnTitleType( stringValue ) ;
		Assert.assertTrue( stringValue.equals( adminDocument.getColumnTitleType() ) ) ;

		//--- Test setter/getter for field "carryingOverName"  ( type : String )
		// System.out.println(" checking field carryingOverName ..." );
		adminDocument.setCarryingOverName( stringValue ) ;
		Assert.assertTrue( stringValue.equals( adminDocument.getCarryingOverName() ) ) ;

		//--- Test setter/getter for field "description"  ( type : String )
		// System.out.println(" checking field description ..." );
		adminDocument.setDescription( stringValue ) ;
		Assert.assertTrue( stringValue.equals( adminDocument.getDescription() ) ) ;

		//--- Test setter/getter for field "templateRows"  ( type : String )
		// System.out.println(" checking field templateRows ..." );
		adminDocument.setTemplateRows( stringValue ) ;
		Assert.assertTrue( stringValue.equals( adminDocument.getTemplateRows() ) ) ;

		//--- Test setter/getter for field "isActive"  ( type : Boolean )
		// System.out.println(" checking field isActive ..." );
		adminDocument.setIsActive( true ) ;
		Assert.assertTrue( adminDocument.getIsActive() ) ;
		adminDocument.setIsActive( false ) ;
		Assert.assertFalse( adminDocument.getIsActive() ) ;

		//--- Test setter/getter for field "version"  ( type : Integer )
		// System.out.println(" checking field version ..." );
		adminDocument.setVersion( integerValue ) ;
		Assert.assertTrue( integerValue == adminDocument.getVersion() ) ;

		
	}



}
