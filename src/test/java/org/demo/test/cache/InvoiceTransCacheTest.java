/*
 * JUnit test case for InvoiceTrans caching service
 * Created on 24 Þub 2016 ( Date ISO 2016-02-24 - Time 15:13:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */

package org.demo.test.cache;


import org.demo.bean.InvoiceTrans ;
import org.demo.cache.InvoiceTransCache ;

import org.junit.Assert;
import org.junit.Test;

/**
 * JUnit test case for InvoiceTrans caching service
 * 
 * @author Telosys Tools Generator
 *
 */
public class InvoiceTransCacheTest 
{
	protected static final java.util.Date now = new java.util.Date();

	private final static void populate(InvoiceTrans invoiceTrans) {
		invoiceTrans.setId( 1 ) ;
		invoiceTrans.setReceiptNo( 1 ) ;
		invoiceTrans.setRight( "A" ) ;
		invoiceTrans.setIsCash( false ) ;
		invoiceTrans.setIsCompleted( false ) ;
		invoiceTrans.setTransDate( now ) ;
		invoiceTrans.setRealDate( now ) ;
		invoiceTrans.setDeliveryDate( now ) ;
		invoiceTrans.setTransNo( "A" ) ;
		invoiceTrans.setIsTaxInclude( false ) ;
		invoiceTrans.setRoundingDigits( false ) ;
		invoiceTrans.setTotal( 12.345 ) ;
		invoiceTrans.setDiscountTotal( 12.345 ) ;
		invoiceTrans.setSubtotal( 12.345 ) ;
		invoiceTrans.setRoundingDiscount( 12.345 ) ;
		invoiceTrans.setTotalDiscountRate( 12.345 ) ;
		invoiceTrans.setTaxTotal( 12.345 ) ;
		invoiceTrans.setNetTotal( 12.345 ) ;
		invoiceTrans.setPlusFactorTotal( 12.345 ) ;
		invoiceTrans.setMinusFactorTotal( 12.345 ) ;
		invoiceTrans.setWithholdingRate( 12.345 ) ;
		invoiceTrans.setWithholdingBefore( 12.345 ) ;
		invoiceTrans.setWithholdingAmount( 12.345 ) ;
		invoiceTrans.setWithholdingAfter( 12.345 ) ;
		invoiceTrans.setDescription( "A" ) ;
		invoiceTrans.setTransYear( 1 ) ;
		invoiceTrans.setTransMonth( "A" ) ;
		invoiceTrans.setContactId( 1 ) ;
		invoiceTrans.setContactName( "A" ) ;
		invoiceTrans.setContactTaxOffice( "A" ) ;
		invoiceTrans.setContactTaxNumber( "A" ) ;
		invoiceTrans.setContactAddress1( "A" ) ;
		invoiceTrans.setContactAddress2( "A" ) ;
		invoiceTrans.setConsigner( "A" ) ;
		invoiceTrans.setRecepient( "A" ) ;
		invoiceTrans.setTransType( "A" ) ;
		invoiceTrans.setExcCode( "A" ) ;
		invoiceTrans.setExcRate( 12.345 ) ;
		invoiceTrans.setExcEquivalent( 12.345 ) ;
		invoiceTrans.setInsertBy( "A" ) ;
		invoiceTrans.setInsertAt( now ) ;
		invoiceTrans.setUpdateBy( "A" ) ;
		invoiceTrans.setUpdateAt( now ) ;
		invoiceTrans.setContactTransId( 1 ) ;
		invoiceTrans.setSellerId( 1 ) ;
		invoiceTrans.setTransSourceId( 1 ) ;
		invoiceTrans.setTransPointId( 1 ) ;
		invoiceTrans.setPrivateCodeId( 1 ) ;
		invoiceTrans.setDepotId( 1 ) ;
		invoiceTrans.setRefModule( "A" ) ;
		invoiceTrans.setRefId( 1 ) ;
		invoiceTrans.setStatusId( 1 ) ;
		invoiceTrans.setWorkspace( 1 ) ;
		invoiceTrans.setVersion( 1 ) ;
	}

	@Test
	public void testPutGetRemove() {
		
		System.out.println("Testing class InvoiceTransCache ..." );
		
		InvoiceTrans invoiceTrans = new InvoiceTrans();
		populate(invoiceTrans);
		System.out.println("Entity populated : " + invoiceTrans );
		
		InvoiceTransCache.putInvoiceTrans(invoiceTrans) ;	// Store in cache	
		
		InvoiceTrans invoiceTrans2 = InvoiceTransCache.getInvoiceTrans( invoiceTrans.getId() );
		Assert.assertTrue( invoiceTrans == invoiceTrans2 ) ; // Same instance
		
		InvoiceTransCache.removeInvoiceTrans(  invoiceTrans.getId() ) ; // Remove from cache	
		
		InvoiceTrans invoiceTrans3 = InvoiceTransCache.getInvoiceTrans( invoiceTrans.getId() );
		Assert.assertTrue( null == invoiceTrans3 ) ; // Not in cache
		
	}
}
