/*
 * JUnit test case for StockCosting caching service
 * Created on 24 Þub 2016 ( Date ISO 2016-02-24 - Time 15:13:29 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */

package org.demo.test.cache;


import org.demo.bean.StockCosting ;
import org.demo.cache.StockCostingCache ;

import org.junit.Assert;
import org.junit.Test;

/**
 * JUnit test case for StockCosting caching service
 * 
 * @author Telosys Tools Generator
 *
 */
public class StockCostingCacheTest 
{
	protected static final java.util.Date now = new java.util.Date();

	private final static void populate(StockCosting stockCosting) {
		stockCosting.setId( 1 ) ;
		stockCosting.setName( "A" ) ;
		stockCosting.setProperties( "A" ) ;
		stockCosting.setExecDate( now ) ;
		stockCosting.setCalcDate( now ) ;
		stockCosting.setCostingType( "A" ) ;
		stockCosting.setProviderCode( "A" ) ;
		stockCosting.setTransPointId( 1 ) ;
		stockCosting.setCategoryId( 1 ) ;
		stockCosting.setDepotId( 1 ) ;
		stockCosting.setStockId( 1 ) ;
		stockCosting.setExtraField0Id( 1 ) ;
		stockCosting.setExtraField1Id( 1 ) ;
		stockCosting.setExtraField2Id( 1 ) ;
		stockCosting.setExtraField3Id( 1 ) ;
		stockCosting.setExtraField4Id( 1 ) ;
		stockCosting.setExtraField5Id( 1 ) ;
		stockCosting.setExtraField6Id( 1 ) ;
		stockCosting.setExtraField7Id( 1 ) ;
		stockCosting.setExtraField8Id( 1 ) ;
		stockCosting.setExtraField9Id( 1 ) ;
		stockCosting.setInsertBy( "A" ) ;
		stockCosting.setInsertAt( now ) ;
		stockCosting.setUpdateBy( "A" ) ;
		stockCosting.setUpdateAt( now ) ;
		stockCosting.setIsActive( false ) ;
		stockCosting.setWorkspace( 1 ) ;
		stockCosting.setVersion( 1 ) ;
	}

	@Test
	public void testPutGetRemove() {
		
		System.out.println("Testing class StockCostingCache ..." );
		
		StockCosting stockCosting = new StockCosting();
		populate(stockCosting);
		System.out.println("Entity populated : " + stockCosting );
		
		StockCostingCache.putStockCosting(stockCosting) ;	// Store in cache	
		
		StockCosting stockCosting2 = StockCostingCache.getStockCosting( stockCosting.getId() );
		Assert.assertTrue( stockCosting == stockCosting2 ) ; // Same instance
		
		StockCostingCache.removeStockCosting(  stockCosting.getId() ) ; // Remove from cache	
		
		StockCosting stockCosting3 = StockCostingCache.getStockCosting( stockCosting.getId() );
		Assert.assertTrue( null == stockCosting3 ) ; // Not in cache
		
	}
}
