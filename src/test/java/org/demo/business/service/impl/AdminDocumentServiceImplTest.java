/*
 * Created on 24 Þub 2016 ( Time 16:27:49 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.AdminDocument;
import org.demo.bean.jpa.AdminDocumentEntity;
import java.util.List;
import org.demo.business.service.mapping.AdminDocumentServiceMapper;
import org.demo.data.repository.jpa.AdminDocumentJpaRepository;
import org.demo.test.AdminDocumentFactoryForTest;
import org.demo.test.AdminDocumentEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of AdminDocumentService
 */
@RunWith(MockitoJUnitRunner.class)
public class AdminDocumentServiceImplTest {

	@InjectMocks
	private AdminDocumentServiceImpl adminDocumentService;
	@Mock
	private AdminDocumentJpaRepository adminDocumentJpaRepository;
	@Mock
	private AdminDocumentServiceMapper adminDocumentServiceMapper;
	
	private AdminDocumentFactoryForTest adminDocumentFactoryForTest = new AdminDocumentFactoryForTest();

	private AdminDocumentEntityFactoryForTest adminDocumentEntityFactoryForTest = new AdminDocumentEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		AdminDocumentEntity adminDocumentEntity = adminDocumentJpaRepository.findOne(id);
		
		AdminDocument adminDocument = adminDocumentFactoryForTest.newAdminDocument();
		when(adminDocumentServiceMapper.mapAdminDocumentEntityToAdminDocument(adminDocumentEntity)).thenReturn(adminDocument);

		// When
		AdminDocument adminDocumentFound = adminDocumentService.findById(id);

		// Then
		assertEquals(adminDocument.getId(),adminDocumentFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<AdminDocumentEntity> adminDocumentEntitys = new ArrayList<AdminDocumentEntity>();
		AdminDocumentEntity adminDocumentEntity1 = adminDocumentEntityFactoryForTest.newAdminDocumentEntity();
		adminDocumentEntitys.add(adminDocumentEntity1);
		AdminDocumentEntity adminDocumentEntity2 = adminDocumentEntityFactoryForTest.newAdminDocumentEntity();
		adminDocumentEntitys.add(adminDocumentEntity2);
		when(adminDocumentJpaRepository.findAll()).thenReturn(adminDocumentEntitys);
		
		AdminDocument adminDocument1 = adminDocumentFactoryForTest.newAdminDocument();
		when(adminDocumentServiceMapper.mapAdminDocumentEntityToAdminDocument(adminDocumentEntity1)).thenReturn(adminDocument1);
		AdminDocument adminDocument2 = adminDocumentFactoryForTest.newAdminDocument();
		when(adminDocumentServiceMapper.mapAdminDocumentEntityToAdminDocument(adminDocumentEntity2)).thenReturn(adminDocument2);

		// When
		List<AdminDocument> adminDocumentsFounds = adminDocumentService.findAll();

		// Then
		assertTrue(adminDocument1 == adminDocumentsFounds.get(0));
		assertTrue(adminDocument2 == adminDocumentsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		AdminDocument adminDocument = adminDocumentFactoryForTest.newAdminDocument();

		AdminDocumentEntity adminDocumentEntity = adminDocumentEntityFactoryForTest.newAdminDocumentEntity();
		when(adminDocumentJpaRepository.findOne(adminDocument.getId())).thenReturn(null);
		
		adminDocumentEntity = new AdminDocumentEntity();
		adminDocumentServiceMapper.mapAdminDocumentToAdminDocumentEntity(adminDocument, adminDocumentEntity);
		AdminDocumentEntity adminDocumentEntitySaved = adminDocumentJpaRepository.save(adminDocumentEntity);
		
		AdminDocument adminDocumentSaved = adminDocumentFactoryForTest.newAdminDocument();
		when(adminDocumentServiceMapper.mapAdminDocumentEntityToAdminDocument(adminDocumentEntitySaved)).thenReturn(adminDocumentSaved);

		// When
		AdminDocument adminDocumentResult = adminDocumentService.create(adminDocument);

		// Then
		assertTrue(adminDocumentResult == adminDocumentSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		AdminDocument adminDocument = adminDocumentFactoryForTest.newAdminDocument();

		AdminDocumentEntity adminDocumentEntity = adminDocumentEntityFactoryForTest.newAdminDocumentEntity();
		when(adminDocumentJpaRepository.findOne(adminDocument.getId())).thenReturn(adminDocumentEntity);

		// When
		Exception exception = null;
		try {
			adminDocumentService.create(adminDocument);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		AdminDocument adminDocument = adminDocumentFactoryForTest.newAdminDocument();

		AdminDocumentEntity adminDocumentEntity = adminDocumentEntityFactoryForTest.newAdminDocumentEntity();
		when(adminDocumentJpaRepository.findOne(adminDocument.getId())).thenReturn(adminDocumentEntity);
		
		AdminDocumentEntity adminDocumentEntitySaved = adminDocumentEntityFactoryForTest.newAdminDocumentEntity();
		when(adminDocumentJpaRepository.save(adminDocumentEntity)).thenReturn(adminDocumentEntitySaved);
		
		AdminDocument adminDocumentSaved = adminDocumentFactoryForTest.newAdminDocument();
		when(adminDocumentServiceMapper.mapAdminDocumentEntityToAdminDocument(adminDocumentEntitySaved)).thenReturn(adminDocumentSaved);

		// When
		AdminDocument adminDocumentResult = adminDocumentService.update(adminDocument);

		// Then
		verify(adminDocumentServiceMapper).mapAdminDocumentToAdminDocumentEntity(adminDocument, adminDocumentEntity);
		assertTrue(adminDocumentResult == adminDocumentSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		adminDocumentService.delete(id);

		// Then
		verify(adminDocumentJpaRepository).delete(id);
		
	}

}
