/*
 * Created on 24 Þub 2016 ( Time 16:27:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.StockCostingDetail;
import org.demo.bean.jpa.StockCostingDetailEntity;
import java.util.Date;
import org.demo.business.service.mapping.StockCostingDetailServiceMapper;
import org.demo.data.repository.jpa.StockCostingDetailJpaRepository;
import org.demo.test.StockCostingDetailFactoryForTest;
import org.demo.test.StockCostingDetailEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of StockCostingDetailService
 */
@RunWith(MockitoJUnitRunner.class)
public class StockCostingDetailServiceImplTest {

	@InjectMocks
	private StockCostingDetailServiceImpl stockCostingDetailService;
	@Mock
	private StockCostingDetailJpaRepository stockCostingDetailJpaRepository;
	@Mock
	private StockCostingDetailServiceMapper stockCostingDetailServiceMapper;
	
	private StockCostingDetailFactoryForTest stockCostingDetailFactoryForTest = new StockCostingDetailFactoryForTest();

	private StockCostingDetailEntityFactoryForTest stockCostingDetailEntityFactoryForTest = new StockCostingDetailEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		StockCostingDetailEntity stockCostingDetailEntity = stockCostingDetailJpaRepository.findOne(id);
		
		StockCostingDetail stockCostingDetail = stockCostingDetailFactoryForTest.newStockCostingDetail();
		when(stockCostingDetailServiceMapper.mapStockCostingDetailEntityToStockCostingDetail(stockCostingDetailEntity)).thenReturn(stockCostingDetail);

		// When
		StockCostingDetail stockCostingDetailFound = stockCostingDetailService.findById(id);

		// Then
		assertEquals(stockCostingDetail.getId(),stockCostingDetailFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<StockCostingDetailEntity> stockCostingDetailEntitys = new ArrayList<StockCostingDetailEntity>();
		StockCostingDetailEntity stockCostingDetailEntity1 = stockCostingDetailEntityFactoryForTest.newStockCostingDetailEntity();
		stockCostingDetailEntitys.add(stockCostingDetailEntity1);
		StockCostingDetailEntity stockCostingDetailEntity2 = stockCostingDetailEntityFactoryForTest.newStockCostingDetailEntity();
		stockCostingDetailEntitys.add(stockCostingDetailEntity2);
		when(stockCostingDetailJpaRepository.findAll()).thenReturn(stockCostingDetailEntitys);
		
		StockCostingDetail stockCostingDetail1 = stockCostingDetailFactoryForTest.newStockCostingDetail();
		when(stockCostingDetailServiceMapper.mapStockCostingDetailEntityToStockCostingDetail(stockCostingDetailEntity1)).thenReturn(stockCostingDetail1);
		StockCostingDetail stockCostingDetail2 = stockCostingDetailFactoryForTest.newStockCostingDetail();
		when(stockCostingDetailServiceMapper.mapStockCostingDetailEntityToStockCostingDetail(stockCostingDetailEntity2)).thenReturn(stockCostingDetail2);

		// When
		List<StockCostingDetail> stockCostingDetailsFounds = stockCostingDetailService.findAll();

		// Then
		assertTrue(stockCostingDetail1 == stockCostingDetailsFounds.get(0));
		assertTrue(stockCostingDetail2 == stockCostingDetailsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		StockCostingDetail stockCostingDetail = stockCostingDetailFactoryForTest.newStockCostingDetail();

		StockCostingDetailEntity stockCostingDetailEntity = stockCostingDetailEntityFactoryForTest.newStockCostingDetailEntity();
		when(stockCostingDetailJpaRepository.findOne(stockCostingDetail.getId())).thenReturn(null);
		
		stockCostingDetailEntity = new StockCostingDetailEntity();
		stockCostingDetailServiceMapper.mapStockCostingDetailToStockCostingDetailEntity(stockCostingDetail, stockCostingDetailEntity);
		StockCostingDetailEntity stockCostingDetailEntitySaved = stockCostingDetailJpaRepository.save(stockCostingDetailEntity);
		
		StockCostingDetail stockCostingDetailSaved = stockCostingDetailFactoryForTest.newStockCostingDetail();
		when(stockCostingDetailServiceMapper.mapStockCostingDetailEntityToStockCostingDetail(stockCostingDetailEntitySaved)).thenReturn(stockCostingDetailSaved);

		// When
		StockCostingDetail stockCostingDetailResult = stockCostingDetailService.create(stockCostingDetail);

		// Then
		assertTrue(stockCostingDetailResult == stockCostingDetailSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		StockCostingDetail stockCostingDetail = stockCostingDetailFactoryForTest.newStockCostingDetail();

		StockCostingDetailEntity stockCostingDetailEntity = stockCostingDetailEntityFactoryForTest.newStockCostingDetailEntity();
		when(stockCostingDetailJpaRepository.findOne(stockCostingDetail.getId())).thenReturn(stockCostingDetailEntity);

		// When
		Exception exception = null;
		try {
			stockCostingDetailService.create(stockCostingDetail);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		StockCostingDetail stockCostingDetail = stockCostingDetailFactoryForTest.newStockCostingDetail();

		StockCostingDetailEntity stockCostingDetailEntity = stockCostingDetailEntityFactoryForTest.newStockCostingDetailEntity();
		when(stockCostingDetailJpaRepository.findOne(stockCostingDetail.getId())).thenReturn(stockCostingDetailEntity);
		
		StockCostingDetailEntity stockCostingDetailEntitySaved = stockCostingDetailEntityFactoryForTest.newStockCostingDetailEntity();
		when(stockCostingDetailJpaRepository.save(stockCostingDetailEntity)).thenReturn(stockCostingDetailEntitySaved);
		
		StockCostingDetail stockCostingDetailSaved = stockCostingDetailFactoryForTest.newStockCostingDetail();
		when(stockCostingDetailServiceMapper.mapStockCostingDetailEntityToStockCostingDetail(stockCostingDetailEntitySaved)).thenReturn(stockCostingDetailSaved);

		// When
		StockCostingDetail stockCostingDetailResult = stockCostingDetailService.update(stockCostingDetail);

		// Then
		verify(stockCostingDetailServiceMapper).mapStockCostingDetailToStockCostingDetailEntity(stockCostingDetail, stockCostingDetailEntity);
		assertTrue(stockCostingDetailResult == stockCostingDetailSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		stockCostingDetailService.delete(id);

		// Then
		verify(stockCostingDetailJpaRepository).delete(id);
		
	}

}
