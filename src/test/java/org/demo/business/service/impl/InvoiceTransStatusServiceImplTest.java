/*
 * Created on 24 Þub 2016 ( Time 16:27:51 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.InvoiceTransStatus;
import org.demo.bean.jpa.InvoiceTransStatusEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.InvoiceTransStatusServiceMapper;
import org.demo.data.repository.jpa.InvoiceTransStatusJpaRepository;
import org.demo.test.InvoiceTransStatusFactoryForTest;
import org.demo.test.InvoiceTransStatusEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of InvoiceTransStatusService
 */
@RunWith(MockitoJUnitRunner.class)
public class InvoiceTransStatusServiceImplTest {

	@InjectMocks
	private InvoiceTransStatusServiceImpl invoiceTransStatusService;
	@Mock
	private InvoiceTransStatusJpaRepository invoiceTransStatusJpaRepository;
	@Mock
	private InvoiceTransStatusServiceMapper invoiceTransStatusServiceMapper;
	
	private InvoiceTransStatusFactoryForTest invoiceTransStatusFactoryForTest = new InvoiceTransStatusFactoryForTest();

	private InvoiceTransStatusEntityFactoryForTest invoiceTransStatusEntityFactoryForTest = new InvoiceTransStatusEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		InvoiceTransStatusEntity invoiceTransStatusEntity = invoiceTransStatusJpaRepository.findOne(id);
		
		InvoiceTransStatus invoiceTransStatus = invoiceTransStatusFactoryForTest.newInvoiceTransStatus();
		when(invoiceTransStatusServiceMapper.mapInvoiceTransStatusEntityToInvoiceTransStatus(invoiceTransStatusEntity)).thenReturn(invoiceTransStatus);

		// When
		InvoiceTransStatus invoiceTransStatusFound = invoiceTransStatusService.findById(id);

		// Then
		assertEquals(invoiceTransStatus.getId(),invoiceTransStatusFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<InvoiceTransStatusEntity> invoiceTransStatusEntitys = new ArrayList<InvoiceTransStatusEntity>();
		InvoiceTransStatusEntity invoiceTransStatusEntity1 = invoiceTransStatusEntityFactoryForTest.newInvoiceTransStatusEntity();
		invoiceTransStatusEntitys.add(invoiceTransStatusEntity1);
		InvoiceTransStatusEntity invoiceTransStatusEntity2 = invoiceTransStatusEntityFactoryForTest.newInvoiceTransStatusEntity();
		invoiceTransStatusEntitys.add(invoiceTransStatusEntity2);
		when(invoiceTransStatusJpaRepository.findAll()).thenReturn(invoiceTransStatusEntitys);
		
		InvoiceTransStatus invoiceTransStatus1 = invoiceTransStatusFactoryForTest.newInvoiceTransStatus();
		when(invoiceTransStatusServiceMapper.mapInvoiceTransStatusEntityToInvoiceTransStatus(invoiceTransStatusEntity1)).thenReturn(invoiceTransStatus1);
		InvoiceTransStatus invoiceTransStatus2 = invoiceTransStatusFactoryForTest.newInvoiceTransStatus();
		when(invoiceTransStatusServiceMapper.mapInvoiceTransStatusEntityToInvoiceTransStatus(invoiceTransStatusEntity2)).thenReturn(invoiceTransStatus2);

		// When
		List<InvoiceTransStatus> invoiceTransStatussFounds = invoiceTransStatusService.findAll();

		// Then
		assertTrue(invoiceTransStatus1 == invoiceTransStatussFounds.get(0));
		assertTrue(invoiceTransStatus2 == invoiceTransStatussFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		InvoiceTransStatus invoiceTransStatus = invoiceTransStatusFactoryForTest.newInvoiceTransStatus();

		InvoiceTransStatusEntity invoiceTransStatusEntity = invoiceTransStatusEntityFactoryForTest.newInvoiceTransStatusEntity();
		when(invoiceTransStatusJpaRepository.findOne(invoiceTransStatus.getId())).thenReturn(null);
		
		invoiceTransStatusEntity = new InvoiceTransStatusEntity();
		invoiceTransStatusServiceMapper.mapInvoiceTransStatusToInvoiceTransStatusEntity(invoiceTransStatus, invoiceTransStatusEntity);
		InvoiceTransStatusEntity invoiceTransStatusEntitySaved = invoiceTransStatusJpaRepository.save(invoiceTransStatusEntity);
		
		InvoiceTransStatus invoiceTransStatusSaved = invoiceTransStatusFactoryForTest.newInvoiceTransStatus();
		when(invoiceTransStatusServiceMapper.mapInvoiceTransStatusEntityToInvoiceTransStatus(invoiceTransStatusEntitySaved)).thenReturn(invoiceTransStatusSaved);

		// When
		InvoiceTransStatus invoiceTransStatusResult = invoiceTransStatusService.create(invoiceTransStatus);

		// Then
		assertTrue(invoiceTransStatusResult == invoiceTransStatusSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		InvoiceTransStatus invoiceTransStatus = invoiceTransStatusFactoryForTest.newInvoiceTransStatus();

		InvoiceTransStatusEntity invoiceTransStatusEntity = invoiceTransStatusEntityFactoryForTest.newInvoiceTransStatusEntity();
		when(invoiceTransStatusJpaRepository.findOne(invoiceTransStatus.getId())).thenReturn(invoiceTransStatusEntity);

		// When
		Exception exception = null;
		try {
			invoiceTransStatusService.create(invoiceTransStatus);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		InvoiceTransStatus invoiceTransStatus = invoiceTransStatusFactoryForTest.newInvoiceTransStatus();

		InvoiceTransStatusEntity invoiceTransStatusEntity = invoiceTransStatusEntityFactoryForTest.newInvoiceTransStatusEntity();
		when(invoiceTransStatusJpaRepository.findOne(invoiceTransStatus.getId())).thenReturn(invoiceTransStatusEntity);
		
		InvoiceTransStatusEntity invoiceTransStatusEntitySaved = invoiceTransStatusEntityFactoryForTest.newInvoiceTransStatusEntity();
		when(invoiceTransStatusJpaRepository.save(invoiceTransStatusEntity)).thenReturn(invoiceTransStatusEntitySaved);
		
		InvoiceTransStatus invoiceTransStatusSaved = invoiceTransStatusFactoryForTest.newInvoiceTransStatus();
		when(invoiceTransStatusServiceMapper.mapInvoiceTransStatusEntityToInvoiceTransStatus(invoiceTransStatusEntitySaved)).thenReturn(invoiceTransStatusSaved);

		// When
		InvoiceTransStatus invoiceTransStatusResult = invoiceTransStatusService.update(invoiceTransStatus);

		// Then
		verify(invoiceTransStatusServiceMapper).mapInvoiceTransStatusToInvoiceTransStatusEntity(invoiceTransStatus, invoiceTransStatusEntity);
		assertTrue(invoiceTransStatusResult == invoiceTransStatusSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		invoiceTransStatusService.delete(id);

		// Then
		verify(invoiceTransStatusJpaRepository).delete(id);
		
	}

}
