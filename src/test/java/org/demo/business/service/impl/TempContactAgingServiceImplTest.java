/*
 * Created on 24 Þub 2016 ( Time 16:27:53 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.TempContactAging;
import org.demo.bean.jpa.TempContactAgingEntity;
import java.util.Date;
import org.demo.business.service.mapping.TempContactAgingServiceMapper;
import org.demo.data.repository.jpa.TempContactAgingJpaRepository;
import org.demo.test.TempContactAgingFactoryForTest;
import org.demo.test.TempContactAgingEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of TempContactAgingService
 */
@RunWith(MockitoJUnitRunner.class)
public class TempContactAgingServiceImplTest {

	@InjectMocks
	private TempContactAgingServiceImpl tempContactAgingService;
	@Mock
	private TempContactAgingJpaRepository tempContactAgingJpaRepository;
	@Mock
	private TempContactAgingServiceMapper tempContactAgingServiceMapper;
	
	private TempContactAgingFactoryForTest tempContactAgingFactoryForTest = new TempContactAgingFactoryForTest();

	private TempContactAgingEntityFactoryForTest tempContactAgingEntityFactoryForTest = new TempContactAgingEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		TempContactAgingEntity tempContactAgingEntity = tempContactAgingJpaRepository.findOne(id);
		
		TempContactAging tempContactAging = tempContactAgingFactoryForTest.newTempContactAging();
		when(tempContactAgingServiceMapper.mapTempContactAgingEntityToTempContactAging(tempContactAgingEntity)).thenReturn(tempContactAging);

		// When
		TempContactAging tempContactAgingFound = tempContactAgingService.findById(id);

		// Then
		assertEquals(tempContactAging.getId(),tempContactAgingFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<TempContactAgingEntity> tempContactAgingEntitys = new ArrayList<TempContactAgingEntity>();
		TempContactAgingEntity tempContactAgingEntity1 = tempContactAgingEntityFactoryForTest.newTempContactAgingEntity();
		tempContactAgingEntitys.add(tempContactAgingEntity1);
		TempContactAgingEntity tempContactAgingEntity2 = tempContactAgingEntityFactoryForTest.newTempContactAgingEntity();
		tempContactAgingEntitys.add(tempContactAgingEntity2);
		when(tempContactAgingJpaRepository.findAll()).thenReturn(tempContactAgingEntitys);
		
		TempContactAging tempContactAging1 = tempContactAgingFactoryForTest.newTempContactAging();
		when(tempContactAgingServiceMapper.mapTempContactAgingEntityToTempContactAging(tempContactAgingEntity1)).thenReturn(tempContactAging1);
		TempContactAging tempContactAging2 = tempContactAgingFactoryForTest.newTempContactAging();
		when(tempContactAgingServiceMapper.mapTempContactAgingEntityToTempContactAging(tempContactAgingEntity2)).thenReturn(tempContactAging2);

		// When
		List<TempContactAging> tempContactAgingsFounds = tempContactAgingService.findAll();

		// Then
		assertTrue(tempContactAging1 == tempContactAgingsFounds.get(0));
		assertTrue(tempContactAging2 == tempContactAgingsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		TempContactAging tempContactAging = tempContactAgingFactoryForTest.newTempContactAging();

		TempContactAgingEntity tempContactAgingEntity = tempContactAgingEntityFactoryForTest.newTempContactAgingEntity();
		when(tempContactAgingJpaRepository.findOne(tempContactAging.getId())).thenReturn(null);
		
		tempContactAgingEntity = new TempContactAgingEntity();
		tempContactAgingServiceMapper.mapTempContactAgingToTempContactAgingEntity(tempContactAging, tempContactAgingEntity);
		TempContactAgingEntity tempContactAgingEntitySaved = tempContactAgingJpaRepository.save(tempContactAgingEntity);
		
		TempContactAging tempContactAgingSaved = tempContactAgingFactoryForTest.newTempContactAging();
		when(tempContactAgingServiceMapper.mapTempContactAgingEntityToTempContactAging(tempContactAgingEntitySaved)).thenReturn(tempContactAgingSaved);

		// When
		TempContactAging tempContactAgingResult = tempContactAgingService.create(tempContactAging);

		// Then
		assertTrue(tempContactAgingResult == tempContactAgingSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		TempContactAging tempContactAging = tempContactAgingFactoryForTest.newTempContactAging();

		TempContactAgingEntity tempContactAgingEntity = tempContactAgingEntityFactoryForTest.newTempContactAgingEntity();
		when(tempContactAgingJpaRepository.findOne(tempContactAging.getId())).thenReturn(tempContactAgingEntity);

		// When
		Exception exception = null;
		try {
			tempContactAgingService.create(tempContactAging);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		TempContactAging tempContactAging = tempContactAgingFactoryForTest.newTempContactAging();

		TempContactAgingEntity tempContactAgingEntity = tempContactAgingEntityFactoryForTest.newTempContactAgingEntity();
		when(tempContactAgingJpaRepository.findOne(tempContactAging.getId())).thenReturn(tempContactAgingEntity);
		
		TempContactAgingEntity tempContactAgingEntitySaved = tempContactAgingEntityFactoryForTest.newTempContactAgingEntity();
		when(tempContactAgingJpaRepository.save(tempContactAgingEntity)).thenReturn(tempContactAgingEntitySaved);
		
		TempContactAging tempContactAgingSaved = tempContactAgingFactoryForTest.newTempContactAging();
		when(tempContactAgingServiceMapper.mapTempContactAgingEntityToTempContactAging(tempContactAgingEntitySaved)).thenReturn(tempContactAgingSaved);

		// When
		TempContactAging tempContactAgingResult = tempContactAgingService.update(tempContactAging);

		// Then
		verify(tempContactAgingServiceMapper).mapTempContactAgingToTempContactAgingEntity(tempContactAging, tempContactAgingEntity);
		assertTrue(tempContactAgingResult == tempContactAgingSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		tempContactAgingService.delete(id);

		// Then
		verify(tempContactAgingJpaRepository).delete(id);
		
	}

}
