/*
 * Created on 24 Þub 2016 ( Time 16:27:50 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.ChqbllTransDetail;
import org.demo.bean.jpa.ChqbllTransDetailEntity;
import org.demo.business.service.mapping.ChqbllTransDetailServiceMapper;
import org.demo.data.repository.jpa.ChqbllTransDetailJpaRepository;
import org.demo.test.ChqbllTransDetailFactoryForTest;
import org.demo.test.ChqbllTransDetailEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ChqbllTransDetailService
 */
@RunWith(MockitoJUnitRunner.class)
public class ChqbllTransDetailServiceImplTest {

	@InjectMocks
	private ChqbllTransDetailServiceImpl chqbllTransDetailService;
	@Mock
	private ChqbllTransDetailJpaRepository chqbllTransDetailJpaRepository;
	@Mock
	private ChqbllTransDetailServiceMapper chqbllTransDetailServiceMapper;
	
	private ChqbllTransDetailFactoryForTest chqbllTransDetailFactoryForTest = new ChqbllTransDetailFactoryForTest();

	private ChqbllTransDetailEntityFactoryForTest chqbllTransDetailEntityFactoryForTest = new ChqbllTransDetailEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		ChqbllTransDetailEntity chqbllTransDetailEntity = chqbllTransDetailJpaRepository.findOne(id);
		
		ChqbllTransDetail chqbllTransDetail = chqbllTransDetailFactoryForTest.newChqbllTransDetail();
		when(chqbllTransDetailServiceMapper.mapChqbllTransDetailEntityToChqbllTransDetail(chqbllTransDetailEntity)).thenReturn(chqbllTransDetail);

		// When
		ChqbllTransDetail chqbllTransDetailFound = chqbllTransDetailService.findById(id);

		// Then
		assertEquals(chqbllTransDetail.getId(),chqbllTransDetailFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ChqbllTransDetailEntity> chqbllTransDetailEntitys = new ArrayList<ChqbllTransDetailEntity>();
		ChqbllTransDetailEntity chqbllTransDetailEntity1 = chqbllTransDetailEntityFactoryForTest.newChqbllTransDetailEntity();
		chqbllTransDetailEntitys.add(chqbllTransDetailEntity1);
		ChqbllTransDetailEntity chqbllTransDetailEntity2 = chqbllTransDetailEntityFactoryForTest.newChqbllTransDetailEntity();
		chqbllTransDetailEntitys.add(chqbllTransDetailEntity2);
		when(chqbllTransDetailJpaRepository.findAll()).thenReturn(chqbllTransDetailEntitys);
		
		ChqbllTransDetail chqbllTransDetail1 = chqbllTransDetailFactoryForTest.newChqbllTransDetail();
		when(chqbllTransDetailServiceMapper.mapChqbllTransDetailEntityToChqbllTransDetail(chqbllTransDetailEntity1)).thenReturn(chqbllTransDetail1);
		ChqbllTransDetail chqbllTransDetail2 = chqbllTransDetailFactoryForTest.newChqbllTransDetail();
		when(chqbllTransDetailServiceMapper.mapChqbllTransDetailEntityToChqbllTransDetail(chqbllTransDetailEntity2)).thenReturn(chqbllTransDetail2);

		// When
		List<ChqbllTransDetail> chqbllTransDetailsFounds = chqbllTransDetailService.findAll();

		// Then
		assertTrue(chqbllTransDetail1 == chqbllTransDetailsFounds.get(0));
		assertTrue(chqbllTransDetail2 == chqbllTransDetailsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		ChqbllTransDetail chqbllTransDetail = chqbllTransDetailFactoryForTest.newChqbllTransDetail();

		ChqbllTransDetailEntity chqbllTransDetailEntity = chqbllTransDetailEntityFactoryForTest.newChqbllTransDetailEntity();
		when(chqbllTransDetailJpaRepository.findOne(chqbllTransDetail.getId())).thenReturn(null);
		
		chqbllTransDetailEntity = new ChqbllTransDetailEntity();
		chqbllTransDetailServiceMapper.mapChqbllTransDetailToChqbllTransDetailEntity(chqbllTransDetail, chqbllTransDetailEntity);
		ChqbllTransDetailEntity chqbllTransDetailEntitySaved = chqbllTransDetailJpaRepository.save(chqbllTransDetailEntity);
		
		ChqbllTransDetail chqbllTransDetailSaved = chqbllTransDetailFactoryForTest.newChqbllTransDetail();
		when(chqbllTransDetailServiceMapper.mapChqbllTransDetailEntityToChqbllTransDetail(chqbllTransDetailEntitySaved)).thenReturn(chqbllTransDetailSaved);

		// When
		ChqbllTransDetail chqbllTransDetailResult = chqbllTransDetailService.create(chqbllTransDetail);

		// Then
		assertTrue(chqbllTransDetailResult == chqbllTransDetailSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		ChqbllTransDetail chqbllTransDetail = chqbllTransDetailFactoryForTest.newChqbllTransDetail();

		ChqbllTransDetailEntity chqbllTransDetailEntity = chqbllTransDetailEntityFactoryForTest.newChqbllTransDetailEntity();
		when(chqbllTransDetailJpaRepository.findOne(chqbllTransDetail.getId())).thenReturn(chqbllTransDetailEntity);

		// When
		Exception exception = null;
		try {
			chqbllTransDetailService.create(chqbllTransDetail);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		ChqbllTransDetail chqbllTransDetail = chqbllTransDetailFactoryForTest.newChqbllTransDetail();

		ChqbllTransDetailEntity chqbllTransDetailEntity = chqbllTransDetailEntityFactoryForTest.newChqbllTransDetailEntity();
		when(chqbllTransDetailJpaRepository.findOne(chqbllTransDetail.getId())).thenReturn(chqbllTransDetailEntity);
		
		ChqbllTransDetailEntity chqbllTransDetailEntitySaved = chqbllTransDetailEntityFactoryForTest.newChqbllTransDetailEntity();
		when(chqbllTransDetailJpaRepository.save(chqbllTransDetailEntity)).thenReturn(chqbllTransDetailEntitySaved);
		
		ChqbllTransDetail chqbllTransDetailSaved = chqbllTransDetailFactoryForTest.newChqbllTransDetail();
		when(chqbllTransDetailServiceMapper.mapChqbllTransDetailEntityToChqbllTransDetail(chqbllTransDetailEntitySaved)).thenReturn(chqbllTransDetailSaved);

		// When
		ChqbllTransDetail chqbllTransDetailResult = chqbllTransDetailService.update(chqbllTransDetail);

		// Then
		verify(chqbllTransDetailServiceMapper).mapChqbllTransDetailToChqbllTransDetailEntity(chqbllTransDetail, chqbllTransDetailEntity);
		assertTrue(chqbllTransDetailResult == chqbllTransDetailSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		chqbllTransDetailService.delete(id);

		// Then
		verify(chqbllTransDetailJpaRepository).delete(id);
		
	}

}
