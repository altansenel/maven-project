/*
 * Created on 24 Þub 2016 ( Time 16:27:50 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.GlobalProfile;
import org.demo.bean.jpa.GlobalProfileEntity;
import org.demo.business.service.mapping.GlobalProfileServiceMapper;
import org.demo.data.repository.jpa.GlobalProfileJpaRepository;
import org.demo.test.GlobalProfileFactoryForTest;
import org.demo.test.GlobalProfileEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of GlobalProfileService
 */
@RunWith(MockitoJUnitRunner.class)
public class GlobalProfileServiceImplTest {

	@InjectMocks
	private GlobalProfileServiceImpl globalProfileService;
	@Mock
	private GlobalProfileJpaRepository globalProfileJpaRepository;
	@Mock
	private GlobalProfileServiceMapper globalProfileServiceMapper;
	
	private GlobalProfileFactoryForTest globalProfileFactoryForTest = new GlobalProfileFactoryForTest();

	private GlobalProfileEntityFactoryForTest globalProfileEntityFactoryForTest = new GlobalProfileEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		GlobalProfileEntity globalProfileEntity = globalProfileJpaRepository.findOne(id);
		
		GlobalProfile globalProfile = globalProfileFactoryForTest.newGlobalProfile();
		when(globalProfileServiceMapper.mapGlobalProfileEntityToGlobalProfile(globalProfileEntity)).thenReturn(globalProfile);

		// When
		GlobalProfile globalProfileFound = globalProfileService.findById(id);

		// Then
		assertEquals(globalProfile.getId(),globalProfileFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<GlobalProfileEntity> globalProfileEntitys = new ArrayList<GlobalProfileEntity>();
		GlobalProfileEntity globalProfileEntity1 = globalProfileEntityFactoryForTest.newGlobalProfileEntity();
		globalProfileEntitys.add(globalProfileEntity1);
		GlobalProfileEntity globalProfileEntity2 = globalProfileEntityFactoryForTest.newGlobalProfileEntity();
		globalProfileEntitys.add(globalProfileEntity2);
		when(globalProfileJpaRepository.findAll()).thenReturn(globalProfileEntitys);
		
		GlobalProfile globalProfile1 = globalProfileFactoryForTest.newGlobalProfile();
		when(globalProfileServiceMapper.mapGlobalProfileEntityToGlobalProfile(globalProfileEntity1)).thenReturn(globalProfile1);
		GlobalProfile globalProfile2 = globalProfileFactoryForTest.newGlobalProfile();
		when(globalProfileServiceMapper.mapGlobalProfileEntityToGlobalProfile(globalProfileEntity2)).thenReturn(globalProfile2);

		// When
		List<GlobalProfile> globalProfilesFounds = globalProfileService.findAll();

		// Then
		assertTrue(globalProfile1 == globalProfilesFounds.get(0));
		assertTrue(globalProfile2 == globalProfilesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		GlobalProfile globalProfile = globalProfileFactoryForTest.newGlobalProfile();

		GlobalProfileEntity globalProfileEntity = globalProfileEntityFactoryForTest.newGlobalProfileEntity();
		when(globalProfileJpaRepository.findOne(globalProfile.getId())).thenReturn(null);
		
		globalProfileEntity = new GlobalProfileEntity();
		globalProfileServiceMapper.mapGlobalProfileToGlobalProfileEntity(globalProfile, globalProfileEntity);
		GlobalProfileEntity globalProfileEntitySaved = globalProfileJpaRepository.save(globalProfileEntity);
		
		GlobalProfile globalProfileSaved = globalProfileFactoryForTest.newGlobalProfile();
		when(globalProfileServiceMapper.mapGlobalProfileEntityToGlobalProfile(globalProfileEntitySaved)).thenReturn(globalProfileSaved);

		// When
		GlobalProfile globalProfileResult = globalProfileService.create(globalProfile);

		// Then
		assertTrue(globalProfileResult == globalProfileSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		GlobalProfile globalProfile = globalProfileFactoryForTest.newGlobalProfile();

		GlobalProfileEntity globalProfileEntity = globalProfileEntityFactoryForTest.newGlobalProfileEntity();
		when(globalProfileJpaRepository.findOne(globalProfile.getId())).thenReturn(globalProfileEntity);

		// When
		Exception exception = null;
		try {
			globalProfileService.create(globalProfile);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		GlobalProfile globalProfile = globalProfileFactoryForTest.newGlobalProfile();

		GlobalProfileEntity globalProfileEntity = globalProfileEntityFactoryForTest.newGlobalProfileEntity();
		when(globalProfileJpaRepository.findOne(globalProfile.getId())).thenReturn(globalProfileEntity);
		
		GlobalProfileEntity globalProfileEntitySaved = globalProfileEntityFactoryForTest.newGlobalProfileEntity();
		when(globalProfileJpaRepository.save(globalProfileEntity)).thenReturn(globalProfileEntitySaved);
		
		GlobalProfile globalProfileSaved = globalProfileFactoryForTest.newGlobalProfile();
		when(globalProfileServiceMapper.mapGlobalProfileEntityToGlobalProfile(globalProfileEntitySaved)).thenReturn(globalProfileSaved);

		// When
		GlobalProfile globalProfileResult = globalProfileService.update(globalProfile);

		// Then
		verify(globalProfileServiceMapper).mapGlobalProfileToGlobalProfileEntity(globalProfile, globalProfileEntity);
		assertTrue(globalProfileResult == globalProfileSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		globalProfileService.delete(id);

		// Then
		verify(globalProfileJpaRepository).delete(id);
		
	}

}
