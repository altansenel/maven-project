/*
 * Created on 24 Þub 2016 ( Time 16:27:51 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.InvoiceTransDetail;
import org.demo.bean.jpa.InvoiceTransDetailEntity;
import java.util.Date;
import org.demo.business.service.mapping.InvoiceTransDetailServiceMapper;
import org.demo.data.repository.jpa.InvoiceTransDetailJpaRepository;
import org.demo.test.InvoiceTransDetailFactoryForTest;
import org.demo.test.InvoiceTransDetailEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of InvoiceTransDetailService
 */
@RunWith(MockitoJUnitRunner.class)
public class InvoiceTransDetailServiceImplTest {

	@InjectMocks
	private InvoiceTransDetailServiceImpl invoiceTransDetailService;
	@Mock
	private InvoiceTransDetailJpaRepository invoiceTransDetailJpaRepository;
	@Mock
	private InvoiceTransDetailServiceMapper invoiceTransDetailServiceMapper;
	
	private InvoiceTransDetailFactoryForTest invoiceTransDetailFactoryForTest = new InvoiceTransDetailFactoryForTest();

	private InvoiceTransDetailEntityFactoryForTest invoiceTransDetailEntityFactoryForTest = new InvoiceTransDetailEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		InvoiceTransDetailEntity invoiceTransDetailEntity = invoiceTransDetailJpaRepository.findOne(id);
		
		InvoiceTransDetail invoiceTransDetail = invoiceTransDetailFactoryForTest.newInvoiceTransDetail();
		when(invoiceTransDetailServiceMapper.mapInvoiceTransDetailEntityToInvoiceTransDetail(invoiceTransDetailEntity)).thenReturn(invoiceTransDetail);

		// When
		InvoiceTransDetail invoiceTransDetailFound = invoiceTransDetailService.findById(id);

		// Then
		assertEquals(invoiceTransDetail.getId(),invoiceTransDetailFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<InvoiceTransDetailEntity> invoiceTransDetailEntitys = new ArrayList<InvoiceTransDetailEntity>();
		InvoiceTransDetailEntity invoiceTransDetailEntity1 = invoiceTransDetailEntityFactoryForTest.newInvoiceTransDetailEntity();
		invoiceTransDetailEntitys.add(invoiceTransDetailEntity1);
		InvoiceTransDetailEntity invoiceTransDetailEntity2 = invoiceTransDetailEntityFactoryForTest.newInvoiceTransDetailEntity();
		invoiceTransDetailEntitys.add(invoiceTransDetailEntity2);
		when(invoiceTransDetailJpaRepository.findAll()).thenReturn(invoiceTransDetailEntitys);
		
		InvoiceTransDetail invoiceTransDetail1 = invoiceTransDetailFactoryForTest.newInvoiceTransDetail();
		when(invoiceTransDetailServiceMapper.mapInvoiceTransDetailEntityToInvoiceTransDetail(invoiceTransDetailEntity1)).thenReturn(invoiceTransDetail1);
		InvoiceTransDetail invoiceTransDetail2 = invoiceTransDetailFactoryForTest.newInvoiceTransDetail();
		when(invoiceTransDetailServiceMapper.mapInvoiceTransDetailEntityToInvoiceTransDetail(invoiceTransDetailEntity2)).thenReturn(invoiceTransDetail2);

		// When
		List<InvoiceTransDetail> invoiceTransDetailsFounds = invoiceTransDetailService.findAll();

		// Then
		assertTrue(invoiceTransDetail1 == invoiceTransDetailsFounds.get(0));
		assertTrue(invoiceTransDetail2 == invoiceTransDetailsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		InvoiceTransDetail invoiceTransDetail = invoiceTransDetailFactoryForTest.newInvoiceTransDetail();

		InvoiceTransDetailEntity invoiceTransDetailEntity = invoiceTransDetailEntityFactoryForTest.newInvoiceTransDetailEntity();
		when(invoiceTransDetailJpaRepository.findOne(invoiceTransDetail.getId())).thenReturn(null);
		
		invoiceTransDetailEntity = new InvoiceTransDetailEntity();
		invoiceTransDetailServiceMapper.mapInvoiceTransDetailToInvoiceTransDetailEntity(invoiceTransDetail, invoiceTransDetailEntity);
		InvoiceTransDetailEntity invoiceTransDetailEntitySaved = invoiceTransDetailJpaRepository.save(invoiceTransDetailEntity);
		
		InvoiceTransDetail invoiceTransDetailSaved = invoiceTransDetailFactoryForTest.newInvoiceTransDetail();
		when(invoiceTransDetailServiceMapper.mapInvoiceTransDetailEntityToInvoiceTransDetail(invoiceTransDetailEntitySaved)).thenReturn(invoiceTransDetailSaved);

		// When
		InvoiceTransDetail invoiceTransDetailResult = invoiceTransDetailService.create(invoiceTransDetail);

		// Then
		assertTrue(invoiceTransDetailResult == invoiceTransDetailSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		InvoiceTransDetail invoiceTransDetail = invoiceTransDetailFactoryForTest.newInvoiceTransDetail();

		InvoiceTransDetailEntity invoiceTransDetailEntity = invoiceTransDetailEntityFactoryForTest.newInvoiceTransDetailEntity();
		when(invoiceTransDetailJpaRepository.findOne(invoiceTransDetail.getId())).thenReturn(invoiceTransDetailEntity);

		// When
		Exception exception = null;
		try {
			invoiceTransDetailService.create(invoiceTransDetail);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		InvoiceTransDetail invoiceTransDetail = invoiceTransDetailFactoryForTest.newInvoiceTransDetail();

		InvoiceTransDetailEntity invoiceTransDetailEntity = invoiceTransDetailEntityFactoryForTest.newInvoiceTransDetailEntity();
		when(invoiceTransDetailJpaRepository.findOne(invoiceTransDetail.getId())).thenReturn(invoiceTransDetailEntity);
		
		InvoiceTransDetailEntity invoiceTransDetailEntitySaved = invoiceTransDetailEntityFactoryForTest.newInvoiceTransDetailEntity();
		when(invoiceTransDetailJpaRepository.save(invoiceTransDetailEntity)).thenReturn(invoiceTransDetailEntitySaved);
		
		InvoiceTransDetail invoiceTransDetailSaved = invoiceTransDetailFactoryForTest.newInvoiceTransDetail();
		when(invoiceTransDetailServiceMapper.mapInvoiceTransDetailEntityToInvoiceTransDetail(invoiceTransDetailEntitySaved)).thenReturn(invoiceTransDetailSaved);

		// When
		InvoiceTransDetail invoiceTransDetailResult = invoiceTransDetailService.update(invoiceTransDetail);

		// Then
		verify(invoiceTransDetailServiceMapper).mapInvoiceTransDetailToInvoiceTransDetailEntity(invoiceTransDetail, invoiceTransDetailEntity);
		assertTrue(invoiceTransDetailResult == invoiceTransDetailSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		invoiceTransDetailService.delete(id);

		// Then
		verify(invoiceTransDetailJpaRepository).delete(id);
		
	}

}
