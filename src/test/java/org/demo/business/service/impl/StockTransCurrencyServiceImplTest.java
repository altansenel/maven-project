/*
 * Created on 24 Þub 2016 ( Time 16:27:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.StockTransCurrency;
import org.demo.bean.jpa.StockTransCurrencyEntity;
import org.demo.business.service.mapping.StockTransCurrencyServiceMapper;
import org.demo.data.repository.jpa.StockTransCurrencyJpaRepository;
import org.demo.test.StockTransCurrencyFactoryForTest;
import org.demo.test.StockTransCurrencyEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of StockTransCurrencyService
 */
@RunWith(MockitoJUnitRunner.class)
public class StockTransCurrencyServiceImplTest {

	@InjectMocks
	private StockTransCurrencyServiceImpl stockTransCurrencyService;
	@Mock
	private StockTransCurrencyJpaRepository stockTransCurrencyJpaRepository;
	@Mock
	private StockTransCurrencyServiceMapper stockTransCurrencyServiceMapper;
	
	private StockTransCurrencyFactoryForTest stockTransCurrencyFactoryForTest = new StockTransCurrencyFactoryForTest();

	private StockTransCurrencyEntityFactoryForTest stockTransCurrencyEntityFactoryForTest = new StockTransCurrencyEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		StockTransCurrencyEntity stockTransCurrencyEntity = stockTransCurrencyJpaRepository.findOne(id);
		
		StockTransCurrency stockTransCurrency = stockTransCurrencyFactoryForTest.newStockTransCurrency();
		when(stockTransCurrencyServiceMapper.mapStockTransCurrencyEntityToStockTransCurrency(stockTransCurrencyEntity)).thenReturn(stockTransCurrency);

		// When
		StockTransCurrency stockTransCurrencyFound = stockTransCurrencyService.findById(id);

		// Then
		assertEquals(stockTransCurrency.getId(),stockTransCurrencyFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<StockTransCurrencyEntity> stockTransCurrencyEntitys = new ArrayList<StockTransCurrencyEntity>();
		StockTransCurrencyEntity stockTransCurrencyEntity1 = stockTransCurrencyEntityFactoryForTest.newStockTransCurrencyEntity();
		stockTransCurrencyEntitys.add(stockTransCurrencyEntity1);
		StockTransCurrencyEntity stockTransCurrencyEntity2 = stockTransCurrencyEntityFactoryForTest.newStockTransCurrencyEntity();
		stockTransCurrencyEntitys.add(stockTransCurrencyEntity2);
		when(stockTransCurrencyJpaRepository.findAll()).thenReturn(stockTransCurrencyEntitys);
		
		StockTransCurrency stockTransCurrency1 = stockTransCurrencyFactoryForTest.newStockTransCurrency();
		when(stockTransCurrencyServiceMapper.mapStockTransCurrencyEntityToStockTransCurrency(stockTransCurrencyEntity1)).thenReturn(stockTransCurrency1);
		StockTransCurrency stockTransCurrency2 = stockTransCurrencyFactoryForTest.newStockTransCurrency();
		when(stockTransCurrencyServiceMapper.mapStockTransCurrencyEntityToStockTransCurrency(stockTransCurrencyEntity2)).thenReturn(stockTransCurrency2);

		// When
		List<StockTransCurrency> stockTransCurrencysFounds = stockTransCurrencyService.findAll();

		// Then
		assertTrue(stockTransCurrency1 == stockTransCurrencysFounds.get(0));
		assertTrue(stockTransCurrency2 == stockTransCurrencysFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		StockTransCurrency stockTransCurrency = stockTransCurrencyFactoryForTest.newStockTransCurrency();

		StockTransCurrencyEntity stockTransCurrencyEntity = stockTransCurrencyEntityFactoryForTest.newStockTransCurrencyEntity();
		when(stockTransCurrencyJpaRepository.findOne(stockTransCurrency.getId())).thenReturn(null);
		
		stockTransCurrencyEntity = new StockTransCurrencyEntity();
		stockTransCurrencyServiceMapper.mapStockTransCurrencyToStockTransCurrencyEntity(stockTransCurrency, stockTransCurrencyEntity);
		StockTransCurrencyEntity stockTransCurrencyEntitySaved = stockTransCurrencyJpaRepository.save(stockTransCurrencyEntity);
		
		StockTransCurrency stockTransCurrencySaved = stockTransCurrencyFactoryForTest.newStockTransCurrency();
		when(stockTransCurrencyServiceMapper.mapStockTransCurrencyEntityToStockTransCurrency(stockTransCurrencyEntitySaved)).thenReturn(stockTransCurrencySaved);

		// When
		StockTransCurrency stockTransCurrencyResult = stockTransCurrencyService.create(stockTransCurrency);

		// Then
		assertTrue(stockTransCurrencyResult == stockTransCurrencySaved);
	}

	@Test
	public void createKOExists() {
		// Given
		StockTransCurrency stockTransCurrency = stockTransCurrencyFactoryForTest.newStockTransCurrency();

		StockTransCurrencyEntity stockTransCurrencyEntity = stockTransCurrencyEntityFactoryForTest.newStockTransCurrencyEntity();
		when(stockTransCurrencyJpaRepository.findOne(stockTransCurrency.getId())).thenReturn(stockTransCurrencyEntity);

		// When
		Exception exception = null;
		try {
			stockTransCurrencyService.create(stockTransCurrency);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		StockTransCurrency stockTransCurrency = stockTransCurrencyFactoryForTest.newStockTransCurrency();

		StockTransCurrencyEntity stockTransCurrencyEntity = stockTransCurrencyEntityFactoryForTest.newStockTransCurrencyEntity();
		when(stockTransCurrencyJpaRepository.findOne(stockTransCurrency.getId())).thenReturn(stockTransCurrencyEntity);
		
		StockTransCurrencyEntity stockTransCurrencyEntitySaved = stockTransCurrencyEntityFactoryForTest.newStockTransCurrencyEntity();
		when(stockTransCurrencyJpaRepository.save(stockTransCurrencyEntity)).thenReturn(stockTransCurrencyEntitySaved);
		
		StockTransCurrency stockTransCurrencySaved = stockTransCurrencyFactoryForTest.newStockTransCurrency();
		when(stockTransCurrencyServiceMapper.mapStockTransCurrencyEntityToStockTransCurrency(stockTransCurrencyEntitySaved)).thenReturn(stockTransCurrencySaved);

		// When
		StockTransCurrency stockTransCurrencyResult = stockTransCurrencyService.update(stockTransCurrency);

		// Then
		verify(stockTransCurrencyServiceMapper).mapStockTransCurrencyToStockTransCurrencyEntity(stockTransCurrency, stockTransCurrencyEntity);
		assertTrue(stockTransCurrencyResult == stockTransCurrencySaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		stockTransCurrencyService.delete(id);

		// Then
		verify(stockTransCurrencyJpaRepository).delete(id);
		
	}

}
