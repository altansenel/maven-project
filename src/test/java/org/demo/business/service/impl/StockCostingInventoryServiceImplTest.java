/*
 * Created on 24 Þub 2016 ( Time 16:27:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.StockCostingInventory;
import org.demo.bean.jpa.StockCostingInventoryEntity;
import java.util.Date;
import org.demo.business.service.mapping.StockCostingInventoryServiceMapper;
import org.demo.data.repository.jpa.StockCostingInventoryJpaRepository;
import org.demo.test.StockCostingInventoryFactoryForTest;
import org.demo.test.StockCostingInventoryEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of StockCostingInventoryService
 */
@RunWith(MockitoJUnitRunner.class)
public class StockCostingInventoryServiceImplTest {

	@InjectMocks
	private StockCostingInventoryServiceImpl stockCostingInventoryService;
	@Mock
	private StockCostingInventoryJpaRepository stockCostingInventoryJpaRepository;
	@Mock
	private StockCostingInventoryServiceMapper stockCostingInventoryServiceMapper;
	
	private StockCostingInventoryFactoryForTest stockCostingInventoryFactoryForTest = new StockCostingInventoryFactoryForTest();

	private StockCostingInventoryEntityFactoryForTest stockCostingInventoryEntityFactoryForTest = new StockCostingInventoryEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		StockCostingInventoryEntity stockCostingInventoryEntity = stockCostingInventoryJpaRepository.findOne(id);
		
		StockCostingInventory stockCostingInventory = stockCostingInventoryFactoryForTest.newStockCostingInventory();
		when(stockCostingInventoryServiceMapper.mapStockCostingInventoryEntityToStockCostingInventory(stockCostingInventoryEntity)).thenReturn(stockCostingInventory);

		// When
		StockCostingInventory stockCostingInventoryFound = stockCostingInventoryService.findById(id);

		// Then
		assertEquals(stockCostingInventory.getId(),stockCostingInventoryFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<StockCostingInventoryEntity> stockCostingInventoryEntitys = new ArrayList<StockCostingInventoryEntity>();
		StockCostingInventoryEntity stockCostingInventoryEntity1 = stockCostingInventoryEntityFactoryForTest.newStockCostingInventoryEntity();
		stockCostingInventoryEntitys.add(stockCostingInventoryEntity1);
		StockCostingInventoryEntity stockCostingInventoryEntity2 = stockCostingInventoryEntityFactoryForTest.newStockCostingInventoryEntity();
		stockCostingInventoryEntitys.add(stockCostingInventoryEntity2);
		when(stockCostingInventoryJpaRepository.findAll()).thenReturn(stockCostingInventoryEntitys);
		
		StockCostingInventory stockCostingInventory1 = stockCostingInventoryFactoryForTest.newStockCostingInventory();
		when(stockCostingInventoryServiceMapper.mapStockCostingInventoryEntityToStockCostingInventory(stockCostingInventoryEntity1)).thenReturn(stockCostingInventory1);
		StockCostingInventory stockCostingInventory2 = stockCostingInventoryFactoryForTest.newStockCostingInventory();
		when(stockCostingInventoryServiceMapper.mapStockCostingInventoryEntityToStockCostingInventory(stockCostingInventoryEntity2)).thenReturn(stockCostingInventory2);

		// When
		List<StockCostingInventory> stockCostingInventorysFounds = stockCostingInventoryService.findAll();

		// Then
		assertTrue(stockCostingInventory1 == stockCostingInventorysFounds.get(0));
		assertTrue(stockCostingInventory2 == stockCostingInventorysFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		StockCostingInventory stockCostingInventory = stockCostingInventoryFactoryForTest.newStockCostingInventory();

		StockCostingInventoryEntity stockCostingInventoryEntity = stockCostingInventoryEntityFactoryForTest.newStockCostingInventoryEntity();
		when(stockCostingInventoryJpaRepository.findOne(stockCostingInventory.getId())).thenReturn(null);
		
		stockCostingInventoryEntity = new StockCostingInventoryEntity();
		stockCostingInventoryServiceMapper.mapStockCostingInventoryToStockCostingInventoryEntity(stockCostingInventory, stockCostingInventoryEntity);
		StockCostingInventoryEntity stockCostingInventoryEntitySaved = stockCostingInventoryJpaRepository.save(stockCostingInventoryEntity);
		
		StockCostingInventory stockCostingInventorySaved = stockCostingInventoryFactoryForTest.newStockCostingInventory();
		when(stockCostingInventoryServiceMapper.mapStockCostingInventoryEntityToStockCostingInventory(stockCostingInventoryEntitySaved)).thenReturn(stockCostingInventorySaved);

		// When
		StockCostingInventory stockCostingInventoryResult = stockCostingInventoryService.create(stockCostingInventory);

		// Then
		assertTrue(stockCostingInventoryResult == stockCostingInventorySaved);
	}

	@Test
	public void createKOExists() {
		// Given
		StockCostingInventory stockCostingInventory = stockCostingInventoryFactoryForTest.newStockCostingInventory();

		StockCostingInventoryEntity stockCostingInventoryEntity = stockCostingInventoryEntityFactoryForTest.newStockCostingInventoryEntity();
		when(stockCostingInventoryJpaRepository.findOne(stockCostingInventory.getId())).thenReturn(stockCostingInventoryEntity);

		// When
		Exception exception = null;
		try {
			stockCostingInventoryService.create(stockCostingInventory);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		StockCostingInventory stockCostingInventory = stockCostingInventoryFactoryForTest.newStockCostingInventory();

		StockCostingInventoryEntity stockCostingInventoryEntity = stockCostingInventoryEntityFactoryForTest.newStockCostingInventoryEntity();
		when(stockCostingInventoryJpaRepository.findOne(stockCostingInventory.getId())).thenReturn(stockCostingInventoryEntity);
		
		StockCostingInventoryEntity stockCostingInventoryEntitySaved = stockCostingInventoryEntityFactoryForTest.newStockCostingInventoryEntity();
		when(stockCostingInventoryJpaRepository.save(stockCostingInventoryEntity)).thenReturn(stockCostingInventoryEntitySaved);
		
		StockCostingInventory stockCostingInventorySaved = stockCostingInventoryFactoryForTest.newStockCostingInventory();
		when(stockCostingInventoryServiceMapper.mapStockCostingInventoryEntityToStockCostingInventory(stockCostingInventoryEntitySaved)).thenReturn(stockCostingInventorySaved);

		// When
		StockCostingInventory stockCostingInventoryResult = stockCostingInventoryService.update(stockCostingInventory);

		// Then
		verify(stockCostingInventoryServiceMapper).mapStockCostingInventoryToStockCostingInventoryEntity(stockCostingInventory, stockCostingInventoryEntity);
		assertTrue(stockCostingInventoryResult == stockCostingInventorySaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		stockCostingInventoryService.delete(id);

		// Then
		verify(stockCostingInventoryJpaRepository).delete(id);
		
	}

}
