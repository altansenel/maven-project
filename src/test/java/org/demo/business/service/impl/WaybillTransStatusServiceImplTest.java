/*
 * Created on 24 Þub 2016 ( Time 16:27:53 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.WaybillTransStatus;
import org.demo.bean.jpa.WaybillTransStatusEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.WaybillTransStatusServiceMapper;
import org.demo.data.repository.jpa.WaybillTransStatusJpaRepository;
import org.demo.test.WaybillTransStatusFactoryForTest;
import org.demo.test.WaybillTransStatusEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of WaybillTransStatusService
 */
@RunWith(MockitoJUnitRunner.class)
public class WaybillTransStatusServiceImplTest {

	@InjectMocks
	private WaybillTransStatusServiceImpl waybillTransStatusService;
	@Mock
	private WaybillTransStatusJpaRepository waybillTransStatusJpaRepository;
	@Mock
	private WaybillTransStatusServiceMapper waybillTransStatusServiceMapper;
	
	private WaybillTransStatusFactoryForTest waybillTransStatusFactoryForTest = new WaybillTransStatusFactoryForTest();

	private WaybillTransStatusEntityFactoryForTest waybillTransStatusEntityFactoryForTest = new WaybillTransStatusEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		WaybillTransStatusEntity waybillTransStatusEntity = waybillTransStatusJpaRepository.findOne(id);
		
		WaybillTransStatus waybillTransStatus = waybillTransStatusFactoryForTest.newWaybillTransStatus();
		when(waybillTransStatusServiceMapper.mapWaybillTransStatusEntityToWaybillTransStatus(waybillTransStatusEntity)).thenReturn(waybillTransStatus);

		// When
		WaybillTransStatus waybillTransStatusFound = waybillTransStatusService.findById(id);

		// Then
		assertEquals(waybillTransStatus.getId(),waybillTransStatusFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<WaybillTransStatusEntity> waybillTransStatusEntitys = new ArrayList<WaybillTransStatusEntity>();
		WaybillTransStatusEntity waybillTransStatusEntity1 = waybillTransStatusEntityFactoryForTest.newWaybillTransStatusEntity();
		waybillTransStatusEntitys.add(waybillTransStatusEntity1);
		WaybillTransStatusEntity waybillTransStatusEntity2 = waybillTransStatusEntityFactoryForTest.newWaybillTransStatusEntity();
		waybillTransStatusEntitys.add(waybillTransStatusEntity2);
		when(waybillTransStatusJpaRepository.findAll()).thenReturn(waybillTransStatusEntitys);
		
		WaybillTransStatus waybillTransStatus1 = waybillTransStatusFactoryForTest.newWaybillTransStatus();
		when(waybillTransStatusServiceMapper.mapWaybillTransStatusEntityToWaybillTransStatus(waybillTransStatusEntity1)).thenReturn(waybillTransStatus1);
		WaybillTransStatus waybillTransStatus2 = waybillTransStatusFactoryForTest.newWaybillTransStatus();
		when(waybillTransStatusServiceMapper.mapWaybillTransStatusEntityToWaybillTransStatus(waybillTransStatusEntity2)).thenReturn(waybillTransStatus2);

		// When
		List<WaybillTransStatus> waybillTransStatussFounds = waybillTransStatusService.findAll();

		// Then
		assertTrue(waybillTransStatus1 == waybillTransStatussFounds.get(0));
		assertTrue(waybillTransStatus2 == waybillTransStatussFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		WaybillTransStatus waybillTransStatus = waybillTransStatusFactoryForTest.newWaybillTransStatus();

		WaybillTransStatusEntity waybillTransStatusEntity = waybillTransStatusEntityFactoryForTest.newWaybillTransStatusEntity();
		when(waybillTransStatusJpaRepository.findOne(waybillTransStatus.getId())).thenReturn(null);
		
		waybillTransStatusEntity = new WaybillTransStatusEntity();
		waybillTransStatusServiceMapper.mapWaybillTransStatusToWaybillTransStatusEntity(waybillTransStatus, waybillTransStatusEntity);
		WaybillTransStatusEntity waybillTransStatusEntitySaved = waybillTransStatusJpaRepository.save(waybillTransStatusEntity);
		
		WaybillTransStatus waybillTransStatusSaved = waybillTransStatusFactoryForTest.newWaybillTransStatus();
		when(waybillTransStatusServiceMapper.mapWaybillTransStatusEntityToWaybillTransStatus(waybillTransStatusEntitySaved)).thenReturn(waybillTransStatusSaved);

		// When
		WaybillTransStatus waybillTransStatusResult = waybillTransStatusService.create(waybillTransStatus);

		// Then
		assertTrue(waybillTransStatusResult == waybillTransStatusSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		WaybillTransStatus waybillTransStatus = waybillTransStatusFactoryForTest.newWaybillTransStatus();

		WaybillTransStatusEntity waybillTransStatusEntity = waybillTransStatusEntityFactoryForTest.newWaybillTransStatusEntity();
		when(waybillTransStatusJpaRepository.findOne(waybillTransStatus.getId())).thenReturn(waybillTransStatusEntity);

		// When
		Exception exception = null;
		try {
			waybillTransStatusService.create(waybillTransStatus);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		WaybillTransStatus waybillTransStatus = waybillTransStatusFactoryForTest.newWaybillTransStatus();

		WaybillTransStatusEntity waybillTransStatusEntity = waybillTransStatusEntityFactoryForTest.newWaybillTransStatusEntity();
		when(waybillTransStatusJpaRepository.findOne(waybillTransStatus.getId())).thenReturn(waybillTransStatusEntity);
		
		WaybillTransStatusEntity waybillTransStatusEntitySaved = waybillTransStatusEntityFactoryForTest.newWaybillTransStatusEntity();
		when(waybillTransStatusJpaRepository.save(waybillTransStatusEntity)).thenReturn(waybillTransStatusEntitySaved);
		
		WaybillTransStatus waybillTransStatusSaved = waybillTransStatusFactoryForTest.newWaybillTransStatus();
		when(waybillTransStatusServiceMapper.mapWaybillTransStatusEntityToWaybillTransStatus(waybillTransStatusEntitySaved)).thenReturn(waybillTransStatusSaved);

		// When
		WaybillTransStatus waybillTransStatusResult = waybillTransStatusService.update(waybillTransStatus);

		// Then
		verify(waybillTransStatusServiceMapper).mapWaybillTransStatusToWaybillTransStatusEntity(waybillTransStatus, waybillTransStatusEntity);
		assertTrue(waybillTransStatusResult == waybillTransStatusSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		waybillTransStatusService.delete(id);

		// Then
		verify(waybillTransStatusJpaRepository).delete(id);
		
	}

}
