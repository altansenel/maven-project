/*
 * Created on 24 Þub 2016 ( Time 16:27:49 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.AdminUserGroup;
import org.demo.bean.jpa.AdminUserGroupEntity;
import java.util.List;
import org.demo.business.service.mapping.AdminUserGroupServiceMapper;
import org.demo.data.repository.jpa.AdminUserGroupJpaRepository;
import org.demo.test.AdminUserGroupFactoryForTest;
import org.demo.test.AdminUserGroupEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of AdminUserGroupService
 */
@RunWith(MockitoJUnitRunner.class)
public class AdminUserGroupServiceImplTest {

	@InjectMocks
	private AdminUserGroupServiceImpl adminUserGroupService;
	@Mock
	private AdminUserGroupJpaRepository adminUserGroupJpaRepository;
	@Mock
	private AdminUserGroupServiceMapper adminUserGroupServiceMapper;
	
	private AdminUserGroupFactoryForTest adminUserGroupFactoryForTest = new AdminUserGroupFactoryForTest();

	private AdminUserGroupEntityFactoryForTest adminUserGroupEntityFactoryForTest = new AdminUserGroupEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		AdminUserGroupEntity adminUserGroupEntity = adminUserGroupJpaRepository.findOne(id);
		
		AdminUserGroup adminUserGroup = adminUserGroupFactoryForTest.newAdminUserGroup();
		when(adminUserGroupServiceMapper.mapAdminUserGroupEntityToAdminUserGroup(adminUserGroupEntity)).thenReturn(adminUserGroup);

		// When
		AdminUserGroup adminUserGroupFound = adminUserGroupService.findById(id);

		// Then
		assertEquals(adminUserGroup.getId(),adminUserGroupFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<AdminUserGroupEntity> adminUserGroupEntitys = new ArrayList<AdminUserGroupEntity>();
		AdminUserGroupEntity adminUserGroupEntity1 = adminUserGroupEntityFactoryForTest.newAdminUserGroupEntity();
		adminUserGroupEntitys.add(adminUserGroupEntity1);
		AdminUserGroupEntity adminUserGroupEntity2 = adminUserGroupEntityFactoryForTest.newAdminUserGroupEntity();
		adminUserGroupEntitys.add(adminUserGroupEntity2);
		when(adminUserGroupJpaRepository.findAll()).thenReturn(adminUserGroupEntitys);
		
		AdminUserGroup adminUserGroup1 = adminUserGroupFactoryForTest.newAdminUserGroup();
		when(adminUserGroupServiceMapper.mapAdminUserGroupEntityToAdminUserGroup(adminUserGroupEntity1)).thenReturn(adminUserGroup1);
		AdminUserGroup adminUserGroup2 = adminUserGroupFactoryForTest.newAdminUserGroup();
		when(adminUserGroupServiceMapper.mapAdminUserGroupEntityToAdminUserGroup(adminUserGroupEntity2)).thenReturn(adminUserGroup2);

		// When
		List<AdminUserGroup> adminUserGroupsFounds = adminUserGroupService.findAll();

		// Then
		assertTrue(adminUserGroup1 == adminUserGroupsFounds.get(0));
		assertTrue(adminUserGroup2 == adminUserGroupsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		AdminUserGroup adminUserGroup = adminUserGroupFactoryForTest.newAdminUserGroup();

		AdminUserGroupEntity adminUserGroupEntity = adminUserGroupEntityFactoryForTest.newAdminUserGroupEntity();
		when(adminUserGroupJpaRepository.findOne(adminUserGroup.getId())).thenReturn(null);
		
		adminUserGroupEntity = new AdminUserGroupEntity();
		adminUserGroupServiceMapper.mapAdminUserGroupToAdminUserGroupEntity(adminUserGroup, adminUserGroupEntity);
		AdminUserGroupEntity adminUserGroupEntitySaved = adminUserGroupJpaRepository.save(adminUserGroupEntity);
		
		AdminUserGroup adminUserGroupSaved = adminUserGroupFactoryForTest.newAdminUserGroup();
		when(adminUserGroupServiceMapper.mapAdminUserGroupEntityToAdminUserGroup(adminUserGroupEntitySaved)).thenReturn(adminUserGroupSaved);

		// When
		AdminUserGroup adminUserGroupResult = adminUserGroupService.create(adminUserGroup);

		// Then
		assertTrue(adminUserGroupResult == adminUserGroupSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		AdminUserGroup adminUserGroup = adminUserGroupFactoryForTest.newAdminUserGroup();

		AdminUserGroupEntity adminUserGroupEntity = adminUserGroupEntityFactoryForTest.newAdminUserGroupEntity();
		when(adminUserGroupJpaRepository.findOne(adminUserGroup.getId())).thenReturn(adminUserGroupEntity);

		// When
		Exception exception = null;
		try {
			adminUserGroupService.create(adminUserGroup);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		AdminUserGroup adminUserGroup = adminUserGroupFactoryForTest.newAdminUserGroup();

		AdminUserGroupEntity adminUserGroupEntity = adminUserGroupEntityFactoryForTest.newAdminUserGroupEntity();
		when(adminUserGroupJpaRepository.findOne(adminUserGroup.getId())).thenReturn(adminUserGroupEntity);
		
		AdminUserGroupEntity adminUserGroupEntitySaved = adminUserGroupEntityFactoryForTest.newAdminUserGroupEntity();
		when(adminUserGroupJpaRepository.save(adminUserGroupEntity)).thenReturn(adminUserGroupEntitySaved);
		
		AdminUserGroup adminUserGroupSaved = adminUserGroupFactoryForTest.newAdminUserGroup();
		when(adminUserGroupServiceMapper.mapAdminUserGroupEntityToAdminUserGroup(adminUserGroupEntitySaved)).thenReturn(adminUserGroupSaved);

		// When
		AdminUserGroup adminUserGroupResult = adminUserGroupService.update(adminUserGroup);

		// Then
		verify(adminUserGroupServiceMapper).mapAdminUserGroupToAdminUserGroupEntity(adminUserGroup, adminUserGroupEntity);
		assertTrue(adminUserGroupResult == adminUserGroupSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		adminUserGroupService.delete(id);

		// Then
		verify(adminUserGroupJpaRepository).delete(id);
		
	}

}
