/*
 * Created on 24 Þub 2016 ( Time 16:27:51 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.Safe;
import org.demo.bean.jpa.SafeEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.SafeServiceMapper;
import org.demo.data.repository.jpa.SafeJpaRepository;
import org.demo.test.SafeFactoryForTest;
import org.demo.test.SafeEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of SafeService
 */
@RunWith(MockitoJUnitRunner.class)
public class SafeServiceImplTest {

	@InjectMocks
	private SafeServiceImpl safeService;
	@Mock
	private SafeJpaRepository safeJpaRepository;
	@Mock
	private SafeServiceMapper safeServiceMapper;
	
	private SafeFactoryForTest safeFactoryForTest = new SafeFactoryForTest();

	private SafeEntityFactoryForTest safeEntityFactoryForTest = new SafeEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		SafeEntity safeEntity = safeJpaRepository.findOne(id);
		
		Safe safe = safeFactoryForTest.newSafe();
		when(safeServiceMapper.mapSafeEntityToSafe(safeEntity)).thenReturn(safe);

		// When
		Safe safeFound = safeService.findById(id);

		// Then
		assertEquals(safe.getId(),safeFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<SafeEntity> safeEntitys = new ArrayList<SafeEntity>();
		SafeEntity safeEntity1 = safeEntityFactoryForTest.newSafeEntity();
		safeEntitys.add(safeEntity1);
		SafeEntity safeEntity2 = safeEntityFactoryForTest.newSafeEntity();
		safeEntitys.add(safeEntity2);
		when(safeJpaRepository.findAll()).thenReturn(safeEntitys);
		
		Safe safe1 = safeFactoryForTest.newSafe();
		when(safeServiceMapper.mapSafeEntityToSafe(safeEntity1)).thenReturn(safe1);
		Safe safe2 = safeFactoryForTest.newSafe();
		when(safeServiceMapper.mapSafeEntityToSafe(safeEntity2)).thenReturn(safe2);

		// When
		List<Safe> safesFounds = safeService.findAll();

		// Then
		assertTrue(safe1 == safesFounds.get(0));
		assertTrue(safe2 == safesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Safe safe = safeFactoryForTest.newSafe();

		SafeEntity safeEntity = safeEntityFactoryForTest.newSafeEntity();
		when(safeJpaRepository.findOne(safe.getId())).thenReturn(null);
		
		safeEntity = new SafeEntity();
		safeServiceMapper.mapSafeToSafeEntity(safe, safeEntity);
		SafeEntity safeEntitySaved = safeJpaRepository.save(safeEntity);
		
		Safe safeSaved = safeFactoryForTest.newSafe();
		when(safeServiceMapper.mapSafeEntityToSafe(safeEntitySaved)).thenReturn(safeSaved);

		// When
		Safe safeResult = safeService.create(safe);

		// Then
		assertTrue(safeResult == safeSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Safe safe = safeFactoryForTest.newSafe();

		SafeEntity safeEntity = safeEntityFactoryForTest.newSafeEntity();
		when(safeJpaRepository.findOne(safe.getId())).thenReturn(safeEntity);

		// When
		Exception exception = null;
		try {
			safeService.create(safe);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Safe safe = safeFactoryForTest.newSafe();

		SafeEntity safeEntity = safeEntityFactoryForTest.newSafeEntity();
		when(safeJpaRepository.findOne(safe.getId())).thenReturn(safeEntity);
		
		SafeEntity safeEntitySaved = safeEntityFactoryForTest.newSafeEntity();
		when(safeJpaRepository.save(safeEntity)).thenReturn(safeEntitySaved);
		
		Safe safeSaved = safeFactoryForTest.newSafe();
		when(safeServiceMapper.mapSafeEntityToSafe(safeEntitySaved)).thenReturn(safeSaved);

		// When
		Safe safeResult = safeService.update(safe);

		// Then
		verify(safeServiceMapper).mapSafeToSafeEntity(safe, safeEntity);
		assertTrue(safeResult == safeSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		safeService.delete(id);

		// Then
		verify(safeJpaRepository).delete(id);
		
	}

}
