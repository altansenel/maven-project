/*
 * Created on 24 Þub 2016 ( Time 16:27:51 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.InvoiceTransRelation;
import org.demo.bean.jpa.InvoiceTransRelationEntity;
import org.demo.business.service.mapping.InvoiceTransRelationServiceMapper;
import org.demo.data.repository.jpa.InvoiceTransRelationJpaRepository;
import org.demo.test.InvoiceTransRelationFactoryForTest;
import org.demo.test.InvoiceTransRelationEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of InvoiceTransRelationService
 */
@RunWith(MockitoJUnitRunner.class)
public class InvoiceTransRelationServiceImplTest {

	@InjectMocks
	private InvoiceTransRelationServiceImpl invoiceTransRelationService;
	@Mock
	private InvoiceTransRelationJpaRepository invoiceTransRelationJpaRepository;
	@Mock
	private InvoiceTransRelationServiceMapper invoiceTransRelationServiceMapper;
	
	private InvoiceTransRelationFactoryForTest invoiceTransRelationFactoryForTest = new InvoiceTransRelationFactoryForTest();

	private InvoiceTransRelationEntityFactoryForTest invoiceTransRelationEntityFactoryForTest = new InvoiceTransRelationEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		InvoiceTransRelationEntity invoiceTransRelationEntity = invoiceTransRelationJpaRepository.findOne(id);
		
		InvoiceTransRelation invoiceTransRelation = invoiceTransRelationFactoryForTest.newInvoiceTransRelation();
		when(invoiceTransRelationServiceMapper.mapInvoiceTransRelationEntityToInvoiceTransRelation(invoiceTransRelationEntity)).thenReturn(invoiceTransRelation);

		// When
		InvoiceTransRelation invoiceTransRelationFound = invoiceTransRelationService.findById(id);

		// Then
		assertEquals(invoiceTransRelation.getId(),invoiceTransRelationFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<InvoiceTransRelationEntity> invoiceTransRelationEntitys = new ArrayList<InvoiceTransRelationEntity>();
		InvoiceTransRelationEntity invoiceTransRelationEntity1 = invoiceTransRelationEntityFactoryForTest.newInvoiceTransRelationEntity();
		invoiceTransRelationEntitys.add(invoiceTransRelationEntity1);
		InvoiceTransRelationEntity invoiceTransRelationEntity2 = invoiceTransRelationEntityFactoryForTest.newInvoiceTransRelationEntity();
		invoiceTransRelationEntitys.add(invoiceTransRelationEntity2);
		when(invoiceTransRelationJpaRepository.findAll()).thenReturn(invoiceTransRelationEntitys);
		
		InvoiceTransRelation invoiceTransRelation1 = invoiceTransRelationFactoryForTest.newInvoiceTransRelation();
		when(invoiceTransRelationServiceMapper.mapInvoiceTransRelationEntityToInvoiceTransRelation(invoiceTransRelationEntity1)).thenReturn(invoiceTransRelation1);
		InvoiceTransRelation invoiceTransRelation2 = invoiceTransRelationFactoryForTest.newInvoiceTransRelation();
		when(invoiceTransRelationServiceMapper.mapInvoiceTransRelationEntityToInvoiceTransRelation(invoiceTransRelationEntity2)).thenReturn(invoiceTransRelation2);

		// When
		List<InvoiceTransRelation> invoiceTransRelationsFounds = invoiceTransRelationService.findAll();

		// Then
		assertTrue(invoiceTransRelation1 == invoiceTransRelationsFounds.get(0));
		assertTrue(invoiceTransRelation2 == invoiceTransRelationsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		InvoiceTransRelation invoiceTransRelation = invoiceTransRelationFactoryForTest.newInvoiceTransRelation();

		InvoiceTransRelationEntity invoiceTransRelationEntity = invoiceTransRelationEntityFactoryForTest.newInvoiceTransRelationEntity();
		when(invoiceTransRelationJpaRepository.findOne(invoiceTransRelation.getId())).thenReturn(null);
		
		invoiceTransRelationEntity = new InvoiceTransRelationEntity();
		invoiceTransRelationServiceMapper.mapInvoiceTransRelationToInvoiceTransRelationEntity(invoiceTransRelation, invoiceTransRelationEntity);
		InvoiceTransRelationEntity invoiceTransRelationEntitySaved = invoiceTransRelationJpaRepository.save(invoiceTransRelationEntity);
		
		InvoiceTransRelation invoiceTransRelationSaved = invoiceTransRelationFactoryForTest.newInvoiceTransRelation();
		when(invoiceTransRelationServiceMapper.mapInvoiceTransRelationEntityToInvoiceTransRelation(invoiceTransRelationEntitySaved)).thenReturn(invoiceTransRelationSaved);

		// When
		InvoiceTransRelation invoiceTransRelationResult = invoiceTransRelationService.create(invoiceTransRelation);

		// Then
		assertTrue(invoiceTransRelationResult == invoiceTransRelationSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		InvoiceTransRelation invoiceTransRelation = invoiceTransRelationFactoryForTest.newInvoiceTransRelation();

		InvoiceTransRelationEntity invoiceTransRelationEntity = invoiceTransRelationEntityFactoryForTest.newInvoiceTransRelationEntity();
		when(invoiceTransRelationJpaRepository.findOne(invoiceTransRelation.getId())).thenReturn(invoiceTransRelationEntity);

		// When
		Exception exception = null;
		try {
			invoiceTransRelationService.create(invoiceTransRelation);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		InvoiceTransRelation invoiceTransRelation = invoiceTransRelationFactoryForTest.newInvoiceTransRelation();

		InvoiceTransRelationEntity invoiceTransRelationEntity = invoiceTransRelationEntityFactoryForTest.newInvoiceTransRelationEntity();
		when(invoiceTransRelationJpaRepository.findOne(invoiceTransRelation.getId())).thenReturn(invoiceTransRelationEntity);
		
		InvoiceTransRelationEntity invoiceTransRelationEntitySaved = invoiceTransRelationEntityFactoryForTest.newInvoiceTransRelationEntity();
		when(invoiceTransRelationJpaRepository.save(invoiceTransRelationEntity)).thenReturn(invoiceTransRelationEntitySaved);
		
		InvoiceTransRelation invoiceTransRelationSaved = invoiceTransRelationFactoryForTest.newInvoiceTransRelation();
		when(invoiceTransRelationServiceMapper.mapInvoiceTransRelationEntityToInvoiceTransRelation(invoiceTransRelationEntitySaved)).thenReturn(invoiceTransRelationSaved);

		// When
		InvoiceTransRelation invoiceTransRelationResult = invoiceTransRelationService.update(invoiceTransRelation);

		// Then
		verify(invoiceTransRelationServiceMapper).mapInvoiceTransRelationToInvoiceTransRelationEntity(invoiceTransRelation, invoiceTransRelationEntity);
		assertTrue(invoiceTransRelationResult == invoiceTransRelationSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		invoiceTransRelationService.delete(id);

		// Then
		verify(invoiceTransRelationJpaRepository).delete(id);
		
	}

}
