/*
 * Created on 24 Þub 2016 ( Time 16:27:49 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.AdminUser;
import org.demo.bean.jpa.AdminUserEntity;
import org.demo.business.service.mapping.AdminUserServiceMapper;
import org.demo.data.repository.jpa.AdminUserJpaRepository;
import org.demo.test.AdminUserFactoryForTest;
import org.demo.test.AdminUserEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of AdminUserService
 */
@RunWith(MockitoJUnitRunner.class)
public class AdminUserServiceImplTest {

	@InjectMocks
	private AdminUserServiceImpl adminUserService;
	@Mock
	private AdminUserJpaRepository adminUserJpaRepository;
	@Mock
	private AdminUserServiceMapper adminUserServiceMapper;
	
	private AdminUserFactoryForTest adminUserFactoryForTest = new AdminUserFactoryForTest();

	private AdminUserEntityFactoryForTest adminUserEntityFactoryForTest = new AdminUserEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		AdminUserEntity adminUserEntity = adminUserJpaRepository.findOne(id);
		
		AdminUser adminUser = adminUserFactoryForTest.newAdminUser();
		when(adminUserServiceMapper.mapAdminUserEntityToAdminUser(adminUserEntity)).thenReturn(adminUser);

		// When
		AdminUser adminUserFound = adminUserService.findById(id);

		// Then
		assertEquals(adminUser.getId(),adminUserFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<AdminUserEntity> adminUserEntitys = new ArrayList<AdminUserEntity>();
		AdminUserEntity adminUserEntity1 = adminUserEntityFactoryForTest.newAdminUserEntity();
		adminUserEntitys.add(adminUserEntity1);
		AdminUserEntity adminUserEntity2 = adminUserEntityFactoryForTest.newAdminUserEntity();
		adminUserEntitys.add(adminUserEntity2);
		when(adminUserJpaRepository.findAll()).thenReturn(adminUserEntitys);
		
		AdminUser adminUser1 = adminUserFactoryForTest.newAdminUser();
		when(adminUserServiceMapper.mapAdminUserEntityToAdminUser(adminUserEntity1)).thenReturn(adminUser1);
		AdminUser adminUser2 = adminUserFactoryForTest.newAdminUser();
		when(adminUserServiceMapper.mapAdminUserEntityToAdminUser(adminUserEntity2)).thenReturn(adminUser2);

		// When
		List<AdminUser> adminUsersFounds = adminUserService.findAll();

		// Then
		assertTrue(adminUser1 == adminUsersFounds.get(0));
		assertTrue(adminUser2 == adminUsersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		AdminUser adminUser = adminUserFactoryForTest.newAdminUser();

		AdminUserEntity adminUserEntity = adminUserEntityFactoryForTest.newAdminUserEntity();
		when(adminUserJpaRepository.findOne(adminUser.getId())).thenReturn(null);
		
		adminUserEntity = new AdminUserEntity();
		adminUserServiceMapper.mapAdminUserToAdminUserEntity(adminUser, adminUserEntity);
		AdminUserEntity adminUserEntitySaved = adminUserJpaRepository.save(adminUserEntity);
		
		AdminUser adminUserSaved = adminUserFactoryForTest.newAdminUser();
		when(adminUserServiceMapper.mapAdminUserEntityToAdminUser(adminUserEntitySaved)).thenReturn(adminUserSaved);

		// When
		AdminUser adminUserResult = adminUserService.create(adminUser);

		// Then
		assertTrue(adminUserResult == adminUserSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		AdminUser adminUser = adminUserFactoryForTest.newAdminUser();

		AdminUserEntity adminUserEntity = adminUserEntityFactoryForTest.newAdminUserEntity();
		when(adminUserJpaRepository.findOne(adminUser.getId())).thenReturn(adminUserEntity);

		// When
		Exception exception = null;
		try {
			adminUserService.create(adminUser);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		AdminUser adminUser = adminUserFactoryForTest.newAdminUser();

		AdminUserEntity adminUserEntity = adminUserEntityFactoryForTest.newAdminUserEntity();
		when(adminUserJpaRepository.findOne(adminUser.getId())).thenReturn(adminUserEntity);
		
		AdminUserEntity adminUserEntitySaved = adminUserEntityFactoryForTest.newAdminUserEntity();
		when(adminUserJpaRepository.save(adminUserEntity)).thenReturn(adminUserEntitySaved);
		
		AdminUser adminUserSaved = adminUserFactoryForTest.newAdminUser();
		when(adminUserServiceMapper.mapAdminUserEntityToAdminUser(adminUserEntitySaved)).thenReturn(adminUserSaved);

		// When
		AdminUser adminUserResult = adminUserService.update(adminUser);

		// Then
		verify(adminUserServiceMapper).mapAdminUserToAdminUserEntity(adminUser, adminUserEntity);
		assertTrue(adminUserResult == adminUserSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		adminUserService.delete(id);

		// Then
		verify(adminUserJpaRepository).delete(id);
		
	}

}
