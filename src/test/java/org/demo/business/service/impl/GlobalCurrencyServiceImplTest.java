/*
 * Created on 24 Þub 2016 ( Time 16:27:50 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.GlobalCurrency;
import org.demo.bean.jpa.GlobalCurrencyEntity;
import java.util.Date;
import org.demo.business.service.mapping.GlobalCurrencyServiceMapper;
import org.demo.data.repository.jpa.GlobalCurrencyJpaRepository;
import org.demo.test.GlobalCurrencyFactoryForTest;
import org.demo.test.GlobalCurrencyEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of GlobalCurrencyService
 */
@RunWith(MockitoJUnitRunner.class)
public class GlobalCurrencyServiceImplTest {

	@InjectMocks
	private GlobalCurrencyServiceImpl globalCurrencyService;
	@Mock
	private GlobalCurrencyJpaRepository globalCurrencyJpaRepository;
	@Mock
	private GlobalCurrencyServiceMapper globalCurrencyServiceMapper;
	
	private GlobalCurrencyFactoryForTest globalCurrencyFactoryForTest = new GlobalCurrencyFactoryForTest();

	private GlobalCurrencyEntityFactoryForTest globalCurrencyEntityFactoryForTest = new GlobalCurrencyEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		GlobalCurrencyEntity globalCurrencyEntity = globalCurrencyJpaRepository.findOne(id);
		
		GlobalCurrency globalCurrency = globalCurrencyFactoryForTest.newGlobalCurrency();
		when(globalCurrencyServiceMapper.mapGlobalCurrencyEntityToGlobalCurrency(globalCurrencyEntity)).thenReturn(globalCurrency);

		// When
		GlobalCurrency globalCurrencyFound = globalCurrencyService.findById(id);

		// Then
		assertEquals(globalCurrency.getId(),globalCurrencyFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<GlobalCurrencyEntity> globalCurrencyEntitys = new ArrayList<GlobalCurrencyEntity>();
		GlobalCurrencyEntity globalCurrencyEntity1 = globalCurrencyEntityFactoryForTest.newGlobalCurrencyEntity();
		globalCurrencyEntitys.add(globalCurrencyEntity1);
		GlobalCurrencyEntity globalCurrencyEntity2 = globalCurrencyEntityFactoryForTest.newGlobalCurrencyEntity();
		globalCurrencyEntitys.add(globalCurrencyEntity2);
		when(globalCurrencyJpaRepository.findAll()).thenReturn(globalCurrencyEntitys);
		
		GlobalCurrency globalCurrency1 = globalCurrencyFactoryForTest.newGlobalCurrency();
		when(globalCurrencyServiceMapper.mapGlobalCurrencyEntityToGlobalCurrency(globalCurrencyEntity1)).thenReturn(globalCurrency1);
		GlobalCurrency globalCurrency2 = globalCurrencyFactoryForTest.newGlobalCurrency();
		when(globalCurrencyServiceMapper.mapGlobalCurrencyEntityToGlobalCurrency(globalCurrencyEntity2)).thenReturn(globalCurrency2);

		// When
		List<GlobalCurrency> globalCurrencysFounds = globalCurrencyService.findAll();

		// Then
		assertTrue(globalCurrency1 == globalCurrencysFounds.get(0));
		assertTrue(globalCurrency2 == globalCurrencysFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		GlobalCurrency globalCurrency = globalCurrencyFactoryForTest.newGlobalCurrency();

		GlobalCurrencyEntity globalCurrencyEntity = globalCurrencyEntityFactoryForTest.newGlobalCurrencyEntity();
		when(globalCurrencyJpaRepository.findOne(globalCurrency.getId())).thenReturn(null);
		
		globalCurrencyEntity = new GlobalCurrencyEntity();
		globalCurrencyServiceMapper.mapGlobalCurrencyToGlobalCurrencyEntity(globalCurrency, globalCurrencyEntity);
		GlobalCurrencyEntity globalCurrencyEntitySaved = globalCurrencyJpaRepository.save(globalCurrencyEntity);
		
		GlobalCurrency globalCurrencySaved = globalCurrencyFactoryForTest.newGlobalCurrency();
		when(globalCurrencyServiceMapper.mapGlobalCurrencyEntityToGlobalCurrency(globalCurrencyEntitySaved)).thenReturn(globalCurrencySaved);

		// When
		GlobalCurrency globalCurrencyResult = globalCurrencyService.create(globalCurrency);

		// Then
		assertTrue(globalCurrencyResult == globalCurrencySaved);
	}

	@Test
	public void createKOExists() {
		// Given
		GlobalCurrency globalCurrency = globalCurrencyFactoryForTest.newGlobalCurrency();

		GlobalCurrencyEntity globalCurrencyEntity = globalCurrencyEntityFactoryForTest.newGlobalCurrencyEntity();
		when(globalCurrencyJpaRepository.findOne(globalCurrency.getId())).thenReturn(globalCurrencyEntity);

		// When
		Exception exception = null;
		try {
			globalCurrencyService.create(globalCurrency);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		GlobalCurrency globalCurrency = globalCurrencyFactoryForTest.newGlobalCurrency();

		GlobalCurrencyEntity globalCurrencyEntity = globalCurrencyEntityFactoryForTest.newGlobalCurrencyEntity();
		when(globalCurrencyJpaRepository.findOne(globalCurrency.getId())).thenReturn(globalCurrencyEntity);
		
		GlobalCurrencyEntity globalCurrencyEntitySaved = globalCurrencyEntityFactoryForTest.newGlobalCurrencyEntity();
		when(globalCurrencyJpaRepository.save(globalCurrencyEntity)).thenReturn(globalCurrencyEntitySaved);
		
		GlobalCurrency globalCurrencySaved = globalCurrencyFactoryForTest.newGlobalCurrency();
		when(globalCurrencyServiceMapper.mapGlobalCurrencyEntityToGlobalCurrency(globalCurrencyEntitySaved)).thenReturn(globalCurrencySaved);

		// When
		GlobalCurrency globalCurrencyResult = globalCurrencyService.update(globalCurrency);

		// Then
		verify(globalCurrencyServiceMapper).mapGlobalCurrencyToGlobalCurrencyEntity(globalCurrency, globalCurrencyEntity);
		assertTrue(globalCurrencyResult == globalCurrencySaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		globalCurrencyService.delete(id);

		// Then
		verify(globalCurrencyJpaRepository).delete(id);
		
	}

}
