/*
 * Created on 24 Þub 2016 ( Time 16:27:50 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.ChqbllPayrollDetail;
import org.demo.bean.jpa.ChqbllPayrollDetailEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.ChqbllPayrollDetailServiceMapper;
import org.demo.data.repository.jpa.ChqbllPayrollDetailJpaRepository;
import org.demo.test.ChqbllPayrollDetailFactoryForTest;
import org.demo.test.ChqbllPayrollDetailEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ChqbllPayrollDetailService
 */
@RunWith(MockitoJUnitRunner.class)
public class ChqbllPayrollDetailServiceImplTest {

	@InjectMocks
	private ChqbllPayrollDetailServiceImpl chqbllPayrollDetailService;
	@Mock
	private ChqbllPayrollDetailJpaRepository chqbllPayrollDetailJpaRepository;
	@Mock
	private ChqbllPayrollDetailServiceMapper chqbllPayrollDetailServiceMapper;
	
	private ChqbllPayrollDetailFactoryForTest chqbllPayrollDetailFactoryForTest = new ChqbllPayrollDetailFactoryForTest();

	private ChqbllPayrollDetailEntityFactoryForTest chqbllPayrollDetailEntityFactoryForTest = new ChqbllPayrollDetailEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		ChqbllPayrollDetailEntity chqbllPayrollDetailEntity = chqbllPayrollDetailJpaRepository.findOne(id);
		
		ChqbllPayrollDetail chqbllPayrollDetail = chqbllPayrollDetailFactoryForTest.newChqbllPayrollDetail();
		when(chqbllPayrollDetailServiceMapper.mapChqbllPayrollDetailEntityToChqbllPayrollDetail(chqbllPayrollDetailEntity)).thenReturn(chqbllPayrollDetail);

		// When
		ChqbllPayrollDetail chqbllPayrollDetailFound = chqbllPayrollDetailService.findById(id);

		// Then
		assertEquals(chqbllPayrollDetail.getId(),chqbllPayrollDetailFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ChqbllPayrollDetailEntity> chqbllPayrollDetailEntitys = new ArrayList<ChqbllPayrollDetailEntity>();
		ChqbllPayrollDetailEntity chqbllPayrollDetailEntity1 = chqbllPayrollDetailEntityFactoryForTest.newChqbllPayrollDetailEntity();
		chqbllPayrollDetailEntitys.add(chqbllPayrollDetailEntity1);
		ChqbllPayrollDetailEntity chqbllPayrollDetailEntity2 = chqbllPayrollDetailEntityFactoryForTest.newChqbllPayrollDetailEntity();
		chqbllPayrollDetailEntitys.add(chqbllPayrollDetailEntity2);
		when(chqbllPayrollDetailJpaRepository.findAll()).thenReturn(chqbllPayrollDetailEntitys);
		
		ChqbllPayrollDetail chqbllPayrollDetail1 = chqbllPayrollDetailFactoryForTest.newChqbllPayrollDetail();
		when(chqbllPayrollDetailServiceMapper.mapChqbllPayrollDetailEntityToChqbllPayrollDetail(chqbllPayrollDetailEntity1)).thenReturn(chqbllPayrollDetail1);
		ChqbllPayrollDetail chqbllPayrollDetail2 = chqbllPayrollDetailFactoryForTest.newChqbllPayrollDetail();
		when(chqbllPayrollDetailServiceMapper.mapChqbllPayrollDetailEntityToChqbllPayrollDetail(chqbllPayrollDetailEntity2)).thenReturn(chqbllPayrollDetail2);

		// When
		List<ChqbllPayrollDetail> chqbllPayrollDetailsFounds = chqbllPayrollDetailService.findAll();

		// Then
		assertTrue(chqbllPayrollDetail1 == chqbllPayrollDetailsFounds.get(0));
		assertTrue(chqbllPayrollDetail2 == chqbllPayrollDetailsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		ChqbllPayrollDetail chqbllPayrollDetail = chqbllPayrollDetailFactoryForTest.newChqbllPayrollDetail();

		ChqbllPayrollDetailEntity chqbllPayrollDetailEntity = chqbllPayrollDetailEntityFactoryForTest.newChqbllPayrollDetailEntity();
		when(chqbllPayrollDetailJpaRepository.findOne(chqbllPayrollDetail.getId())).thenReturn(null);
		
		chqbllPayrollDetailEntity = new ChqbllPayrollDetailEntity();
		chqbllPayrollDetailServiceMapper.mapChqbllPayrollDetailToChqbllPayrollDetailEntity(chqbllPayrollDetail, chqbllPayrollDetailEntity);
		ChqbllPayrollDetailEntity chqbllPayrollDetailEntitySaved = chqbllPayrollDetailJpaRepository.save(chqbllPayrollDetailEntity);
		
		ChqbllPayrollDetail chqbllPayrollDetailSaved = chqbllPayrollDetailFactoryForTest.newChqbllPayrollDetail();
		when(chqbllPayrollDetailServiceMapper.mapChqbllPayrollDetailEntityToChqbllPayrollDetail(chqbllPayrollDetailEntitySaved)).thenReturn(chqbllPayrollDetailSaved);

		// When
		ChqbllPayrollDetail chqbllPayrollDetailResult = chqbllPayrollDetailService.create(chqbllPayrollDetail);

		// Then
		assertTrue(chqbllPayrollDetailResult == chqbllPayrollDetailSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		ChqbllPayrollDetail chqbllPayrollDetail = chqbllPayrollDetailFactoryForTest.newChqbllPayrollDetail();

		ChqbllPayrollDetailEntity chqbllPayrollDetailEntity = chqbllPayrollDetailEntityFactoryForTest.newChqbllPayrollDetailEntity();
		when(chqbllPayrollDetailJpaRepository.findOne(chqbllPayrollDetail.getId())).thenReturn(chqbllPayrollDetailEntity);

		// When
		Exception exception = null;
		try {
			chqbllPayrollDetailService.create(chqbllPayrollDetail);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		ChqbllPayrollDetail chqbllPayrollDetail = chqbllPayrollDetailFactoryForTest.newChqbllPayrollDetail();

		ChqbllPayrollDetailEntity chqbllPayrollDetailEntity = chqbllPayrollDetailEntityFactoryForTest.newChqbllPayrollDetailEntity();
		when(chqbllPayrollDetailJpaRepository.findOne(chqbllPayrollDetail.getId())).thenReturn(chqbllPayrollDetailEntity);
		
		ChqbllPayrollDetailEntity chqbllPayrollDetailEntitySaved = chqbllPayrollDetailEntityFactoryForTest.newChqbllPayrollDetailEntity();
		when(chqbllPayrollDetailJpaRepository.save(chqbllPayrollDetailEntity)).thenReturn(chqbllPayrollDetailEntitySaved);
		
		ChqbllPayrollDetail chqbllPayrollDetailSaved = chqbllPayrollDetailFactoryForTest.newChqbllPayrollDetail();
		when(chqbllPayrollDetailServiceMapper.mapChqbllPayrollDetailEntityToChqbllPayrollDetail(chqbllPayrollDetailEntitySaved)).thenReturn(chqbllPayrollDetailSaved);

		// When
		ChqbllPayrollDetail chqbllPayrollDetailResult = chqbllPayrollDetailService.update(chqbllPayrollDetail);

		// Then
		verify(chqbllPayrollDetailServiceMapper).mapChqbllPayrollDetailToChqbllPayrollDetailEntity(chqbllPayrollDetail, chqbllPayrollDetailEntity);
		assertTrue(chqbllPayrollDetailResult == chqbllPayrollDetailSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		chqbllPayrollDetailService.delete(id);

		// Then
		verify(chqbllPayrollDetailJpaRepository).delete(id);
		
	}

}
