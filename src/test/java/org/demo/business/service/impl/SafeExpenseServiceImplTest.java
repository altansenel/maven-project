/*
 * Created on 24 Þub 2016 ( Time 16:27:51 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.SafeExpense;
import org.demo.bean.jpa.SafeExpenseEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.SafeExpenseServiceMapper;
import org.demo.data.repository.jpa.SafeExpenseJpaRepository;
import org.demo.test.SafeExpenseFactoryForTest;
import org.demo.test.SafeExpenseEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of SafeExpenseService
 */
@RunWith(MockitoJUnitRunner.class)
public class SafeExpenseServiceImplTest {

	@InjectMocks
	private SafeExpenseServiceImpl safeExpenseService;
	@Mock
	private SafeExpenseJpaRepository safeExpenseJpaRepository;
	@Mock
	private SafeExpenseServiceMapper safeExpenseServiceMapper;
	
	private SafeExpenseFactoryForTest safeExpenseFactoryForTest = new SafeExpenseFactoryForTest();

	private SafeExpenseEntityFactoryForTest safeExpenseEntityFactoryForTest = new SafeExpenseEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		SafeExpenseEntity safeExpenseEntity = safeExpenseJpaRepository.findOne(id);
		
		SafeExpense safeExpense = safeExpenseFactoryForTest.newSafeExpense();
		when(safeExpenseServiceMapper.mapSafeExpenseEntityToSafeExpense(safeExpenseEntity)).thenReturn(safeExpense);

		// When
		SafeExpense safeExpenseFound = safeExpenseService.findById(id);

		// Then
		assertEquals(safeExpense.getId(),safeExpenseFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<SafeExpenseEntity> safeExpenseEntitys = new ArrayList<SafeExpenseEntity>();
		SafeExpenseEntity safeExpenseEntity1 = safeExpenseEntityFactoryForTest.newSafeExpenseEntity();
		safeExpenseEntitys.add(safeExpenseEntity1);
		SafeExpenseEntity safeExpenseEntity2 = safeExpenseEntityFactoryForTest.newSafeExpenseEntity();
		safeExpenseEntitys.add(safeExpenseEntity2);
		when(safeExpenseJpaRepository.findAll()).thenReturn(safeExpenseEntitys);
		
		SafeExpense safeExpense1 = safeExpenseFactoryForTest.newSafeExpense();
		when(safeExpenseServiceMapper.mapSafeExpenseEntityToSafeExpense(safeExpenseEntity1)).thenReturn(safeExpense1);
		SafeExpense safeExpense2 = safeExpenseFactoryForTest.newSafeExpense();
		when(safeExpenseServiceMapper.mapSafeExpenseEntityToSafeExpense(safeExpenseEntity2)).thenReturn(safeExpense2);

		// When
		List<SafeExpense> safeExpensesFounds = safeExpenseService.findAll();

		// Then
		assertTrue(safeExpense1 == safeExpensesFounds.get(0));
		assertTrue(safeExpense2 == safeExpensesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		SafeExpense safeExpense = safeExpenseFactoryForTest.newSafeExpense();

		SafeExpenseEntity safeExpenseEntity = safeExpenseEntityFactoryForTest.newSafeExpenseEntity();
		when(safeExpenseJpaRepository.findOne(safeExpense.getId())).thenReturn(null);
		
		safeExpenseEntity = new SafeExpenseEntity();
		safeExpenseServiceMapper.mapSafeExpenseToSafeExpenseEntity(safeExpense, safeExpenseEntity);
		SafeExpenseEntity safeExpenseEntitySaved = safeExpenseJpaRepository.save(safeExpenseEntity);
		
		SafeExpense safeExpenseSaved = safeExpenseFactoryForTest.newSafeExpense();
		when(safeExpenseServiceMapper.mapSafeExpenseEntityToSafeExpense(safeExpenseEntitySaved)).thenReturn(safeExpenseSaved);

		// When
		SafeExpense safeExpenseResult = safeExpenseService.create(safeExpense);

		// Then
		assertTrue(safeExpenseResult == safeExpenseSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		SafeExpense safeExpense = safeExpenseFactoryForTest.newSafeExpense();

		SafeExpenseEntity safeExpenseEntity = safeExpenseEntityFactoryForTest.newSafeExpenseEntity();
		when(safeExpenseJpaRepository.findOne(safeExpense.getId())).thenReturn(safeExpenseEntity);

		// When
		Exception exception = null;
		try {
			safeExpenseService.create(safeExpense);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		SafeExpense safeExpense = safeExpenseFactoryForTest.newSafeExpense();

		SafeExpenseEntity safeExpenseEntity = safeExpenseEntityFactoryForTest.newSafeExpenseEntity();
		when(safeExpenseJpaRepository.findOne(safeExpense.getId())).thenReturn(safeExpenseEntity);
		
		SafeExpenseEntity safeExpenseEntitySaved = safeExpenseEntityFactoryForTest.newSafeExpenseEntity();
		when(safeExpenseJpaRepository.save(safeExpenseEntity)).thenReturn(safeExpenseEntitySaved);
		
		SafeExpense safeExpenseSaved = safeExpenseFactoryForTest.newSafeExpense();
		when(safeExpenseServiceMapper.mapSafeExpenseEntityToSafeExpense(safeExpenseEntitySaved)).thenReturn(safeExpenseSaved);

		// When
		SafeExpense safeExpenseResult = safeExpenseService.update(safeExpense);

		// Then
		verify(safeExpenseServiceMapper).mapSafeExpenseToSafeExpenseEntity(safeExpense, safeExpenseEntity);
		assertTrue(safeExpenseResult == safeExpenseSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		safeExpenseService.delete(id);

		// Then
		verify(safeExpenseJpaRepository).delete(id);
		
	}

}
