/*
 * Created on 24 Þub 2016 ( Time 16:27:53 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.WaybillTransRelation;
import org.demo.bean.jpa.WaybillTransRelationEntity;
import org.demo.business.service.mapping.WaybillTransRelationServiceMapper;
import org.demo.data.repository.jpa.WaybillTransRelationJpaRepository;
import org.demo.test.WaybillTransRelationFactoryForTest;
import org.demo.test.WaybillTransRelationEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of WaybillTransRelationService
 */
@RunWith(MockitoJUnitRunner.class)
public class WaybillTransRelationServiceImplTest {

	@InjectMocks
	private WaybillTransRelationServiceImpl waybillTransRelationService;
	@Mock
	private WaybillTransRelationJpaRepository waybillTransRelationJpaRepository;
	@Mock
	private WaybillTransRelationServiceMapper waybillTransRelationServiceMapper;
	
	private WaybillTransRelationFactoryForTest waybillTransRelationFactoryForTest = new WaybillTransRelationFactoryForTest();

	private WaybillTransRelationEntityFactoryForTest waybillTransRelationEntityFactoryForTest = new WaybillTransRelationEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		WaybillTransRelationEntity waybillTransRelationEntity = waybillTransRelationJpaRepository.findOne(id);
		
		WaybillTransRelation waybillTransRelation = waybillTransRelationFactoryForTest.newWaybillTransRelation();
		when(waybillTransRelationServiceMapper.mapWaybillTransRelationEntityToWaybillTransRelation(waybillTransRelationEntity)).thenReturn(waybillTransRelation);

		// When
		WaybillTransRelation waybillTransRelationFound = waybillTransRelationService.findById(id);

		// Then
		assertEquals(waybillTransRelation.getId(),waybillTransRelationFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<WaybillTransRelationEntity> waybillTransRelationEntitys = new ArrayList<WaybillTransRelationEntity>();
		WaybillTransRelationEntity waybillTransRelationEntity1 = waybillTransRelationEntityFactoryForTest.newWaybillTransRelationEntity();
		waybillTransRelationEntitys.add(waybillTransRelationEntity1);
		WaybillTransRelationEntity waybillTransRelationEntity2 = waybillTransRelationEntityFactoryForTest.newWaybillTransRelationEntity();
		waybillTransRelationEntitys.add(waybillTransRelationEntity2);
		when(waybillTransRelationJpaRepository.findAll()).thenReturn(waybillTransRelationEntitys);
		
		WaybillTransRelation waybillTransRelation1 = waybillTransRelationFactoryForTest.newWaybillTransRelation();
		when(waybillTransRelationServiceMapper.mapWaybillTransRelationEntityToWaybillTransRelation(waybillTransRelationEntity1)).thenReturn(waybillTransRelation1);
		WaybillTransRelation waybillTransRelation2 = waybillTransRelationFactoryForTest.newWaybillTransRelation();
		when(waybillTransRelationServiceMapper.mapWaybillTransRelationEntityToWaybillTransRelation(waybillTransRelationEntity2)).thenReturn(waybillTransRelation2);

		// When
		List<WaybillTransRelation> waybillTransRelationsFounds = waybillTransRelationService.findAll();

		// Then
		assertTrue(waybillTransRelation1 == waybillTransRelationsFounds.get(0));
		assertTrue(waybillTransRelation2 == waybillTransRelationsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		WaybillTransRelation waybillTransRelation = waybillTransRelationFactoryForTest.newWaybillTransRelation();

		WaybillTransRelationEntity waybillTransRelationEntity = waybillTransRelationEntityFactoryForTest.newWaybillTransRelationEntity();
		when(waybillTransRelationJpaRepository.findOne(waybillTransRelation.getId())).thenReturn(null);
		
		waybillTransRelationEntity = new WaybillTransRelationEntity();
		waybillTransRelationServiceMapper.mapWaybillTransRelationToWaybillTransRelationEntity(waybillTransRelation, waybillTransRelationEntity);
		WaybillTransRelationEntity waybillTransRelationEntitySaved = waybillTransRelationJpaRepository.save(waybillTransRelationEntity);
		
		WaybillTransRelation waybillTransRelationSaved = waybillTransRelationFactoryForTest.newWaybillTransRelation();
		when(waybillTransRelationServiceMapper.mapWaybillTransRelationEntityToWaybillTransRelation(waybillTransRelationEntitySaved)).thenReturn(waybillTransRelationSaved);

		// When
		WaybillTransRelation waybillTransRelationResult = waybillTransRelationService.create(waybillTransRelation);

		// Then
		assertTrue(waybillTransRelationResult == waybillTransRelationSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		WaybillTransRelation waybillTransRelation = waybillTransRelationFactoryForTest.newWaybillTransRelation();

		WaybillTransRelationEntity waybillTransRelationEntity = waybillTransRelationEntityFactoryForTest.newWaybillTransRelationEntity();
		when(waybillTransRelationJpaRepository.findOne(waybillTransRelation.getId())).thenReturn(waybillTransRelationEntity);

		// When
		Exception exception = null;
		try {
			waybillTransRelationService.create(waybillTransRelation);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		WaybillTransRelation waybillTransRelation = waybillTransRelationFactoryForTest.newWaybillTransRelation();

		WaybillTransRelationEntity waybillTransRelationEntity = waybillTransRelationEntityFactoryForTest.newWaybillTransRelationEntity();
		when(waybillTransRelationJpaRepository.findOne(waybillTransRelation.getId())).thenReturn(waybillTransRelationEntity);
		
		WaybillTransRelationEntity waybillTransRelationEntitySaved = waybillTransRelationEntityFactoryForTest.newWaybillTransRelationEntity();
		when(waybillTransRelationJpaRepository.save(waybillTransRelationEntity)).thenReturn(waybillTransRelationEntitySaved);
		
		WaybillTransRelation waybillTransRelationSaved = waybillTransRelationFactoryForTest.newWaybillTransRelation();
		when(waybillTransRelationServiceMapper.mapWaybillTransRelationEntityToWaybillTransRelation(waybillTransRelationEntitySaved)).thenReturn(waybillTransRelationSaved);

		// When
		WaybillTransRelation waybillTransRelationResult = waybillTransRelationService.update(waybillTransRelation);

		// Then
		verify(waybillTransRelationServiceMapper).mapWaybillTransRelationToWaybillTransRelationEntity(waybillTransRelation, waybillTransRelationEntity);
		assertTrue(waybillTransRelationResult == waybillTransRelationSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		waybillTransRelationService.delete(id);

		// Then
		verify(waybillTransRelationJpaRepository).delete(id);
		
	}

}
