/*
 * Created on 24 Þub 2016 ( Time 16:27:50 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.GlobalCurrencyRate;
import org.demo.bean.jpa.GlobalCurrencyRateEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.GlobalCurrencyRateServiceMapper;
import org.demo.data.repository.jpa.GlobalCurrencyRateJpaRepository;
import org.demo.test.GlobalCurrencyRateFactoryForTest;
import org.demo.test.GlobalCurrencyRateEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of GlobalCurrencyRateService
 */
@RunWith(MockitoJUnitRunner.class)
public class GlobalCurrencyRateServiceImplTest {

	@InjectMocks
	private GlobalCurrencyRateServiceImpl globalCurrencyRateService;
	@Mock
	private GlobalCurrencyRateJpaRepository globalCurrencyRateJpaRepository;
	@Mock
	private GlobalCurrencyRateServiceMapper globalCurrencyRateServiceMapper;
	
	private GlobalCurrencyRateFactoryForTest globalCurrencyRateFactoryForTest = new GlobalCurrencyRateFactoryForTest();

	private GlobalCurrencyRateEntityFactoryForTest globalCurrencyRateEntityFactoryForTest = new GlobalCurrencyRateEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		GlobalCurrencyRateEntity globalCurrencyRateEntity = globalCurrencyRateJpaRepository.findOne(id);
		
		GlobalCurrencyRate globalCurrencyRate = globalCurrencyRateFactoryForTest.newGlobalCurrencyRate();
		when(globalCurrencyRateServiceMapper.mapGlobalCurrencyRateEntityToGlobalCurrencyRate(globalCurrencyRateEntity)).thenReturn(globalCurrencyRate);

		// When
		GlobalCurrencyRate globalCurrencyRateFound = globalCurrencyRateService.findById(id);

		// Then
		assertEquals(globalCurrencyRate.getId(),globalCurrencyRateFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<GlobalCurrencyRateEntity> globalCurrencyRateEntitys = new ArrayList<GlobalCurrencyRateEntity>();
		GlobalCurrencyRateEntity globalCurrencyRateEntity1 = globalCurrencyRateEntityFactoryForTest.newGlobalCurrencyRateEntity();
		globalCurrencyRateEntitys.add(globalCurrencyRateEntity1);
		GlobalCurrencyRateEntity globalCurrencyRateEntity2 = globalCurrencyRateEntityFactoryForTest.newGlobalCurrencyRateEntity();
		globalCurrencyRateEntitys.add(globalCurrencyRateEntity2);
		when(globalCurrencyRateJpaRepository.findAll()).thenReturn(globalCurrencyRateEntitys);
		
		GlobalCurrencyRate globalCurrencyRate1 = globalCurrencyRateFactoryForTest.newGlobalCurrencyRate();
		when(globalCurrencyRateServiceMapper.mapGlobalCurrencyRateEntityToGlobalCurrencyRate(globalCurrencyRateEntity1)).thenReturn(globalCurrencyRate1);
		GlobalCurrencyRate globalCurrencyRate2 = globalCurrencyRateFactoryForTest.newGlobalCurrencyRate();
		when(globalCurrencyRateServiceMapper.mapGlobalCurrencyRateEntityToGlobalCurrencyRate(globalCurrencyRateEntity2)).thenReturn(globalCurrencyRate2);

		// When
		List<GlobalCurrencyRate> globalCurrencyRatesFounds = globalCurrencyRateService.findAll();

		// Then
		assertTrue(globalCurrencyRate1 == globalCurrencyRatesFounds.get(0));
		assertTrue(globalCurrencyRate2 == globalCurrencyRatesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		GlobalCurrencyRate globalCurrencyRate = globalCurrencyRateFactoryForTest.newGlobalCurrencyRate();

		GlobalCurrencyRateEntity globalCurrencyRateEntity = globalCurrencyRateEntityFactoryForTest.newGlobalCurrencyRateEntity();
		when(globalCurrencyRateJpaRepository.findOne(globalCurrencyRate.getId())).thenReturn(null);
		
		globalCurrencyRateEntity = new GlobalCurrencyRateEntity();
		globalCurrencyRateServiceMapper.mapGlobalCurrencyRateToGlobalCurrencyRateEntity(globalCurrencyRate, globalCurrencyRateEntity);
		GlobalCurrencyRateEntity globalCurrencyRateEntitySaved = globalCurrencyRateJpaRepository.save(globalCurrencyRateEntity);
		
		GlobalCurrencyRate globalCurrencyRateSaved = globalCurrencyRateFactoryForTest.newGlobalCurrencyRate();
		when(globalCurrencyRateServiceMapper.mapGlobalCurrencyRateEntityToGlobalCurrencyRate(globalCurrencyRateEntitySaved)).thenReturn(globalCurrencyRateSaved);

		// When
		GlobalCurrencyRate globalCurrencyRateResult = globalCurrencyRateService.create(globalCurrencyRate);

		// Then
		assertTrue(globalCurrencyRateResult == globalCurrencyRateSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		GlobalCurrencyRate globalCurrencyRate = globalCurrencyRateFactoryForTest.newGlobalCurrencyRate();

		GlobalCurrencyRateEntity globalCurrencyRateEntity = globalCurrencyRateEntityFactoryForTest.newGlobalCurrencyRateEntity();
		when(globalCurrencyRateJpaRepository.findOne(globalCurrencyRate.getId())).thenReturn(globalCurrencyRateEntity);

		// When
		Exception exception = null;
		try {
			globalCurrencyRateService.create(globalCurrencyRate);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		GlobalCurrencyRate globalCurrencyRate = globalCurrencyRateFactoryForTest.newGlobalCurrencyRate();

		GlobalCurrencyRateEntity globalCurrencyRateEntity = globalCurrencyRateEntityFactoryForTest.newGlobalCurrencyRateEntity();
		when(globalCurrencyRateJpaRepository.findOne(globalCurrencyRate.getId())).thenReturn(globalCurrencyRateEntity);
		
		GlobalCurrencyRateEntity globalCurrencyRateEntitySaved = globalCurrencyRateEntityFactoryForTest.newGlobalCurrencyRateEntity();
		when(globalCurrencyRateJpaRepository.save(globalCurrencyRateEntity)).thenReturn(globalCurrencyRateEntitySaved);
		
		GlobalCurrencyRate globalCurrencyRateSaved = globalCurrencyRateFactoryForTest.newGlobalCurrencyRate();
		when(globalCurrencyRateServiceMapper.mapGlobalCurrencyRateEntityToGlobalCurrencyRate(globalCurrencyRateEntitySaved)).thenReturn(globalCurrencyRateSaved);

		// When
		GlobalCurrencyRate globalCurrencyRateResult = globalCurrencyRateService.update(globalCurrencyRate);

		// Then
		verify(globalCurrencyRateServiceMapper).mapGlobalCurrencyRateToGlobalCurrencyRateEntity(globalCurrencyRate, globalCurrencyRateEntity);
		assertTrue(globalCurrencyRateResult == globalCurrencyRateSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		globalCurrencyRateService.delete(id);

		// Then
		verify(globalCurrencyRateJpaRepository).delete(id);
		
	}

}
