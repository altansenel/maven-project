/*
 * Created on 24 Þub 2016 ( Time 16:27:53 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.WaybillTransDetail;
import org.demo.bean.jpa.WaybillTransDetailEntity;
import java.util.Date;
import org.demo.business.service.mapping.WaybillTransDetailServiceMapper;
import org.demo.data.repository.jpa.WaybillTransDetailJpaRepository;
import org.demo.test.WaybillTransDetailFactoryForTest;
import org.demo.test.WaybillTransDetailEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of WaybillTransDetailService
 */
@RunWith(MockitoJUnitRunner.class)
public class WaybillTransDetailServiceImplTest {

	@InjectMocks
	private WaybillTransDetailServiceImpl waybillTransDetailService;
	@Mock
	private WaybillTransDetailJpaRepository waybillTransDetailJpaRepository;
	@Mock
	private WaybillTransDetailServiceMapper waybillTransDetailServiceMapper;
	
	private WaybillTransDetailFactoryForTest waybillTransDetailFactoryForTest = new WaybillTransDetailFactoryForTest();

	private WaybillTransDetailEntityFactoryForTest waybillTransDetailEntityFactoryForTest = new WaybillTransDetailEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		WaybillTransDetailEntity waybillTransDetailEntity = waybillTransDetailJpaRepository.findOne(id);
		
		WaybillTransDetail waybillTransDetail = waybillTransDetailFactoryForTest.newWaybillTransDetail();
		when(waybillTransDetailServiceMapper.mapWaybillTransDetailEntityToWaybillTransDetail(waybillTransDetailEntity)).thenReturn(waybillTransDetail);

		// When
		WaybillTransDetail waybillTransDetailFound = waybillTransDetailService.findById(id);

		// Then
		assertEquals(waybillTransDetail.getId(),waybillTransDetailFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<WaybillTransDetailEntity> waybillTransDetailEntitys = new ArrayList<WaybillTransDetailEntity>();
		WaybillTransDetailEntity waybillTransDetailEntity1 = waybillTransDetailEntityFactoryForTest.newWaybillTransDetailEntity();
		waybillTransDetailEntitys.add(waybillTransDetailEntity1);
		WaybillTransDetailEntity waybillTransDetailEntity2 = waybillTransDetailEntityFactoryForTest.newWaybillTransDetailEntity();
		waybillTransDetailEntitys.add(waybillTransDetailEntity2);
		when(waybillTransDetailJpaRepository.findAll()).thenReturn(waybillTransDetailEntitys);
		
		WaybillTransDetail waybillTransDetail1 = waybillTransDetailFactoryForTest.newWaybillTransDetail();
		when(waybillTransDetailServiceMapper.mapWaybillTransDetailEntityToWaybillTransDetail(waybillTransDetailEntity1)).thenReturn(waybillTransDetail1);
		WaybillTransDetail waybillTransDetail2 = waybillTransDetailFactoryForTest.newWaybillTransDetail();
		when(waybillTransDetailServiceMapper.mapWaybillTransDetailEntityToWaybillTransDetail(waybillTransDetailEntity2)).thenReturn(waybillTransDetail2);

		// When
		List<WaybillTransDetail> waybillTransDetailsFounds = waybillTransDetailService.findAll();

		// Then
		assertTrue(waybillTransDetail1 == waybillTransDetailsFounds.get(0));
		assertTrue(waybillTransDetail2 == waybillTransDetailsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		WaybillTransDetail waybillTransDetail = waybillTransDetailFactoryForTest.newWaybillTransDetail();

		WaybillTransDetailEntity waybillTransDetailEntity = waybillTransDetailEntityFactoryForTest.newWaybillTransDetailEntity();
		when(waybillTransDetailJpaRepository.findOne(waybillTransDetail.getId())).thenReturn(null);
		
		waybillTransDetailEntity = new WaybillTransDetailEntity();
		waybillTransDetailServiceMapper.mapWaybillTransDetailToWaybillTransDetailEntity(waybillTransDetail, waybillTransDetailEntity);
		WaybillTransDetailEntity waybillTransDetailEntitySaved = waybillTransDetailJpaRepository.save(waybillTransDetailEntity);
		
		WaybillTransDetail waybillTransDetailSaved = waybillTransDetailFactoryForTest.newWaybillTransDetail();
		when(waybillTransDetailServiceMapper.mapWaybillTransDetailEntityToWaybillTransDetail(waybillTransDetailEntitySaved)).thenReturn(waybillTransDetailSaved);

		// When
		WaybillTransDetail waybillTransDetailResult = waybillTransDetailService.create(waybillTransDetail);

		// Then
		assertTrue(waybillTransDetailResult == waybillTransDetailSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		WaybillTransDetail waybillTransDetail = waybillTransDetailFactoryForTest.newWaybillTransDetail();

		WaybillTransDetailEntity waybillTransDetailEntity = waybillTransDetailEntityFactoryForTest.newWaybillTransDetailEntity();
		when(waybillTransDetailJpaRepository.findOne(waybillTransDetail.getId())).thenReturn(waybillTransDetailEntity);

		// When
		Exception exception = null;
		try {
			waybillTransDetailService.create(waybillTransDetail);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		WaybillTransDetail waybillTransDetail = waybillTransDetailFactoryForTest.newWaybillTransDetail();

		WaybillTransDetailEntity waybillTransDetailEntity = waybillTransDetailEntityFactoryForTest.newWaybillTransDetailEntity();
		when(waybillTransDetailJpaRepository.findOne(waybillTransDetail.getId())).thenReturn(waybillTransDetailEntity);
		
		WaybillTransDetailEntity waybillTransDetailEntitySaved = waybillTransDetailEntityFactoryForTest.newWaybillTransDetailEntity();
		when(waybillTransDetailJpaRepository.save(waybillTransDetailEntity)).thenReturn(waybillTransDetailEntitySaved);
		
		WaybillTransDetail waybillTransDetailSaved = waybillTransDetailFactoryForTest.newWaybillTransDetail();
		when(waybillTransDetailServiceMapper.mapWaybillTransDetailEntityToWaybillTransDetail(waybillTransDetailEntitySaved)).thenReturn(waybillTransDetailSaved);

		// When
		WaybillTransDetail waybillTransDetailResult = waybillTransDetailService.update(waybillTransDetail);

		// Then
		verify(waybillTransDetailServiceMapper).mapWaybillTransDetailToWaybillTransDetailEntity(waybillTransDetail, waybillTransDetailEntity);
		assertTrue(waybillTransDetailResult == waybillTransDetailSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		waybillTransDetailService.delete(id);

		// Then
		verify(waybillTransDetailJpaRepository).delete(id);
		
	}

}
