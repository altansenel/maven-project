/*
 * Created on 24 Þub 2016 ( Time 16:27:49 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.BankTransSource;
import org.demo.bean.jpa.BankTransSourceEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.BankTransSourceServiceMapper;
import org.demo.data.repository.jpa.BankTransSourceJpaRepository;
import org.demo.test.BankTransSourceFactoryForTest;
import org.demo.test.BankTransSourceEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of BankTransSourceService
 */
@RunWith(MockitoJUnitRunner.class)
public class BankTransSourceServiceImplTest {

	@InjectMocks
	private BankTransSourceServiceImpl bankTransSourceService;
	@Mock
	private BankTransSourceJpaRepository bankTransSourceJpaRepository;
	@Mock
	private BankTransSourceServiceMapper bankTransSourceServiceMapper;
	
	private BankTransSourceFactoryForTest bankTransSourceFactoryForTest = new BankTransSourceFactoryForTest();

	private BankTransSourceEntityFactoryForTest bankTransSourceEntityFactoryForTest = new BankTransSourceEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		BankTransSourceEntity bankTransSourceEntity = bankTransSourceJpaRepository.findOne(id);
		
		BankTransSource bankTransSource = bankTransSourceFactoryForTest.newBankTransSource();
		when(bankTransSourceServiceMapper.mapBankTransSourceEntityToBankTransSource(bankTransSourceEntity)).thenReturn(bankTransSource);

		// When
		BankTransSource bankTransSourceFound = bankTransSourceService.findById(id);

		// Then
		assertEquals(bankTransSource.getId(),bankTransSourceFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<BankTransSourceEntity> bankTransSourceEntitys = new ArrayList<BankTransSourceEntity>();
		BankTransSourceEntity bankTransSourceEntity1 = bankTransSourceEntityFactoryForTest.newBankTransSourceEntity();
		bankTransSourceEntitys.add(bankTransSourceEntity1);
		BankTransSourceEntity bankTransSourceEntity2 = bankTransSourceEntityFactoryForTest.newBankTransSourceEntity();
		bankTransSourceEntitys.add(bankTransSourceEntity2);
		when(bankTransSourceJpaRepository.findAll()).thenReturn(bankTransSourceEntitys);
		
		BankTransSource bankTransSource1 = bankTransSourceFactoryForTest.newBankTransSource();
		when(bankTransSourceServiceMapper.mapBankTransSourceEntityToBankTransSource(bankTransSourceEntity1)).thenReturn(bankTransSource1);
		BankTransSource bankTransSource2 = bankTransSourceFactoryForTest.newBankTransSource();
		when(bankTransSourceServiceMapper.mapBankTransSourceEntityToBankTransSource(bankTransSourceEntity2)).thenReturn(bankTransSource2);

		// When
		List<BankTransSource> bankTransSourcesFounds = bankTransSourceService.findAll();

		// Then
		assertTrue(bankTransSource1 == bankTransSourcesFounds.get(0));
		assertTrue(bankTransSource2 == bankTransSourcesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		BankTransSource bankTransSource = bankTransSourceFactoryForTest.newBankTransSource();

		BankTransSourceEntity bankTransSourceEntity = bankTransSourceEntityFactoryForTest.newBankTransSourceEntity();
		when(bankTransSourceJpaRepository.findOne(bankTransSource.getId())).thenReturn(null);
		
		bankTransSourceEntity = new BankTransSourceEntity();
		bankTransSourceServiceMapper.mapBankTransSourceToBankTransSourceEntity(bankTransSource, bankTransSourceEntity);
		BankTransSourceEntity bankTransSourceEntitySaved = bankTransSourceJpaRepository.save(bankTransSourceEntity);
		
		BankTransSource bankTransSourceSaved = bankTransSourceFactoryForTest.newBankTransSource();
		when(bankTransSourceServiceMapper.mapBankTransSourceEntityToBankTransSource(bankTransSourceEntitySaved)).thenReturn(bankTransSourceSaved);

		// When
		BankTransSource bankTransSourceResult = bankTransSourceService.create(bankTransSource);

		// Then
		assertTrue(bankTransSourceResult == bankTransSourceSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		BankTransSource bankTransSource = bankTransSourceFactoryForTest.newBankTransSource();

		BankTransSourceEntity bankTransSourceEntity = bankTransSourceEntityFactoryForTest.newBankTransSourceEntity();
		when(bankTransSourceJpaRepository.findOne(bankTransSource.getId())).thenReturn(bankTransSourceEntity);

		// When
		Exception exception = null;
		try {
			bankTransSourceService.create(bankTransSource);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		BankTransSource bankTransSource = bankTransSourceFactoryForTest.newBankTransSource();

		BankTransSourceEntity bankTransSourceEntity = bankTransSourceEntityFactoryForTest.newBankTransSourceEntity();
		when(bankTransSourceJpaRepository.findOne(bankTransSource.getId())).thenReturn(bankTransSourceEntity);
		
		BankTransSourceEntity bankTransSourceEntitySaved = bankTransSourceEntityFactoryForTest.newBankTransSourceEntity();
		when(bankTransSourceJpaRepository.save(bankTransSourceEntity)).thenReturn(bankTransSourceEntitySaved);
		
		BankTransSource bankTransSourceSaved = bankTransSourceFactoryForTest.newBankTransSource();
		when(bankTransSourceServiceMapper.mapBankTransSourceEntityToBankTransSource(bankTransSourceEntitySaved)).thenReturn(bankTransSourceSaved);

		// When
		BankTransSource bankTransSourceResult = bankTransSourceService.update(bankTransSource);

		// Then
		verify(bankTransSourceServiceMapper).mapBankTransSourceToBankTransSourceEntity(bankTransSource, bankTransSourceEntity);
		assertTrue(bankTransSourceResult == bankTransSourceSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		bankTransSourceService.delete(id);

		// Then
		verify(bankTransSourceJpaRepository).delete(id);
		
	}

}
