/*
 * Created on 24 Þub 2016 ( Time 16:27:51 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.OrderTransStatusHistory;
import org.demo.bean.jpa.OrderTransStatusHistoryEntity;
import java.util.Date;
import org.demo.business.service.mapping.OrderTransStatusHistoryServiceMapper;
import org.demo.data.repository.jpa.OrderTransStatusHistoryJpaRepository;
import org.demo.test.OrderTransStatusHistoryFactoryForTest;
import org.demo.test.OrderTransStatusHistoryEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of OrderTransStatusHistoryService
 */
@RunWith(MockitoJUnitRunner.class)
public class OrderTransStatusHistoryServiceImplTest {

	@InjectMocks
	private OrderTransStatusHistoryServiceImpl orderTransStatusHistoryService;
	@Mock
	private OrderTransStatusHistoryJpaRepository orderTransStatusHistoryJpaRepository;
	@Mock
	private OrderTransStatusHistoryServiceMapper orderTransStatusHistoryServiceMapper;
	
	private OrderTransStatusHistoryFactoryForTest orderTransStatusHistoryFactoryForTest = new OrderTransStatusHistoryFactoryForTest();

	private OrderTransStatusHistoryEntityFactoryForTest orderTransStatusHistoryEntityFactoryForTest = new OrderTransStatusHistoryEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		OrderTransStatusHistoryEntity orderTransStatusHistoryEntity = orderTransStatusHistoryJpaRepository.findOne(id);
		
		OrderTransStatusHistory orderTransStatusHistory = orderTransStatusHistoryFactoryForTest.newOrderTransStatusHistory();
		when(orderTransStatusHistoryServiceMapper.mapOrderTransStatusHistoryEntityToOrderTransStatusHistory(orderTransStatusHistoryEntity)).thenReturn(orderTransStatusHistory);

		// When
		OrderTransStatusHistory orderTransStatusHistoryFound = orderTransStatusHistoryService.findById(id);

		// Then
		assertEquals(orderTransStatusHistory.getId(),orderTransStatusHistoryFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<OrderTransStatusHistoryEntity> orderTransStatusHistoryEntitys = new ArrayList<OrderTransStatusHistoryEntity>();
		OrderTransStatusHistoryEntity orderTransStatusHistoryEntity1 = orderTransStatusHistoryEntityFactoryForTest.newOrderTransStatusHistoryEntity();
		orderTransStatusHistoryEntitys.add(orderTransStatusHistoryEntity1);
		OrderTransStatusHistoryEntity orderTransStatusHistoryEntity2 = orderTransStatusHistoryEntityFactoryForTest.newOrderTransStatusHistoryEntity();
		orderTransStatusHistoryEntitys.add(orderTransStatusHistoryEntity2);
		when(orderTransStatusHistoryJpaRepository.findAll()).thenReturn(orderTransStatusHistoryEntitys);
		
		OrderTransStatusHistory orderTransStatusHistory1 = orderTransStatusHistoryFactoryForTest.newOrderTransStatusHistory();
		when(orderTransStatusHistoryServiceMapper.mapOrderTransStatusHistoryEntityToOrderTransStatusHistory(orderTransStatusHistoryEntity1)).thenReturn(orderTransStatusHistory1);
		OrderTransStatusHistory orderTransStatusHistory2 = orderTransStatusHistoryFactoryForTest.newOrderTransStatusHistory();
		when(orderTransStatusHistoryServiceMapper.mapOrderTransStatusHistoryEntityToOrderTransStatusHistory(orderTransStatusHistoryEntity2)).thenReturn(orderTransStatusHistory2);

		// When
		List<OrderTransStatusHistory> orderTransStatusHistorysFounds = orderTransStatusHistoryService.findAll();

		// Then
		assertTrue(orderTransStatusHistory1 == orderTransStatusHistorysFounds.get(0));
		assertTrue(orderTransStatusHistory2 == orderTransStatusHistorysFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		OrderTransStatusHistory orderTransStatusHistory = orderTransStatusHistoryFactoryForTest.newOrderTransStatusHistory();

		OrderTransStatusHistoryEntity orderTransStatusHistoryEntity = orderTransStatusHistoryEntityFactoryForTest.newOrderTransStatusHistoryEntity();
		when(orderTransStatusHistoryJpaRepository.findOne(orderTransStatusHistory.getId())).thenReturn(null);
		
		orderTransStatusHistoryEntity = new OrderTransStatusHistoryEntity();
		orderTransStatusHistoryServiceMapper.mapOrderTransStatusHistoryToOrderTransStatusHistoryEntity(orderTransStatusHistory, orderTransStatusHistoryEntity);
		OrderTransStatusHistoryEntity orderTransStatusHistoryEntitySaved = orderTransStatusHistoryJpaRepository.save(orderTransStatusHistoryEntity);
		
		OrderTransStatusHistory orderTransStatusHistorySaved = orderTransStatusHistoryFactoryForTest.newOrderTransStatusHistory();
		when(orderTransStatusHistoryServiceMapper.mapOrderTransStatusHistoryEntityToOrderTransStatusHistory(orderTransStatusHistoryEntitySaved)).thenReturn(orderTransStatusHistorySaved);

		// When
		OrderTransStatusHistory orderTransStatusHistoryResult = orderTransStatusHistoryService.create(orderTransStatusHistory);

		// Then
		assertTrue(orderTransStatusHistoryResult == orderTransStatusHistorySaved);
	}

	@Test
	public void createKOExists() {
		// Given
		OrderTransStatusHistory orderTransStatusHistory = orderTransStatusHistoryFactoryForTest.newOrderTransStatusHistory();

		OrderTransStatusHistoryEntity orderTransStatusHistoryEntity = orderTransStatusHistoryEntityFactoryForTest.newOrderTransStatusHistoryEntity();
		when(orderTransStatusHistoryJpaRepository.findOne(orderTransStatusHistory.getId())).thenReturn(orderTransStatusHistoryEntity);

		// When
		Exception exception = null;
		try {
			orderTransStatusHistoryService.create(orderTransStatusHistory);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		OrderTransStatusHistory orderTransStatusHistory = orderTransStatusHistoryFactoryForTest.newOrderTransStatusHistory();

		OrderTransStatusHistoryEntity orderTransStatusHistoryEntity = orderTransStatusHistoryEntityFactoryForTest.newOrderTransStatusHistoryEntity();
		when(orderTransStatusHistoryJpaRepository.findOne(orderTransStatusHistory.getId())).thenReturn(orderTransStatusHistoryEntity);
		
		OrderTransStatusHistoryEntity orderTransStatusHistoryEntitySaved = orderTransStatusHistoryEntityFactoryForTest.newOrderTransStatusHistoryEntity();
		when(orderTransStatusHistoryJpaRepository.save(orderTransStatusHistoryEntity)).thenReturn(orderTransStatusHistoryEntitySaved);
		
		OrderTransStatusHistory orderTransStatusHistorySaved = orderTransStatusHistoryFactoryForTest.newOrderTransStatusHistory();
		when(orderTransStatusHistoryServiceMapper.mapOrderTransStatusHistoryEntityToOrderTransStatusHistory(orderTransStatusHistoryEntitySaved)).thenReturn(orderTransStatusHistorySaved);

		// When
		OrderTransStatusHistory orderTransStatusHistoryResult = orderTransStatusHistoryService.update(orderTransStatusHistory);

		// Then
		verify(orderTransStatusHistoryServiceMapper).mapOrderTransStatusHistoryToOrderTransStatusHistoryEntity(orderTransStatusHistory, orderTransStatusHistoryEntity);
		assertTrue(orderTransStatusHistoryResult == orderTransStatusHistorySaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		orderTransStatusHistoryService.delete(id);

		// Then
		verify(orderTransStatusHistoryJpaRepository).delete(id);
		
	}

}
