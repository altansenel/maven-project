/*
 * Created on 24 Þub 2016 ( Time 16:27:49 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.BankTrans;
import org.demo.bean.jpa.BankTransEntity;
import java.util.Date;
import org.demo.business.service.mapping.BankTransServiceMapper;
import org.demo.data.repository.jpa.BankTransJpaRepository;
import org.demo.test.BankTransFactoryForTest;
import org.demo.test.BankTransEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of BankTransService
 */
@RunWith(MockitoJUnitRunner.class)
public class BankTransServiceImplTest {

	@InjectMocks
	private BankTransServiceImpl bankTransService;
	@Mock
	private BankTransJpaRepository bankTransJpaRepository;
	@Mock
	private BankTransServiceMapper bankTransServiceMapper;
	
	private BankTransFactoryForTest bankTransFactoryForTest = new BankTransFactoryForTest();

	private BankTransEntityFactoryForTest bankTransEntityFactoryForTest = new BankTransEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		BankTransEntity bankTransEntity = bankTransJpaRepository.findOne(id);
		
		BankTrans bankTrans = bankTransFactoryForTest.newBankTrans();
		when(bankTransServiceMapper.mapBankTransEntityToBankTrans(bankTransEntity)).thenReturn(bankTrans);

		// When
		BankTrans bankTransFound = bankTransService.findById(id);

		// Then
		assertEquals(bankTrans.getId(),bankTransFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<BankTransEntity> bankTransEntitys = new ArrayList<BankTransEntity>();
		BankTransEntity bankTransEntity1 = bankTransEntityFactoryForTest.newBankTransEntity();
		bankTransEntitys.add(bankTransEntity1);
		BankTransEntity bankTransEntity2 = bankTransEntityFactoryForTest.newBankTransEntity();
		bankTransEntitys.add(bankTransEntity2);
		when(bankTransJpaRepository.findAll()).thenReturn(bankTransEntitys);
		
		BankTrans bankTrans1 = bankTransFactoryForTest.newBankTrans();
		when(bankTransServiceMapper.mapBankTransEntityToBankTrans(bankTransEntity1)).thenReturn(bankTrans1);
		BankTrans bankTrans2 = bankTransFactoryForTest.newBankTrans();
		when(bankTransServiceMapper.mapBankTransEntityToBankTrans(bankTransEntity2)).thenReturn(bankTrans2);

		// When
		List<BankTrans> bankTranssFounds = bankTransService.findAll();

		// Then
		assertTrue(bankTrans1 == bankTranssFounds.get(0));
		assertTrue(bankTrans2 == bankTranssFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		BankTrans bankTrans = bankTransFactoryForTest.newBankTrans();

		BankTransEntity bankTransEntity = bankTransEntityFactoryForTest.newBankTransEntity();
		when(bankTransJpaRepository.findOne(bankTrans.getId())).thenReturn(null);
		
		bankTransEntity = new BankTransEntity();
		bankTransServiceMapper.mapBankTransToBankTransEntity(bankTrans, bankTransEntity);
		BankTransEntity bankTransEntitySaved = bankTransJpaRepository.save(bankTransEntity);
		
		BankTrans bankTransSaved = bankTransFactoryForTest.newBankTrans();
		when(bankTransServiceMapper.mapBankTransEntityToBankTrans(bankTransEntitySaved)).thenReturn(bankTransSaved);

		// When
		BankTrans bankTransResult = bankTransService.create(bankTrans);

		// Then
		assertTrue(bankTransResult == bankTransSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		BankTrans bankTrans = bankTransFactoryForTest.newBankTrans();

		BankTransEntity bankTransEntity = bankTransEntityFactoryForTest.newBankTransEntity();
		when(bankTransJpaRepository.findOne(bankTrans.getId())).thenReturn(bankTransEntity);

		// When
		Exception exception = null;
		try {
			bankTransService.create(bankTrans);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		BankTrans bankTrans = bankTransFactoryForTest.newBankTrans();

		BankTransEntity bankTransEntity = bankTransEntityFactoryForTest.newBankTransEntity();
		when(bankTransJpaRepository.findOne(bankTrans.getId())).thenReturn(bankTransEntity);
		
		BankTransEntity bankTransEntitySaved = bankTransEntityFactoryForTest.newBankTransEntity();
		when(bankTransJpaRepository.save(bankTransEntity)).thenReturn(bankTransEntitySaved);
		
		BankTrans bankTransSaved = bankTransFactoryForTest.newBankTrans();
		when(bankTransServiceMapper.mapBankTransEntityToBankTrans(bankTransEntitySaved)).thenReturn(bankTransSaved);

		// When
		BankTrans bankTransResult = bankTransService.update(bankTrans);

		// Then
		verify(bankTransServiceMapper).mapBankTransToBankTransEntity(bankTrans, bankTransEntity);
		assertTrue(bankTransResult == bankTransSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		bankTransService.delete(id);

		// Then
		verify(bankTransJpaRepository).delete(id);
		
	}

}
