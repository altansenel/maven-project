/*
 * Created on 24 Þub 2016 ( Time 16:27:51 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.OrderTransSource;
import org.demo.bean.jpa.OrderTransSourceEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.OrderTransSourceServiceMapper;
import org.demo.data.repository.jpa.OrderTransSourceJpaRepository;
import org.demo.test.OrderTransSourceFactoryForTest;
import org.demo.test.OrderTransSourceEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of OrderTransSourceService
 */
@RunWith(MockitoJUnitRunner.class)
public class OrderTransSourceServiceImplTest {

	@InjectMocks
	private OrderTransSourceServiceImpl orderTransSourceService;
	@Mock
	private OrderTransSourceJpaRepository orderTransSourceJpaRepository;
	@Mock
	private OrderTransSourceServiceMapper orderTransSourceServiceMapper;
	
	private OrderTransSourceFactoryForTest orderTransSourceFactoryForTest = new OrderTransSourceFactoryForTest();

	private OrderTransSourceEntityFactoryForTest orderTransSourceEntityFactoryForTest = new OrderTransSourceEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		OrderTransSourceEntity orderTransSourceEntity = orderTransSourceJpaRepository.findOne(id);
		
		OrderTransSource orderTransSource = orderTransSourceFactoryForTest.newOrderTransSource();
		when(orderTransSourceServiceMapper.mapOrderTransSourceEntityToOrderTransSource(orderTransSourceEntity)).thenReturn(orderTransSource);

		// When
		OrderTransSource orderTransSourceFound = orderTransSourceService.findById(id);

		// Then
		assertEquals(orderTransSource.getId(),orderTransSourceFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<OrderTransSourceEntity> orderTransSourceEntitys = new ArrayList<OrderTransSourceEntity>();
		OrderTransSourceEntity orderTransSourceEntity1 = orderTransSourceEntityFactoryForTest.newOrderTransSourceEntity();
		orderTransSourceEntitys.add(orderTransSourceEntity1);
		OrderTransSourceEntity orderTransSourceEntity2 = orderTransSourceEntityFactoryForTest.newOrderTransSourceEntity();
		orderTransSourceEntitys.add(orderTransSourceEntity2);
		when(orderTransSourceJpaRepository.findAll()).thenReturn(orderTransSourceEntitys);
		
		OrderTransSource orderTransSource1 = orderTransSourceFactoryForTest.newOrderTransSource();
		when(orderTransSourceServiceMapper.mapOrderTransSourceEntityToOrderTransSource(orderTransSourceEntity1)).thenReturn(orderTransSource1);
		OrderTransSource orderTransSource2 = orderTransSourceFactoryForTest.newOrderTransSource();
		when(orderTransSourceServiceMapper.mapOrderTransSourceEntityToOrderTransSource(orderTransSourceEntity2)).thenReturn(orderTransSource2);

		// When
		List<OrderTransSource> orderTransSourcesFounds = orderTransSourceService.findAll();

		// Then
		assertTrue(orderTransSource1 == orderTransSourcesFounds.get(0));
		assertTrue(orderTransSource2 == orderTransSourcesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		OrderTransSource orderTransSource = orderTransSourceFactoryForTest.newOrderTransSource();

		OrderTransSourceEntity orderTransSourceEntity = orderTransSourceEntityFactoryForTest.newOrderTransSourceEntity();
		when(orderTransSourceJpaRepository.findOne(orderTransSource.getId())).thenReturn(null);
		
		orderTransSourceEntity = new OrderTransSourceEntity();
		orderTransSourceServiceMapper.mapOrderTransSourceToOrderTransSourceEntity(orderTransSource, orderTransSourceEntity);
		OrderTransSourceEntity orderTransSourceEntitySaved = orderTransSourceJpaRepository.save(orderTransSourceEntity);
		
		OrderTransSource orderTransSourceSaved = orderTransSourceFactoryForTest.newOrderTransSource();
		when(orderTransSourceServiceMapper.mapOrderTransSourceEntityToOrderTransSource(orderTransSourceEntitySaved)).thenReturn(orderTransSourceSaved);

		// When
		OrderTransSource orderTransSourceResult = orderTransSourceService.create(orderTransSource);

		// Then
		assertTrue(orderTransSourceResult == orderTransSourceSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		OrderTransSource orderTransSource = orderTransSourceFactoryForTest.newOrderTransSource();

		OrderTransSourceEntity orderTransSourceEntity = orderTransSourceEntityFactoryForTest.newOrderTransSourceEntity();
		when(orderTransSourceJpaRepository.findOne(orderTransSource.getId())).thenReturn(orderTransSourceEntity);

		// When
		Exception exception = null;
		try {
			orderTransSourceService.create(orderTransSource);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		OrderTransSource orderTransSource = orderTransSourceFactoryForTest.newOrderTransSource();

		OrderTransSourceEntity orderTransSourceEntity = orderTransSourceEntityFactoryForTest.newOrderTransSourceEntity();
		when(orderTransSourceJpaRepository.findOne(orderTransSource.getId())).thenReturn(orderTransSourceEntity);
		
		OrderTransSourceEntity orderTransSourceEntitySaved = orderTransSourceEntityFactoryForTest.newOrderTransSourceEntity();
		when(orderTransSourceJpaRepository.save(orderTransSourceEntity)).thenReturn(orderTransSourceEntitySaved);
		
		OrderTransSource orderTransSourceSaved = orderTransSourceFactoryForTest.newOrderTransSource();
		when(orderTransSourceServiceMapper.mapOrderTransSourceEntityToOrderTransSource(orderTransSourceEntitySaved)).thenReturn(orderTransSourceSaved);

		// When
		OrderTransSource orderTransSourceResult = orderTransSourceService.update(orderTransSource);

		// Then
		verify(orderTransSourceServiceMapper).mapOrderTransSourceToOrderTransSourceEntity(orderTransSource, orderTransSourceEntity);
		assertTrue(orderTransSourceResult == orderTransSourceSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		orderTransSourceService.delete(id);

		// Then
		verify(orderTransSourceJpaRepository).delete(id);
		
	}

}
