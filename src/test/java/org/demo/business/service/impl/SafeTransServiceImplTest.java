/*
 * Created on 24 Þub 2016 ( Time 16:27:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.SafeTrans;
import org.demo.bean.jpa.SafeTransEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.SafeTransServiceMapper;
import org.demo.data.repository.jpa.SafeTransJpaRepository;
import org.demo.test.SafeTransFactoryForTest;
import org.demo.test.SafeTransEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of SafeTransService
 */
@RunWith(MockitoJUnitRunner.class)
public class SafeTransServiceImplTest {

	@InjectMocks
	private SafeTransServiceImpl safeTransService;
	@Mock
	private SafeTransJpaRepository safeTransJpaRepository;
	@Mock
	private SafeTransServiceMapper safeTransServiceMapper;
	
	private SafeTransFactoryForTest safeTransFactoryForTest = new SafeTransFactoryForTest();

	private SafeTransEntityFactoryForTest safeTransEntityFactoryForTest = new SafeTransEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		SafeTransEntity safeTransEntity = safeTransJpaRepository.findOne(id);
		
		SafeTrans safeTrans = safeTransFactoryForTest.newSafeTrans();
		when(safeTransServiceMapper.mapSafeTransEntityToSafeTrans(safeTransEntity)).thenReturn(safeTrans);

		// When
		SafeTrans safeTransFound = safeTransService.findById(id);

		// Then
		assertEquals(safeTrans.getId(),safeTransFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<SafeTransEntity> safeTransEntitys = new ArrayList<SafeTransEntity>();
		SafeTransEntity safeTransEntity1 = safeTransEntityFactoryForTest.newSafeTransEntity();
		safeTransEntitys.add(safeTransEntity1);
		SafeTransEntity safeTransEntity2 = safeTransEntityFactoryForTest.newSafeTransEntity();
		safeTransEntitys.add(safeTransEntity2);
		when(safeTransJpaRepository.findAll()).thenReturn(safeTransEntitys);
		
		SafeTrans safeTrans1 = safeTransFactoryForTest.newSafeTrans();
		when(safeTransServiceMapper.mapSafeTransEntityToSafeTrans(safeTransEntity1)).thenReturn(safeTrans1);
		SafeTrans safeTrans2 = safeTransFactoryForTest.newSafeTrans();
		when(safeTransServiceMapper.mapSafeTransEntityToSafeTrans(safeTransEntity2)).thenReturn(safeTrans2);

		// When
		List<SafeTrans> safeTranssFounds = safeTransService.findAll();

		// Then
		assertTrue(safeTrans1 == safeTranssFounds.get(0));
		assertTrue(safeTrans2 == safeTranssFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		SafeTrans safeTrans = safeTransFactoryForTest.newSafeTrans();

		SafeTransEntity safeTransEntity = safeTransEntityFactoryForTest.newSafeTransEntity();
		when(safeTransJpaRepository.findOne(safeTrans.getId())).thenReturn(null);
		
		safeTransEntity = new SafeTransEntity();
		safeTransServiceMapper.mapSafeTransToSafeTransEntity(safeTrans, safeTransEntity);
		SafeTransEntity safeTransEntitySaved = safeTransJpaRepository.save(safeTransEntity);
		
		SafeTrans safeTransSaved = safeTransFactoryForTest.newSafeTrans();
		when(safeTransServiceMapper.mapSafeTransEntityToSafeTrans(safeTransEntitySaved)).thenReturn(safeTransSaved);

		// When
		SafeTrans safeTransResult = safeTransService.create(safeTrans);

		// Then
		assertTrue(safeTransResult == safeTransSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		SafeTrans safeTrans = safeTransFactoryForTest.newSafeTrans();

		SafeTransEntity safeTransEntity = safeTransEntityFactoryForTest.newSafeTransEntity();
		when(safeTransJpaRepository.findOne(safeTrans.getId())).thenReturn(safeTransEntity);

		// When
		Exception exception = null;
		try {
			safeTransService.create(safeTrans);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		SafeTrans safeTrans = safeTransFactoryForTest.newSafeTrans();

		SafeTransEntity safeTransEntity = safeTransEntityFactoryForTest.newSafeTransEntity();
		when(safeTransJpaRepository.findOne(safeTrans.getId())).thenReturn(safeTransEntity);
		
		SafeTransEntity safeTransEntitySaved = safeTransEntityFactoryForTest.newSafeTransEntity();
		when(safeTransJpaRepository.save(safeTransEntity)).thenReturn(safeTransEntitySaved);
		
		SafeTrans safeTransSaved = safeTransFactoryForTest.newSafeTrans();
		when(safeTransServiceMapper.mapSafeTransEntityToSafeTrans(safeTransEntitySaved)).thenReturn(safeTransSaved);

		// When
		SafeTrans safeTransResult = safeTransService.update(safeTrans);

		// Then
		verify(safeTransServiceMapper).mapSafeTransToSafeTransEntity(safeTrans, safeTransEntity);
		assertTrue(safeTransResult == safeTransSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		safeTransService.delete(id);

		// Then
		verify(safeTransJpaRepository).delete(id);
		
	}

}
