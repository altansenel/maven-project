/*
 * Created on 24 Þub 2016 ( Time 16:27:49 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.AdminUserRight;
import org.demo.bean.jpa.AdminUserRightEntity;
import org.demo.business.service.mapping.AdminUserRightServiceMapper;
import org.demo.data.repository.jpa.AdminUserRightJpaRepository;
import org.demo.test.AdminUserRightFactoryForTest;
import org.demo.test.AdminUserRightEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of AdminUserRightService
 */
@RunWith(MockitoJUnitRunner.class)
public class AdminUserRightServiceImplTest {

	@InjectMocks
	private AdminUserRightServiceImpl adminUserRightService;
	@Mock
	private AdminUserRightJpaRepository adminUserRightJpaRepository;
	@Mock
	private AdminUserRightServiceMapper adminUserRightServiceMapper;
	
	private AdminUserRightFactoryForTest adminUserRightFactoryForTest = new AdminUserRightFactoryForTest();

	private AdminUserRightEntityFactoryForTest adminUserRightEntityFactoryForTest = new AdminUserRightEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		AdminUserRightEntity adminUserRightEntity = adminUserRightJpaRepository.findOne(id);
		
		AdminUserRight adminUserRight = adminUserRightFactoryForTest.newAdminUserRight();
		when(adminUserRightServiceMapper.mapAdminUserRightEntityToAdminUserRight(adminUserRightEntity)).thenReturn(adminUserRight);

		// When
		AdminUserRight adminUserRightFound = adminUserRightService.findById(id);

		// Then
		assertEquals(adminUserRight.getId(),adminUserRightFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<AdminUserRightEntity> adminUserRightEntitys = new ArrayList<AdminUserRightEntity>();
		AdminUserRightEntity adminUserRightEntity1 = adminUserRightEntityFactoryForTest.newAdminUserRightEntity();
		adminUserRightEntitys.add(adminUserRightEntity1);
		AdminUserRightEntity adminUserRightEntity2 = adminUserRightEntityFactoryForTest.newAdminUserRightEntity();
		adminUserRightEntitys.add(adminUserRightEntity2);
		when(adminUserRightJpaRepository.findAll()).thenReturn(adminUserRightEntitys);
		
		AdminUserRight adminUserRight1 = adminUserRightFactoryForTest.newAdminUserRight();
		when(adminUserRightServiceMapper.mapAdminUserRightEntityToAdminUserRight(adminUserRightEntity1)).thenReturn(adminUserRight1);
		AdminUserRight adminUserRight2 = adminUserRightFactoryForTest.newAdminUserRight();
		when(adminUserRightServiceMapper.mapAdminUserRightEntityToAdminUserRight(adminUserRightEntity2)).thenReturn(adminUserRight2);

		// When
		List<AdminUserRight> adminUserRightsFounds = adminUserRightService.findAll();

		// Then
		assertTrue(adminUserRight1 == adminUserRightsFounds.get(0));
		assertTrue(adminUserRight2 == adminUserRightsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		AdminUserRight adminUserRight = adminUserRightFactoryForTest.newAdminUserRight();

		AdminUserRightEntity adminUserRightEntity = adminUserRightEntityFactoryForTest.newAdminUserRightEntity();
		when(adminUserRightJpaRepository.findOne(adminUserRight.getId())).thenReturn(null);
		
		adminUserRightEntity = new AdminUserRightEntity();
		adminUserRightServiceMapper.mapAdminUserRightToAdminUserRightEntity(adminUserRight, adminUserRightEntity);
		AdminUserRightEntity adminUserRightEntitySaved = adminUserRightJpaRepository.save(adminUserRightEntity);
		
		AdminUserRight adminUserRightSaved = adminUserRightFactoryForTest.newAdminUserRight();
		when(adminUserRightServiceMapper.mapAdminUserRightEntityToAdminUserRight(adminUserRightEntitySaved)).thenReturn(adminUserRightSaved);

		// When
		AdminUserRight adminUserRightResult = adminUserRightService.create(adminUserRight);

		// Then
		assertTrue(adminUserRightResult == adminUserRightSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		AdminUserRight adminUserRight = adminUserRightFactoryForTest.newAdminUserRight();

		AdminUserRightEntity adminUserRightEntity = adminUserRightEntityFactoryForTest.newAdminUserRightEntity();
		when(adminUserRightJpaRepository.findOne(adminUserRight.getId())).thenReturn(adminUserRightEntity);

		// When
		Exception exception = null;
		try {
			adminUserRightService.create(adminUserRight);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		AdminUserRight adminUserRight = adminUserRightFactoryForTest.newAdminUserRight();

		AdminUserRightEntity adminUserRightEntity = adminUserRightEntityFactoryForTest.newAdminUserRightEntity();
		when(adminUserRightJpaRepository.findOne(adminUserRight.getId())).thenReturn(adminUserRightEntity);
		
		AdminUserRightEntity adminUserRightEntitySaved = adminUserRightEntityFactoryForTest.newAdminUserRightEntity();
		when(adminUserRightJpaRepository.save(adminUserRightEntity)).thenReturn(adminUserRightEntitySaved);
		
		AdminUserRight adminUserRightSaved = adminUserRightFactoryForTest.newAdminUserRight();
		when(adminUserRightServiceMapper.mapAdminUserRightEntityToAdminUserRight(adminUserRightEntitySaved)).thenReturn(adminUserRightSaved);

		// When
		AdminUserRight adminUserRightResult = adminUserRightService.update(adminUserRight);

		// Then
		verify(adminUserRightServiceMapper).mapAdminUserRightToAdminUserRightEntity(adminUserRight, adminUserRightEntity);
		assertTrue(adminUserRightResult == adminUserRightSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		adminUserRightService.delete(id);

		// Then
		verify(adminUserRightJpaRepository).delete(id);
		
	}

}
