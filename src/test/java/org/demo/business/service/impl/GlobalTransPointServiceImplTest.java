/*
 * Created on 24 Þub 2016 ( Time 16:27:51 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.GlobalTransPoint;
import org.demo.bean.jpa.GlobalTransPointEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.GlobalTransPointServiceMapper;
import org.demo.data.repository.jpa.GlobalTransPointJpaRepository;
import org.demo.test.GlobalTransPointFactoryForTest;
import org.demo.test.GlobalTransPointEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of GlobalTransPointService
 */
@RunWith(MockitoJUnitRunner.class)
public class GlobalTransPointServiceImplTest {

	@InjectMocks
	private GlobalTransPointServiceImpl globalTransPointService;
	@Mock
	private GlobalTransPointJpaRepository globalTransPointJpaRepository;
	@Mock
	private GlobalTransPointServiceMapper globalTransPointServiceMapper;
	
	private GlobalTransPointFactoryForTest globalTransPointFactoryForTest = new GlobalTransPointFactoryForTest();

	private GlobalTransPointEntityFactoryForTest globalTransPointEntityFactoryForTest = new GlobalTransPointEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		GlobalTransPointEntity globalTransPointEntity = globalTransPointJpaRepository.findOne(id);
		
		GlobalTransPoint globalTransPoint = globalTransPointFactoryForTest.newGlobalTransPoint();
		when(globalTransPointServiceMapper.mapGlobalTransPointEntityToGlobalTransPoint(globalTransPointEntity)).thenReturn(globalTransPoint);

		// When
		GlobalTransPoint globalTransPointFound = globalTransPointService.findById(id);

		// Then
		assertEquals(globalTransPoint.getId(),globalTransPointFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<GlobalTransPointEntity> globalTransPointEntitys = new ArrayList<GlobalTransPointEntity>();
		GlobalTransPointEntity globalTransPointEntity1 = globalTransPointEntityFactoryForTest.newGlobalTransPointEntity();
		globalTransPointEntitys.add(globalTransPointEntity1);
		GlobalTransPointEntity globalTransPointEntity2 = globalTransPointEntityFactoryForTest.newGlobalTransPointEntity();
		globalTransPointEntitys.add(globalTransPointEntity2);
		when(globalTransPointJpaRepository.findAll()).thenReturn(globalTransPointEntitys);
		
		GlobalTransPoint globalTransPoint1 = globalTransPointFactoryForTest.newGlobalTransPoint();
		when(globalTransPointServiceMapper.mapGlobalTransPointEntityToGlobalTransPoint(globalTransPointEntity1)).thenReturn(globalTransPoint1);
		GlobalTransPoint globalTransPoint2 = globalTransPointFactoryForTest.newGlobalTransPoint();
		when(globalTransPointServiceMapper.mapGlobalTransPointEntityToGlobalTransPoint(globalTransPointEntity2)).thenReturn(globalTransPoint2);

		// When
		List<GlobalTransPoint> globalTransPointsFounds = globalTransPointService.findAll();

		// Then
		assertTrue(globalTransPoint1 == globalTransPointsFounds.get(0));
		assertTrue(globalTransPoint2 == globalTransPointsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		GlobalTransPoint globalTransPoint = globalTransPointFactoryForTest.newGlobalTransPoint();

		GlobalTransPointEntity globalTransPointEntity = globalTransPointEntityFactoryForTest.newGlobalTransPointEntity();
		when(globalTransPointJpaRepository.findOne(globalTransPoint.getId())).thenReturn(null);
		
		globalTransPointEntity = new GlobalTransPointEntity();
		globalTransPointServiceMapper.mapGlobalTransPointToGlobalTransPointEntity(globalTransPoint, globalTransPointEntity);
		GlobalTransPointEntity globalTransPointEntitySaved = globalTransPointJpaRepository.save(globalTransPointEntity);
		
		GlobalTransPoint globalTransPointSaved = globalTransPointFactoryForTest.newGlobalTransPoint();
		when(globalTransPointServiceMapper.mapGlobalTransPointEntityToGlobalTransPoint(globalTransPointEntitySaved)).thenReturn(globalTransPointSaved);

		// When
		GlobalTransPoint globalTransPointResult = globalTransPointService.create(globalTransPoint);

		// Then
		assertTrue(globalTransPointResult == globalTransPointSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		GlobalTransPoint globalTransPoint = globalTransPointFactoryForTest.newGlobalTransPoint();

		GlobalTransPointEntity globalTransPointEntity = globalTransPointEntityFactoryForTest.newGlobalTransPointEntity();
		when(globalTransPointJpaRepository.findOne(globalTransPoint.getId())).thenReturn(globalTransPointEntity);

		// When
		Exception exception = null;
		try {
			globalTransPointService.create(globalTransPoint);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		GlobalTransPoint globalTransPoint = globalTransPointFactoryForTest.newGlobalTransPoint();

		GlobalTransPointEntity globalTransPointEntity = globalTransPointEntityFactoryForTest.newGlobalTransPointEntity();
		when(globalTransPointJpaRepository.findOne(globalTransPoint.getId())).thenReturn(globalTransPointEntity);
		
		GlobalTransPointEntity globalTransPointEntitySaved = globalTransPointEntityFactoryForTest.newGlobalTransPointEntity();
		when(globalTransPointJpaRepository.save(globalTransPointEntity)).thenReturn(globalTransPointEntitySaved);
		
		GlobalTransPoint globalTransPointSaved = globalTransPointFactoryForTest.newGlobalTransPoint();
		when(globalTransPointServiceMapper.mapGlobalTransPointEntityToGlobalTransPoint(globalTransPointEntitySaved)).thenReturn(globalTransPointSaved);

		// When
		GlobalTransPoint globalTransPointResult = globalTransPointService.update(globalTransPoint);

		// Then
		verify(globalTransPointServiceMapper).mapGlobalTransPointToGlobalTransPointEntity(globalTransPoint, globalTransPointEntity);
		assertTrue(globalTransPointResult == globalTransPointSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		globalTransPointService.delete(id);

		// Then
		verify(globalTransPointJpaRepository).delete(id);
		
	}

}
