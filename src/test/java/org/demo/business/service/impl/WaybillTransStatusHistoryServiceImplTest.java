/*
 * Created on 24 Þub 2016 ( Time 16:27:53 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.WaybillTransStatusHistory;
import org.demo.bean.jpa.WaybillTransStatusHistoryEntity;
import java.util.Date;
import org.demo.business.service.mapping.WaybillTransStatusHistoryServiceMapper;
import org.demo.data.repository.jpa.WaybillTransStatusHistoryJpaRepository;
import org.demo.test.WaybillTransStatusHistoryFactoryForTest;
import org.demo.test.WaybillTransStatusHistoryEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of WaybillTransStatusHistoryService
 */
@RunWith(MockitoJUnitRunner.class)
public class WaybillTransStatusHistoryServiceImplTest {

	@InjectMocks
	private WaybillTransStatusHistoryServiceImpl waybillTransStatusHistoryService;
	@Mock
	private WaybillTransStatusHistoryJpaRepository waybillTransStatusHistoryJpaRepository;
	@Mock
	private WaybillTransStatusHistoryServiceMapper waybillTransStatusHistoryServiceMapper;
	
	private WaybillTransStatusHistoryFactoryForTest waybillTransStatusHistoryFactoryForTest = new WaybillTransStatusHistoryFactoryForTest();

	private WaybillTransStatusHistoryEntityFactoryForTest waybillTransStatusHistoryEntityFactoryForTest = new WaybillTransStatusHistoryEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		WaybillTransStatusHistoryEntity waybillTransStatusHistoryEntity = waybillTransStatusHistoryJpaRepository.findOne(id);
		
		WaybillTransStatusHistory waybillTransStatusHistory = waybillTransStatusHistoryFactoryForTest.newWaybillTransStatusHistory();
		when(waybillTransStatusHistoryServiceMapper.mapWaybillTransStatusHistoryEntityToWaybillTransStatusHistory(waybillTransStatusHistoryEntity)).thenReturn(waybillTransStatusHistory);

		// When
		WaybillTransStatusHistory waybillTransStatusHistoryFound = waybillTransStatusHistoryService.findById(id);

		// Then
		assertEquals(waybillTransStatusHistory.getId(),waybillTransStatusHistoryFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<WaybillTransStatusHistoryEntity> waybillTransStatusHistoryEntitys = new ArrayList<WaybillTransStatusHistoryEntity>();
		WaybillTransStatusHistoryEntity waybillTransStatusHistoryEntity1 = waybillTransStatusHistoryEntityFactoryForTest.newWaybillTransStatusHistoryEntity();
		waybillTransStatusHistoryEntitys.add(waybillTransStatusHistoryEntity1);
		WaybillTransStatusHistoryEntity waybillTransStatusHistoryEntity2 = waybillTransStatusHistoryEntityFactoryForTest.newWaybillTransStatusHistoryEntity();
		waybillTransStatusHistoryEntitys.add(waybillTransStatusHistoryEntity2);
		when(waybillTransStatusHistoryJpaRepository.findAll()).thenReturn(waybillTransStatusHistoryEntitys);
		
		WaybillTransStatusHistory waybillTransStatusHistory1 = waybillTransStatusHistoryFactoryForTest.newWaybillTransStatusHistory();
		when(waybillTransStatusHistoryServiceMapper.mapWaybillTransStatusHistoryEntityToWaybillTransStatusHistory(waybillTransStatusHistoryEntity1)).thenReturn(waybillTransStatusHistory1);
		WaybillTransStatusHistory waybillTransStatusHistory2 = waybillTransStatusHistoryFactoryForTest.newWaybillTransStatusHistory();
		when(waybillTransStatusHistoryServiceMapper.mapWaybillTransStatusHistoryEntityToWaybillTransStatusHistory(waybillTransStatusHistoryEntity2)).thenReturn(waybillTransStatusHistory2);

		// When
		List<WaybillTransStatusHistory> waybillTransStatusHistorysFounds = waybillTransStatusHistoryService.findAll();

		// Then
		assertTrue(waybillTransStatusHistory1 == waybillTransStatusHistorysFounds.get(0));
		assertTrue(waybillTransStatusHistory2 == waybillTransStatusHistorysFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		WaybillTransStatusHistory waybillTransStatusHistory = waybillTransStatusHistoryFactoryForTest.newWaybillTransStatusHistory();

		WaybillTransStatusHistoryEntity waybillTransStatusHistoryEntity = waybillTransStatusHistoryEntityFactoryForTest.newWaybillTransStatusHistoryEntity();
		when(waybillTransStatusHistoryJpaRepository.findOne(waybillTransStatusHistory.getId())).thenReturn(null);
		
		waybillTransStatusHistoryEntity = new WaybillTransStatusHistoryEntity();
		waybillTransStatusHistoryServiceMapper.mapWaybillTransStatusHistoryToWaybillTransStatusHistoryEntity(waybillTransStatusHistory, waybillTransStatusHistoryEntity);
		WaybillTransStatusHistoryEntity waybillTransStatusHistoryEntitySaved = waybillTransStatusHistoryJpaRepository.save(waybillTransStatusHistoryEntity);
		
		WaybillTransStatusHistory waybillTransStatusHistorySaved = waybillTransStatusHistoryFactoryForTest.newWaybillTransStatusHistory();
		when(waybillTransStatusHistoryServiceMapper.mapWaybillTransStatusHistoryEntityToWaybillTransStatusHistory(waybillTransStatusHistoryEntitySaved)).thenReturn(waybillTransStatusHistorySaved);

		// When
		WaybillTransStatusHistory waybillTransStatusHistoryResult = waybillTransStatusHistoryService.create(waybillTransStatusHistory);

		// Then
		assertTrue(waybillTransStatusHistoryResult == waybillTransStatusHistorySaved);
	}

	@Test
	public void createKOExists() {
		// Given
		WaybillTransStatusHistory waybillTransStatusHistory = waybillTransStatusHistoryFactoryForTest.newWaybillTransStatusHistory();

		WaybillTransStatusHistoryEntity waybillTransStatusHistoryEntity = waybillTransStatusHistoryEntityFactoryForTest.newWaybillTransStatusHistoryEntity();
		when(waybillTransStatusHistoryJpaRepository.findOne(waybillTransStatusHistory.getId())).thenReturn(waybillTransStatusHistoryEntity);

		// When
		Exception exception = null;
		try {
			waybillTransStatusHistoryService.create(waybillTransStatusHistory);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		WaybillTransStatusHistory waybillTransStatusHistory = waybillTransStatusHistoryFactoryForTest.newWaybillTransStatusHistory();

		WaybillTransStatusHistoryEntity waybillTransStatusHistoryEntity = waybillTransStatusHistoryEntityFactoryForTest.newWaybillTransStatusHistoryEntity();
		when(waybillTransStatusHistoryJpaRepository.findOne(waybillTransStatusHistory.getId())).thenReturn(waybillTransStatusHistoryEntity);
		
		WaybillTransStatusHistoryEntity waybillTransStatusHistoryEntitySaved = waybillTransStatusHistoryEntityFactoryForTest.newWaybillTransStatusHistoryEntity();
		when(waybillTransStatusHistoryJpaRepository.save(waybillTransStatusHistoryEntity)).thenReturn(waybillTransStatusHistoryEntitySaved);
		
		WaybillTransStatusHistory waybillTransStatusHistorySaved = waybillTransStatusHistoryFactoryForTest.newWaybillTransStatusHistory();
		when(waybillTransStatusHistoryServiceMapper.mapWaybillTransStatusHistoryEntityToWaybillTransStatusHistory(waybillTransStatusHistoryEntitySaved)).thenReturn(waybillTransStatusHistorySaved);

		// When
		WaybillTransStatusHistory waybillTransStatusHistoryResult = waybillTransStatusHistoryService.update(waybillTransStatusHistory);

		// Then
		verify(waybillTransStatusHistoryServiceMapper).mapWaybillTransStatusHistoryToWaybillTransStatusHistoryEntity(waybillTransStatusHistory, waybillTransStatusHistoryEntity);
		assertTrue(waybillTransStatusHistoryResult == waybillTransStatusHistorySaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		waybillTransStatusHistoryService.delete(id);

		// Then
		verify(waybillTransStatusHistoryJpaRepository).delete(id);
		
	}

}
