/*
 * Created on 24 Þub 2016 ( Time 16:27:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.StockCosting;
import org.demo.bean.jpa.StockCostingEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.StockCostingServiceMapper;
import org.demo.data.repository.jpa.StockCostingJpaRepository;
import org.demo.test.StockCostingFactoryForTest;
import org.demo.test.StockCostingEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of StockCostingService
 */
@RunWith(MockitoJUnitRunner.class)
public class StockCostingServiceImplTest {

	@InjectMocks
	private StockCostingServiceImpl stockCostingService;
	@Mock
	private StockCostingJpaRepository stockCostingJpaRepository;
	@Mock
	private StockCostingServiceMapper stockCostingServiceMapper;
	
	private StockCostingFactoryForTest stockCostingFactoryForTest = new StockCostingFactoryForTest();

	private StockCostingEntityFactoryForTest stockCostingEntityFactoryForTest = new StockCostingEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		StockCostingEntity stockCostingEntity = stockCostingJpaRepository.findOne(id);
		
		StockCosting stockCosting = stockCostingFactoryForTest.newStockCosting();
		when(stockCostingServiceMapper.mapStockCostingEntityToStockCosting(stockCostingEntity)).thenReturn(stockCosting);

		// When
		StockCosting stockCostingFound = stockCostingService.findById(id);

		// Then
		assertEquals(stockCosting.getId(),stockCostingFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<StockCostingEntity> stockCostingEntitys = new ArrayList<StockCostingEntity>();
		StockCostingEntity stockCostingEntity1 = stockCostingEntityFactoryForTest.newStockCostingEntity();
		stockCostingEntitys.add(stockCostingEntity1);
		StockCostingEntity stockCostingEntity2 = stockCostingEntityFactoryForTest.newStockCostingEntity();
		stockCostingEntitys.add(stockCostingEntity2);
		when(stockCostingJpaRepository.findAll()).thenReturn(stockCostingEntitys);
		
		StockCosting stockCosting1 = stockCostingFactoryForTest.newStockCosting();
		when(stockCostingServiceMapper.mapStockCostingEntityToStockCosting(stockCostingEntity1)).thenReturn(stockCosting1);
		StockCosting stockCosting2 = stockCostingFactoryForTest.newStockCosting();
		when(stockCostingServiceMapper.mapStockCostingEntityToStockCosting(stockCostingEntity2)).thenReturn(stockCosting2);

		// When
		List<StockCosting> stockCostingsFounds = stockCostingService.findAll();

		// Then
		assertTrue(stockCosting1 == stockCostingsFounds.get(0));
		assertTrue(stockCosting2 == stockCostingsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		StockCosting stockCosting = stockCostingFactoryForTest.newStockCosting();

		StockCostingEntity stockCostingEntity = stockCostingEntityFactoryForTest.newStockCostingEntity();
		when(stockCostingJpaRepository.findOne(stockCosting.getId())).thenReturn(null);
		
		stockCostingEntity = new StockCostingEntity();
		stockCostingServiceMapper.mapStockCostingToStockCostingEntity(stockCosting, stockCostingEntity);
		StockCostingEntity stockCostingEntitySaved = stockCostingJpaRepository.save(stockCostingEntity);
		
		StockCosting stockCostingSaved = stockCostingFactoryForTest.newStockCosting();
		when(stockCostingServiceMapper.mapStockCostingEntityToStockCosting(stockCostingEntitySaved)).thenReturn(stockCostingSaved);

		// When
		StockCosting stockCostingResult = stockCostingService.create(stockCosting);

		// Then
		assertTrue(stockCostingResult == stockCostingSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		StockCosting stockCosting = stockCostingFactoryForTest.newStockCosting();

		StockCostingEntity stockCostingEntity = stockCostingEntityFactoryForTest.newStockCostingEntity();
		when(stockCostingJpaRepository.findOne(stockCosting.getId())).thenReturn(stockCostingEntity);

		// When
		Exception exception = null;
		try {
			stockCostingService.create(stockCosting);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		StockCosting stockCosting = stockCostingFactoryForTest.newStockCosting();

		StockCostingEntity stockCostingEntity = stockCostingEntityFactoryForTest.newStockCostingEntity();
		when(stockCostingJpaRepository.findOne(stockCosting.getId())).thenReturn(stockCostingEntity);
		
		StockCostingEntity stockCostingEntitySaved = stockCostingEntityFactoryForTest.newStockCostingEntity();
		when(stockCostingJpaRepository.save(stockCostingEntity)).thenReturn(stockCostingEntitySaved);
		
		StockCosting stockCostingSaved = stockCostingFactoryForTest.newStockCosting();
		when(stockCostingServiceMapper.mapStockCostingEntityToStockCosting(stockCostingEntitySaved)).thenReturn(stockCostingSaved);

		// When
		StockCosting stockCostingResult = stockCostingService.update(stockCosting);

		// Then
		verify(stockCostingServiceMapper).mapStockCostingToStockCostingEntity(stockCosting, stockCostingEntity);
		assertTrue(stockCostingResult == stockCostingSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		stockCostingService.delete(id);

		// Then
		verify(stockCostingJpaRepository).delete(id);
		
	}

}
