/*
 * Created on 24 Þub 2016 ( Time 16:27:49 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.BankExpense;
import org.demo.bean.jpa.BankExpenseEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.BankExpenseServiceMapper;
import org.demo.data.repository.jpa.BankExpenseJpaRepository;
import org.demo.test.BankExpenseFactoryForTest;
import org.demo.test.BankExpenseEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of BankExpenseService
 */
@RunWith(MockitoJUnitRunner.class)
public class BankExpenseServiceImplTest {

	@InjectMocks
	private BankExpenseServiceImpl bankExpenseService;
	@Mock
	private BankExpenseJpaRepository bankExpenseJpaRepository;
	@Mock
	private BankExpenseServiceMapper bankExpenseServiceMapper;
	
	private BankExpenseFactoryForTest bankExpenseFactoryForTest = new BankExpenseFactoryForTest();

	private BankExpenseEntityFactoryForTest bankExpenseEntityFactoryForTest = new BankExpenseEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		BankExpenseEntity bankExpenseEntity = bankExpenseJpaRepository.findOne(id);
		
		BankExpense bankExpense = bankExpenseFactoryForTest.newBankExpense();
		when(bankExpenseServiceMapper.mapBankExpenseEntityToBankExpense(bankExpenseEntity)).thenReturn(bankExpense);

		// When
		BankExpense bankExpenseFound = bankExpenseService.findById(id);

		// Then
		assertEquals(bankExpense.getId(),bankExpenseFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<BankExpenseEntity> bankExpenseEntitys = new ArrayList<BankExpenseEntity>();
		BankExpenseEntity bankExpenseEntity1 = bankExpenseEntityFactoryForTest.newBankExpenseEntity();
		bankExpenseEntitys.add(bankExpenseEntity1);
		BankExpenseEntity bankExpenseEntity2 = bankExpenseEntityFactoryForTest.newBankExpenseEntity();
		bankExpenseEntitys.add(bankExpenseEntity2);
		when(bankExpenseJpaRepository.findAll()).thenReturn(bankExpenseEntitys);
		
		BankExpense bankExpense1 = bankExpenseFactoryForTest.newBankExpense();
		when(bankExpenseServiceMapper.mapBankExpenseEntityToBankExpense(bankExpenseEntity1)).thenReturn(bankExpense1);
		BankExpense bankExpense2 = bankExpenseFactoryForTest.newBankExpense();
		when(bankExpenseServiceMapper.mapBankExpenseEntityToBankExpense(bankExpenseEntity2)).thenReturn(bankExpense2);

		// When
		List<BankExpense> bankExpensesFounds = bankExpenseService.findAll();

		// Then
		assertTrue(bankExpense1 == bankExpensesFounds.get(0));
		assertTrue(bankExpense2 == bankExpensesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		BankExpense bankExpense = bankExpenseFactoryForTest.newBankExpense();

		BankExpenseEntity bankExpenseEntity = bankExpenseEntityFactoryForTest.newBankExpenseEntity();
		when(bankExpenseJpaRepository.findOne(bankExpense.getId())).thenReturn(null);
		
		bankExpenseEntity = new BankExpenseEntity();
		bankExpenseServiceMapper.mapBankExpenseToBankExpenseEntity(bankExpense, bankExpenseEntity);
		BankExpenseEntity bankExpenseEntitySaved = bankExpenseJpaRepository.save(bankExpenseEntity);
		
		BankExpense bankExpenseSaved = bankExpenseFactoryForTest.newBankExpense();
		when(bankExpenseServiceMapper.mapBankExpenseEntityToBankExpense(bankExpenseEntitySaved)).thenReturn(bankExpenseSaved);

		// When
		BankExpense bankExpenseResult = bankExpenseService.create(bankExpense);

		// Then
		assertTrue(bankExpenseResult == bankExpenseSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		BankExpense bankExpense = bankExpenseFactoryForTest.newBankExpense();

		BankExpenseEntity bankExpenseEntity = bankExpenseEntityFactoryForTest.newBankExpenseEntity();
		when(bankExpenseJpaRepository.findOne(bankExpense.getId())).thenReturn(bankExpenseEntity);

		// When
		Exception exception = null;
		try {
			bankExpenseService.create(bankExpense);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		BankExpense bankExpense = bankExpenseFactoryForTest.newBankExpense();

		BankExpenseEntity bankExpenseEntity = bankExpenseEntityFactoryForTest.newBankExpenseEntity();
		when(bankExpenseJpaRepository.findOne(bankExpense.getId())).thenReturn(bankExpenseEntity);
		
		BankExpenseEntity bankExpenseEntitySaved = bankExpenseEntityFactoryForTest.newBankExpenseEntity();
		when(bankExpenseJpaRepository.save(bankExpenseEntity)).thenReturn(bankExpenseEntitySaved);
		
		BankExpense bankExpenseSaved = bankExpenseFactoryForTest.newBankExpense();
		when(bankExpenseServiceMapper.mapBankExpenseEntityToBankExpense(bankExpenseEntitySaved)).thenReturn(bankExpenseSaved);

		// When
		BankExpense bankExpenseResult = bankExpenseService.update(bankExpense);

		// Then
		verify(bankExpenseServiceMapper).mapBankExpenseToBankExpenseEntity(bankExpense, bankExpenseEntity);
		assertTrue(bankExpenseResult == bankExpenseSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		bankExpenseService.delete(id);

		// Then
		verify(bankExpenseJpaRepository).delete(id);
		
	}

}
