/*
 * Created on 24 Þub 2016 ( Time 16:27:53 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.WaybillTransFactor;
import org.demo.bean.jpa.WaybillTransFactorEntity;
import org.demo.business.service.mapping.WaybillTransFactorServiceMapper;
import org.demo.data.repository.jpa.WaybillTransFactorJpaRepository;
import org.demo.test.WaybillTransFactorFactoryForTest;
import org.demo.test.WaybillTransFactorEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of WaybillTransFactorService
 */
@RunWith(MockitoJUnitRunner.class)
public class WaybillTransFactorServiceImplTest {

	@InjectMocks
	private WaybillTransFactorServiceImpl waybillTransFactorService;
	@Mock
	private WaybillTransFactorJpaRepository waybillTransFactorJpaRepository;
	@Mock
	private WaybillTransFactorServiceMapper waybillTransFactorServiceMapper;
	
	private WaybillTransFactorFactoryForTest waybillTransFactorFactoryForTest = new WaybillTransFactorFactoryForTest();

	private WaybillTransFactorEntityFactoryForTest waybillTransFactorEntityFactoryForTest = new WaybillTransFactorEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		WaybillTransFactorEntity waybillTransFactorEntity = waybillTransFactorJpaRepository.findOne(id);
		
		WaybillTransFactor waybillTransFactor = waybillTransFactorFactoryForTest.newWaybillTransFactor();
		when(waybillTransFactorServiceMapper.mapWaybillTransFactorEntityToWaybillTransFactor(waybillTransFactorEntity)).thenReturn(waybillTransFactor);

		// When
		WaybillTransFactor waybillTransFactorFound = waybillTransFactorService.findById(id);

		// Then
		assertEquals(waybillTransFactor.getId(),waybillTransFactorFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<WaybillTransFactorEntity> waybillTransFactorEntitys = new ArrayList<WaybillTransFactorEntity>();
		WaybillTransFactorEntity waybillTransFactorEntity1 = waybillTransFactorEntityFactoryForTest.newWaybillTransFactorEntity();
		waybillTransFactorEntitys.add(waybillTransFactorEntity1);
		WaybillTransFactorEntity waybillTransFactorEntity2 = waybillTransFactorEntityFactoryForTest.newWaybillTransFactorEntity();
		waybillTransFactorEntitys.add(waybillTransFactorEntity2);
		when(waybillTransFactorJpaRepository.findAll()).thenReturn(waybillTransFactorEntitys);
		
		WaybillTransFactor waybillTransFactor1 = waybillTransFactorFactoryForTest.newWaybillTransFactor();
		when(waybillTransFactorServiceMapper.mapWaybillTransFactorEntityToWaybillTransFactor(waybillTransFactorEntity1)).thenReturn(waybillTransFactor1);
		WaybillTransFactor waybillTransFactor2 = waybillTransFactorFactoryForTest.newWaybillTransFactor();
		when(waybillTransFactorServiceMapper.mapWaybillTransFactorEntityToWaybillTransFactor(waybillTransFactorEntity2)).thenReturn(waybillTransFactor2);

		// When
		List<WaybillTransFactor> waybillTransFactorsFounds = waybillTransFactorService.findAll();

		// Then
		assertTrue(waybillTransFactor1 == waybillTransFactorsFounds.get(0));
		assertTrue(waybillTransFactor2 == waybillTransFactorsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		WaybillTransFactor waybillTransFactor = waybillTransFactorFactoryForTest.newWaybillTransFactor();

		WaybillTransFactorEntity waybillTransFactorEntity = waybillTransFactorEntityFactoryForTest.newWaybillTransFactorEntity();
		when(waybillTransFactorJpaRepository.findOne(waybillTransFactor.getId())).thenReturn(null);
		
		waybillTransFactorEntity = new WaybillTransFactorEntity();
		waybillTransFactorServiceMapper.mapWaybillTransFactorToWaybillTransFactorEntity(waybillTransFactor, waybillTransFactorEntity);
		WaybillTransFactorEntity waybillTransFactorEntitySaved = waybillTransFactorJpaRepository.save(waybillTransFactorEntity);
		
		WaybillTransFactor waybillTransFactorSaved = waybillTransFactorFactoryForTest.newWaybillTransFactor();
		when(waybillTransFactorServiceMapper.mapWaybillTransFactorEntityToWaybillTransFactor(waybillTransFactorEntitySaved)).thenReturn(waybillTransFactorSaved);

		// When
		WaybillTransFactor waybillTransFactorResult = waybillTransFactorService.create(waybillTransFactor);

		// Then
		assertTrue(waybillTransFactorResult == waybillTransFactorSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		WaybillTransFactor waybillTransFactor = waybillTransFactorFactoryForTest.newWaybillTransFactor();

		WaybillTransFactorEntity waybillTransFactorEntity = waybillTransFactorEntityFactoryForTest.newWaybillTransFactorEntity();
		when(waybillTransFactorJpaRepository.findOne(waybillTransFactor.getId())).thenReturn(waybillTransFactorEntity);

		// When
		Exception exception = null;
		try {
			waybillTransFactorService.create(waybillTransFactor);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		WaybillTransFactor waybillTransFactor = waybillTransFactorFactoryForTest.newWaybillTransFactor();

		WaybillTransFactorEntity waybillTransFactorEntity = waybillTransFactorEntityFactoryForTest.newWaybillTransFactorEntity();
		when(waybillTransFactorJpaRepository.findOne(waybillTransFactor.getId())).thenReturn(waybillTransFactorEntity);
		
		WaybillTransFactorEntity waybillTransFactorEntitySaved = waybillTransFactorEntityFactoryForTest.newWaybillTransFactorEntity();
		when(waybillTransFactorJpaRepository.save(waybillTransFactorEntity)).thenReturn(waybillTransFactorEntitySaved);
		
		WaybillTransFactor waybillTransFactorSaved = waybillTransFactorFactoryForTest.newWaybillTransFactor();
		when(waybillTransFactorServiceMapper.mapWaybillTransFactorEntityToWaybillTransFactor(waybillTransFactorEntitySaved)).thenReturn(waybillTransFactorSaved);

		// When
		WaybillTransFactor waybillTransFactorResult = waybillTransFactorService.update(waybillTransFactor);

		// Then
		verify(waybillTransFactorServiceMapper).mapWaybillTransFactorToWaybillTransFactorEntity(waybillTransFactor, waybillTransFactorEntity);
		assertTrue(waybillTransFactorResult == waybillTransFactorSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		waybillTransFactorService.delete(id);

		// Then
		verify(waybillTransFactorJpaRepository).delete(id);
		
	}

}
