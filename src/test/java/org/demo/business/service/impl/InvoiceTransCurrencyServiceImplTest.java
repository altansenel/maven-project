/*
 * Created on 24 Þub 2016 ( Time 16:27:51 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.InvoiceTransCurrency;
import org.demo.bean.jpa.InvoiceTransCurrencyEntity;
import org.demo.business.service.mapping.InvoiceTransCurrencyServiceMapper;
import org.demo.data.repository.jpa.InvoiceTransCurrencyJpaRepository;
import org.demo.test.InvoiceTransCurrencyFactoryForTest;
import org.demo.test.InvoiceTransCurrencyEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of InvoiceTransCurrencyService
 */
@RunWith(MockitoJUnitRunner.class)
public class InvoiceTransCurrencyServiceImplTest {

	@InjectMocks
	private InvoiceTransCurrencyServiceImpl invoiceTransCurrencyService;
	@Mock
	private InvoiceTransCurrencyJpaRepository invoiceTransCurrencyJpaRepository;
	@Mock
	private InvoiceTransCurrencyServiceMapper invoiceTransCurrencyServiceMapper;
	
	private InvoiceTransCurrencyFactoryForTest invoiceTransCurrencyFactoryForTest = new InvoiceTransCurrencyFactoryForTest();

	private InvoiceTransCurrencyEntityFactoryForTest invoiceTransCurrencyEntityFactoryForTest = new InvoiceTransCurrencyEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		InvoiceTransCurrencyEntity invoiceTransCurrencyEntity = invoiceTransCurrencyJpaRepository.findOne(id);
		
		InvoiceTransCurrency invoiceTransCurrency = invoiceTransCurrencyFactoryForTest.newInvoiceTransCurrency();
		when(invoiceTransCurrencyServiceMapper.mapInvoiceTransCurrencyEntityToInvoiceTransCurrency(invoiceTransCurrencyEntity)).thenReturn(invoiceTransCurrency);

		// When
		InvoiceTransCurrency invoiceTransCurrencyFound = invoiceTransCurrencyService.findById(id);

		// Then
		assertEquals(invoiceTransCurrency.getId(),invoiceTransCurrencyFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<InvoiceTransCurrencyEntity> invoiceTransCurrencyEntitys = new ArrayList<InvoiceTransCurrencyEntity>();
		InvoiceTransCurrencyEntity invoiceTransCurrencyEntity1 = invoiceTransCurrencyEntityFactoryForTest.newInvoiceTransCurrencyEntity();
		invoiceTransCurrencyEntitys.add(invoiceTransCurrencyEntity1);
		InvoiceTransCurrencyEntity invoiceTransCurrencyEntity2 = invoiceTransCurrencyEntityFactoryForTest.newInvoiceTransCurrencyEntity();
		invoiceTransCurrencyEntitys.add(invoiceTransCurrencyEntity2);
		when(invoiceTransCurrencyJpaRepository.findAll()).thenReturn(invoiceTransCurrencyEntitys);
		
		InvoiceTransCurrency invoiceTransCurrency1 = invoiceTransCurrencyFactoryForTest.newInvoiceTransCurrency();
		when(invoiceTransCurrencyServiceMapper.mapInvoiceTransCurrencyEntityToInvoiceTransCurrency(invoiceTransCurrencyEntity1)).thenReturn(invoiceTransCurrency1);
		InvoiceTransCurrency invoiceTransCurrency2 = invoiceTransCurrencyFactoryForTest.newInvoiceTransCurrency();
		when(invoiceTransCurrencyServiceMapper.mapInvoiceTransCurrencyEntityToInvoiceTransCurrency(invoiceTransCurrencyEntity2)).thenReturn(invoiceTransCurrency2);

		// When
		List<InvoiceTransCurrency> invoiceTransCurrencysFounds = invoiceTransCurrencyService.findAll();

		// Then
		assertTrue(invoiceTransCurrency1 == invoiceTransCurrencysFounds.get(0));
		assertTrue(invoiceTransCurrency2 == invoiceTransCurrencysFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		InvoiceTransCurrency invoiceTransCurrency = invoiceTransCurrencyFactoryForTest.newInvoiceTransCurrency();

		InvoiceTransCurrencyEntity invoiceTransCurrencyEntity = invoiceTransCurrencyEntityFactoryForTest.newInvoiceTransCurrencyEntity();
		when(invoiceTransCurrencyJpaRepository.findOne(invoiceTransCurrency.getId())).thenReturn(null);
		
		invoiceTransCurrencyEntity = new InvoiceTransCurrencyEntity();
		invoiceTransCurrencyServiceMapper.mapInvoiceTransCurrencyToInvoiceTransCurrencyEntity(invoiceTransCurrency, invoiceTransCurrencyEntity);
		InvoiceTransCurrencyEntity invoiceTransCurrencyEntitySaved = invoiceTransCurrencyJpaRepository.save(invoiceTransCurrencyEntity);
		
		InvoiceTransCurrency invoiceTransCurrencySaved = invoiceTransCurrencyFactoryForTest.newInvoiceTransCurrency();
		when(invoiceTransCurrencyServiceMapper.mapInvoiceTransCurrencyEntityToInvoiceTransCurrency(invoiceTransCurrencyEntitySaved)).thenReturn(invoiceTransCurrencySaved);

		// When
		InvoiceTransCurrency invoiceTransCurrencyResult = invoiceTransCurrencyService.create(invoiceTransCurrency);

		// Then
		assertTrue(invoiceTransCurrencyResult == invoiceTransCurrencySaved);
	}

	@Test
	public void createKOExists() {
		// Given
		InvoiceTransCurrency invoiceTransCurrency = invoiceTransCurrencyFactoryForTest.newInvoiceTransCurrency();

		InvoiceTransCurrencyEntity invoiceTransCurrencyEntity = invoiceTransCurrencyEntityFactoryForTest.newInvoiceTransCurrencyEntity();
		when(invoiceTransCurrencyJpaRepository.findOne(invoiceTransCurrency.getId())).thenReturn(invoiceTransCurrencyEntity);

		// When
		Exception exception = null;
		try {
			invoiceTransCurrencyService.create(invoiceTransCurrency);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		InvoiceTransCurrency invoiceTransCurrency = invoiceTransCurrencyFactoryForTest.newInvoiceTransCurrency();

		InvoiceTransCurrencyEntity invoiceTransCurrencyEntity = invoiceTransCurrencyEntityFactoryForTest.newInvoiceTransCurrencyEntity();
		when(invoiceTransCurrencyJpaRepository.findOne(invoiceTransCurrency.getId())).thenReturn(invoiceTransCurrencyEntity);
		
		InvoiceTransCurrencyEntity invoiceTransCurrencyEntitySaved = invoiceTransCurrencyEntityFactoryForTest.newInvoiceTransCurrencyEntity();
		when(invoiceTransCurrencyJpaRepository.save(invoiceTransCurrencyEntity)).thenReturn(invoiceTransCurrencyEntitySaved);
		
		InvoiceTransCurrency invoiceTransCurrencySaved = invoiceTransCurrencyFactoryForTest.newInvoiceTransCurrency();
		when(invoiceTransCurrencyServiceMapper.mapInvoiceTransCurrencyEntityToInvoiceTransCurrency(invoiceTransCurrencyEntitySaved)).thenReturn(invoiceTransCurrencySaved);

		// When
		InvoiceTransCurrency invoiceTransCurrencyResult = invoiceTransCurrencyService.update(invoiceTransCurrency);

		// Then
		verify(invoiceTransCurrencyServiceMapper).mapInvoiceTransCurrencyToInvoiceTransCurrencyEntity(invoiceTransCurrency, invoiceTransCurrencyEntity);
		assertTrue(invoiceTransCurrencyResult == invoiceTransCurrencySaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		invoiceTransCurrencyService.delete(id);

		// Then
		verify(invoiceTransCurrencyJpaRepository).delete(id);
		
	}

}
