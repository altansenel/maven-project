/*
 * Created on 24 Þub 2016 ( Time 16:27:53 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.StockTransSource;
import org.demo.bean.jpa.StockTransSourceEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.StockTransSourceServiceMapper;
import org.demo.data.repository.jpa.StockTransSourceJpaRepository;
import org.demo.test.StockTransSourceFactoryForTest;
import org.demo.test.StockTransSourceEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of StockTransSourceService
 */
@RunWith(MockitoJUnitRunner.class)
public class StockTransSourceServiceImplTest {

	@InjectMocks
	private StockTransSourceServiceImpl stockTransSourceService;
	@Mock
	private StockTransSourceJpaRepository stockTransSourceJpaRepository;
	@Mock
	private StockTransSourceServiceMapper stockTransSourceServiceMapper;
	
	private StockTransSourceFactoryForTest stockTransSourceFactoryForTest = new StockTransSourceFactoryForTest();

	private StockTransSourceEntityFactoryForTest stockTransSourceEntityFactoryForTest = new StockTransSourceEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		StockTransSourceEntity stockTransSourceEntity = stockTransSourceJpaRepository.findOne(id);
		
		StockTransSource stockTransSource = stockTransSourceFactoryForTest.newStockTransSource();
		when(stockTransSourceServiceMapper.mapStockTransSourceEntityToStockTransSource(stockTransSourceEntity)).thenReturn(stockTransSource);

		// When
		StockTransSource stockTransSourceFound = stockTransSourceService.findById(id);

		// Then
		assertEquals(stockTransSource.getId(),stockTransSourceFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<StockTransSourceEntity> stockTransSourceEntitys = new ArrayList<StockTransSourceEntity>();
		StockTransSourceEntity stockTransSourceEntity1 = stockTransSourceEntityFactoryForTest.newStockTransSourceEntity();
		stockTransSourceEntitys.add(stockTransSourceEntity1);
		StockTransSourceEntity stockTransSourceEntity2 = stockTransSourceEntityFactoryForTest.newStockTransSourceEntity();
		stockTransSourceEntitys.add(stockTransSourceEntity2);
		when(stockTransSourceJpaRepository.findAll()).thenReturn(stockTransSourceEntitys);
		
		StockTransSource stockTransSource1 = stockTransSourceFactoryForTest.newStockTransSource();
		when(stockTransSourceServiceMapper.mapStockTransSourceEntityToStockTransSource(stockTransSourceEntity1)).thenReturn(stockTransSource1);
		StockTransSource stockTransSource2 = stockTransSourceFactoryForTest.newStockTransSource();
		when(stockTransSourceServiceMapper.mapStockTransSourceEntityToStockTransSource(stockTransSourceEntity2)).thenReturn(stockTransSource2);

		// When
		List<StockTransSource> stockTransSourcesFounds = stockTransSourceService.findAll();

		// Then
		assertTrue(stockTransSource1 == stockTransSourcesFounds.get(0));
		assertTrue(stockTransSource2 == stockTransSourcesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		StockTransSource stockTransSource = stockTransSourceFactoryForTest.newStockTransSource();

		StockTransSourceEntity stockTransSourceEntity = stockTransSourceEntityFactoryForTest.newStockTransSourceEntity();
		when(stockTransSourceJpaRepository.findOne(stockTransSource.getId())).thenReturn(null);
		
		stockTransSourceEntity = new StockTransSourceEntity();
		stockTransSourceServiceMapper.mapStockTransSourceToStockTransSourceEntity(stockTransSource, stockTransSourceEntity);
		StockTransSourceEntity stockTransSourceEntitySaved = stockTransSourceJpaRepository.save(stockTransSourceEntity);
		
		StockTransSource stockTransSourceSaved = stockTransSourceFactoryForTest.newStockTransSource();
		when(stockTransSourceServiceMapper.mapStockTransSourceEntityToStockTransSource(stockTransSourceEntitySaved)).thenReturn(stockTransSourceSaved);

		// When
		StockTransSource stockTransSourceResult = stockTransSourceService.create(stockTransSource);

		// Then
		assertTrue(stockTransSourceResult == stockTransSourceSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		StockTransSource stockTransSource = stockTransSourceFactoryForTest.newStockTransSource();

		StockTransSourceEntity stockTransSourceEntity = stockTransSourceEntityFactoryForTest.newStockTransSourceEntity();
		when(stockTransSourceJpaRepository.findOne(stockTransSource.getId())).thenReturn(stockTransSourceEntity);

		// When
		Exception exception = null;
		try {
			stockTransSourceService.create(stockTransSource);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		StockTransSource stockTransSource = stockTransSourceFactoryForTest.newStockTransSource();

		StockTransSourceEntity stockTransSourceEntity = stockTransSourceEntityFactoryForTest.newStockTransSourceEntity();
		when(stockTransSourceJpaRepository.findOne(stockTransSource.getId())).thenReturn(stockTransSourceEntity);
		
		StockTransSourceEntity stockTransSourceEntitySaved = stockTransSourceEntityFactoryForTest.newStockTransSourceEntity();
		when(stockTransSourceJpaRepository.save(stockTransSourceEntity)).thenReturn(stockTransSourceEntitySaved);
		
		StockTransSource stockTransSourceSaved = stockTransSourceFactoryForTest.newStockTransSource();
		when(stockTransSourceServiceMapper.mapStockTransSourceEntityToStockTransSource(stockTransSourceEntitySaved)).thenReturn(stockTransSourceSaved);

		// When
		StockTransSource stockTransSourceResult = stockTransSourceService.update(stockTransSource);

		// Then
		verify(stockTransSourceServiceMapper).mapStockTransSourceToStockTransSourceEntity(stockTransSource, stockTransSourceEntity);
		assertTrue(stockTransSourceResult == stockTransSourceSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		stockTransSourceService.delete(id);

		// Then
		verify(stockTransSourceJpaRepository).delete(id);
		
	}

}
