/*
 * Created on 24 Þub 2016 ( Time 16:27:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.SaleCampaign;
import org.demo.bean.jpa.SaleCampaignEntity;
import java.util.Date;
import org.demo.business.service.mapping.SaleCampaignServiceMapper;
import org.demo.data.repository.jpa.SaleCampaignJpaRepository;
import org.demo.test.SaleCampaignFactoryForTest;
import org.demo.test.SaleCampaignEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of SaleCampaignService
 */
@RunWith(MockitoJUnitRunner.class)
public class SaleCampaignServiceImplTest {

	@InjectMocks
	private SaleCampaignServiceImpl saleCampaignService;
	@Mock
	private SaleCampaignJpaRepository saleCampaignJpaRepository;
	@Mock
	private SaleCampaignServiceMapper saleCampaignServiceMapper;
	
	private SaleCampaignFactoryForTest saleCampaignFactoryForTest = new SaleCampaignFactoryForTest();

	private SaleCampaignEntityFactoryForTest saleCampaignEntityFactoryForTest = new SaleCampaignEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		SaleCampaignEntity saleCampaignEntity = saleCampaignJpaRepository.findOne(id);
		
		SaleCampaign saleCampaign = saleCampaignFactoryForTest.newSaleCampaign();
		when(saleCampaignServiceMapper.mapSaleCampaignEntityToSaleCampaign(saleCampaignEntity)).thenReturn(saleCampaign);

		// When
		SaleCampaign saleCampaignFound = saleCampaignService.findById(id);

		// Then
		assertEquals(saleCampaign.getId(),saleCampaignFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<SaleCampaignEntity> saleCampaignEntitys = new ArrayList<SaleCampaignEntity>();
		SaleCampaignEntity saleCampaignEntity1 = saleCampaignEntityFactoryForTest.newSaleCampaignEntity();
		saleCampaignEntitys.add(saleCampaignEntity1);
		SaleCampaignEntity saleCampaignEntity2 = saleCampaignEntityFactoryForTest.newSaleCampaignEntity();
		saleCampaignEntitys.add(saleCampaignEntity2);
		when(saleCampaignJpaRepository.findAll()).thenReturn(saleCampaignEntitys);
		
		SaleCampaign saleCampaign1 = saleCampaignFactoryForTest.newSaleCampaign();
		when(saleCampaignServiceMapper.mapSaleCampaignEntityToSaleCampaign(saleCampaignEntity1)).thenReturn(saleCampaign1);
		SaleCampaign saleCampaign2 = saleCampaignFactoryForTest.newSaleCampaign();
		when(saleCampaignServiceMapper.mapSaleCampaignEntityToSaleCampaign(saleCampaignEntity2)).thenReturn(saleCampaign2);

		// When
		List<SaleCampaign> saleCampaignsFounds = saleCampaignService.findAll();

		// Then
		assertTrue(saleCampaign1 == saleCampaignsFounds.get(0));
		assertTrue(saleCampaign2 == saleCampaignsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		SaleCampaign saleCampaign = saleCampaignFactoryForTest.newSaleCampaign();

		SaleCampaignEntity saleCampaignEntity = saleCampaignEntityFactoryForTest.newSaleCampaignEntity();
		when(saleCampaignJpaRepository.findOne(saleCampaign.getId())).thenReturn(null);
		
		saleCampaignEntity = new SaleCampaignEntity();
		saleCampaignServiceMapper.mapSaleCampaignToSaleCampaignEntity(saleCampaign, saleCampaignEntity);
		SaleCampaignEntity saleCampaignEntitySaved = saleCampaignJpaRepository.save(saleCampaignEntity);
		
		SaleCampaign saleCampaignSaved = saleCampaignFactoryForTest.newSaleCampaign();
		when(saleCampaignServiceMapper.mapSaleCampaignEntityToSaleCampaign(saleCampaignEntitySaved)).thenReturn(saleCampaignSaved);

		// When
		SaleCampaign saleCampaignResult = saleCampaignService.create(saleCampaign);

		// Then
		assertTrue(saleCampaignResult == saleCampaignSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		SaleCampaign saleCampaign = saleCampaignFactoryForTest.newSaleCampaign();

		SaleCampaignEntity saleCampaignEntity = saleCampaignEntityFactoryForTest.newSaleCampaignEntity();
		when(saleCampaignJpaRepository.findOne(saleCampaign.getId())).thenReturn(saleCampaignEntity);

		// When
		Exception exception = null;
		try {
			saleCampaignService.create(saleCampaign);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		SaleCampaign saleCampaign = saleCampaignFactoryForTest.newSaleCampaign();

		SaleCampaignEntity saleCampaignEntity = saleCampaignEntityFactoryForTest.newSaleCampaignEntity();
		when(saleCampaignJpaRepository.findOne(saleCampaign.getId())).thenReturn(saleCampaignEntity);
		
		SaleCampaignEntity saleCampaignEntitySaved = saleCampaignEntityFactoryForTest.newSaleCampaignEntity();
		when(saleCampaignJpaRepository.save(saleCampaignEntity)).thenReturn(saleCampaignEntitySaved);
		
		SaleCampaign saleCampaignSaved = saleCampaignFactoryForTest.newSaleCampaign();
		when(saleCampaignServiceMapper.mapSaleCampaignEntityToSaleCampaign(saleCampaignEntitySaved)).thenReturn(saleCampaignSaved);

		// When
		SaleCampaign saleCampaignResult = saleCampaignService.update(saleCampaign);

		// Then
		verify(saleCampaignServiceMapper).mapSaleCampaignToSaleCampaignEntity(saleCampaign, saleCampaignEntity);
		assertTrue(saleCampaignResult == saleCampaignSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		saleCampaignService.delete(id);

		// Then
		verify(saleCampaignJpaRepository).delete(id);
		
	}

}
