/*
 * Created on 24 Þub 2016 ( Time 16:27:50 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.ContactCategory;
import org.demo.bean.jpa.ContactCategoryEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.ContactCategoryServiceMapper;
import org.demo.data.repository.jpa.ContactCategoryJpaRepository;
import org.demo.test.ContactCategoryFactoryForTest;
import org.demo.test.ContactCategoryEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ContactCategoryService
 */
@RunWith(MockitoJUnitRunner.class)
public class ContactCategoryServiceImplTest {

	@InjectMocks
	private ContactCategoryServiceImpl contactCategoryService;
	@Mock
	private ContactCategoryJpaRepository contactCategoryJpaRepository;
	@Mock
	private ContactCategoryServiceMapper contactCategoryServiceMapper;
	
	private ContactCategoryFactoryForTest contactCategoryFactoryForTest = new ContactCategoryFactoryForTest();

	private ContactCategoryEntityFactoryForTest contactCategoryEntityFactoryForTest = new ContactCategoryEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		ContactCategoryEntity contactCategoryEntity = contactCategoryJpaRepository.findOne(id);
		
		ContactCategory contactCategory = contactCategoryFactoryForTest.newContactCategory();
		when(contactCategoryServiceMapper.mapContactCategoryEntityToContactCategory(contactCategoryEntity)).thenReturn(contactCategory);

		// When
		ContactCategory contactCategoryFound = contactCategoryService.findById(id);

		// Then
		assertEquals(contactCategory.getId(),contactCategoryFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ContactCategoryEntity> contactCategoryEntitys = new ArrayList<ContactCategoryEntity>();
		ContactCategoryEntity contactCategoryEntity1 = contactCategoryEntityFactoryForTest.newContactCategoryEntity();
		contactCategoryEntitys.add(contactCategoryEntity1);
		ContactCategoryEntity contactCategoryEntity2 = contactCategoryEntityFactoryForTest.newContactCategoryEntity();
		contactCategoryEntitys.add(contactCategoryEntity2);
		when(contactCategoryJpaRepository.findAll()).thenReturn(contactCategoryEntitys);
		
		ContactCategory contactCategory1 = contactCategoryFactoryForTest.newContactCategory();
		when(contactCategoryServiceMapper.mapContactCategoryEntityToContactCategory(contactCategoryEntity1)).thenReturn(contactCategory1);
		ContactCategory contactCategory2 = contactCategoryFactoryForTest.newContactCategory();
		when(contactCategoryServiceMapper.mapContactCategoryEntityToContactCategory(contactCategoryEntity2)).thenReturn(contactCategory2);

		// When
		List<ContactCategory> contactCategorysFounds = contactCategoryService.findAll();

		// Then
		assertTrue(contactCategory1 == contactCategorysFounds.get(0));
		assertTrue(contactCategory2 == contactCategorysFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		ContactCategory contactCategory = contactCategoryFactoryForTest.newContactCategory();

		ContactCategoryEntity contactCategoryEntity = contactCategoryEntityFactoryForTest.newContactCategoryEntity();
		when(contactCategoryJpaRepository.findOne(contactCategory.getId())).thenReturn(null);
		
		contactCategoryEntity = new ContactCategoryEntity();
		contactCategoryServiceMapper.mapContactCategoryToContactCategoryEntity(contactCategory, contactCategoryEntity);
		ContactCategoryEntity contactCategoryEntitySaved = contactCategoryJpaRepository.save(contactCategoryEntity);
		
		ContactCategory contactCategorySaved = contactCategoryFactoryForTest.newContactCategory();
		when(contactCategoryServiceMapper.mapContactCategoryEntityToContactCategory(contactCategoryEntitySaved)).thenReturn(contactCategorySaved);

		// When
		ContactCategory contactCategoryResult = contactCategoryService.create(contactCategory);

		// Then
		assertTrue(contactCategoryResult == contactCategorySaved);
	}

	@Test
	public void createKOExists() {
		// Given
		ContactCategory contactCategory = contactCategoryFactoryForTest.newContactCategory();

		ContactCategoryEntity contactCategoryEntity = contactCategoryEntityFactoryForTest.newContactCategoryEntity();
		when(contactCategoryJpaRepository.findOne(contactCategory.getId())).thenReturn(contactCategoryEntity);

		// When
		Exception exception = null;
		try {
			contactCategoryService.create(contactCategory);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		ContactCategory contactCategory = contactCategoryFactoryForTest.newContactCategory();

		ContactCategoryEntity contactCategoryEntity = contactCategoryEntityFactoryForTest.newContactCategoryEntity();
		when(contactCategoryJpaRepository.findOne(contactCategory.getId())).thenReturn(contactCategoryEntity);
		
		ContactCategoryEntity contactCategoryEntitySaved = contactCategoryEntityFactoryForTest.newContactCategoryEntity();
		when(contactCategoryJpaRepository.save(contactCategoryEntity)).thenReturn(contactCategoryEntitySaved);
		
		ContactCategory contactCategorySaved = contactCategoryFactoryForTest.newContactCategory();
		when(contactCategoryServiceMapper.mapContactCategoryEntityToContactCategory(contactCategoryEntitySaved)).thenReturn(contactCategorySaved);

		// When
		ContactCategory contactCategoryResult = contactCategoryService.update(contactCategory);

		// Then
		verify(contactCategoryServiceMapper).mapContactCategoryToContactCategoryEntity(contactCategory, contactCategoryEntity);
		assertTrue(contactCategoryResult == contactCategorySaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		contactCategoryService.delete(id);

		// Then
		verify(contactCategoryJpaRepository).delete(id);
		
	}

}
