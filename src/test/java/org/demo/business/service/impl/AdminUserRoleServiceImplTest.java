/*
 * Created on 24 Þub 2016 ( Time 16:27:49 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.AdminUserRole;
import org.demo.bean.jpa.AdminUserRoleEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.AdminUserRoleServiceMapper;
import org.demo.data.repository.jpa.AdminUserRoleJpaRepository;
import org.demo.test.AdminUserRoleFactoryForTest;
import org.demo.test.AdminUserRoleEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of AdminUserRoleService
 */
@RunWith(MockitoJUnitRunner.class)
public class AdminUserRoleServiceImplTest {

	@InjectMocks
	private AdminUserRoleServiceImpl adminUserRoleService;
	@Mock
	private AdminUserRoleJpaRepository adminUserRoleJpaRepository;
	@Mock
	private AdminUserRoleServiceMapper adminUserRoleServiceMapper;
	
	private AdminUserRoleFactoryForTest adminUserRoleFactoryForTest = new AdminUserRoleFactoryForTest();

	private AdminUserRoleEntityFactoryForTest adminUserRoleEntityFactoryForTest = new AdminUserRoleEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		AdminUserRoleEntity adminUserRoleEntity = adminUserRoleJpaRepository.findOne(id);
		
		AdminUserRole adminUserRole = adminUserRoleFactoryForTest.newAdminUserRole();
		when(adminUserRoleServiceMapper.mapAdminUserRoleEntityToAdminUserRole(adminUserRoleEntity)).thenReturn(adminUserRole);

		// When
		AdminUserRole adminUserRoleFound = adminUserRoleService.findById(id);

		// Then
		assertEquals(adminUserRole.getId(),adminUserRoleFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<AdminUserRoleEntity> adminUserRoleEntitys = new ArrayList<AdminUserRoleEntity>();
		AdminUserRoleEntity adminUserRoleEntity1 = adminUserRoleEntityFactoryForTest.newAdminUserRoleEntity();
		adminUserRoleEntitys.add(adminUserRoleEntity1);
		AdminUserRoleEntity adminUserRoleEntity2 = adminUserRoleEntityFactoryForTest.newAdminUserRoleEntity();
		adminUserRoleEntitys.add(adminUserRoleEntity2);
		when(adminUserRoleJpaRepository.findAll()).thenReturn(adminUserRoleEntitys);
		
		AdminUserRole adminUserRole1 = adminUserRoleFactoryForTest.newAdminUserRole();
		when(adminUserRoleServiceMapper.mapAdminUserRoleEntityToAdminUserRole(adminUserRoleEntity1)).thenReturn(adminUserRole1);
		AdminUserRole adminUserRole2 = adminUserRoleFactoryForTest.newAdminUserRole();
		when(adminUserRoleServiceMapper.mapAdminUserRoleEntityToAdminUserRole(adminUserRoleEntity2)).thenReturn(adminUserRole2);

		// When
		List<AdminUserRole> adminUserRolesFounds = adminUserRoleService.findAll();

		// Then
		assertTrue(adminUserRole1 == adminUserRolesFounds.get(0));
		assertTrue(adminUserRole2 == adminUserRolesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		AdminUserRole adminUserRole = adminUserRoleFactoryForTest.newAdminUserRole();

		AdminUserRoleEntity adminUserRoleEntity = adminUserRoleEntityFactoryForTest.newAdminUserRoleEntity();
		when(adminUserRoleJpaRepository.findOne(adminUserRole.getId())).thenReturn(null);
		
		adminUserRoleEntity = new AdminUserRoleEntity();
		adminUserRoleServiceMapper.mapAdminUserRoleToAdminUserRoleEntity(adminUserRole, adminUserRoleEntity);
		AdminUserRoleEntity adminUserRoleEntitySaved = adminUserRoleJpaRepository.save(adminUserRoleEntity);
		
		AdminUserRole adminUserRoleSaved = adminUserRoleFactoryForTest.newAdminUserRole();
		when(adminUserRoleServiceMapper.mapAdminUserRoleEntityToAdminUserRole(adminUserRoleEntitySaved)).thenReturn(adminUserRoleSaved);

		// When
		AdminUserRole adminUserRoleResult = adminUserRoleService.create(adminUserRole);

		// Then
		assertTrue(adminUserRoleResult == adminUserRoleSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		AdminUserRole adminUserRole = adminUserRoleFactoryForTest.newAdminUserRole();

		AdminUserRoleEntity adminUserRoleEntity = adminUserRoleEntityFactoryForTest.newAdminUserRoleEntity();
		when(adminUserRoleJpaRepository.findOne(adminUserRole.getId())).thenReturn(adminUserRoleEntity);

		// When
		Exception exception = null;
		try {
			adminUserRoleService.create(adminUserRole);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		AdminUserRole adminUserRole = adminUserRoleFactoryForTest.newAdminUserRole();

		AdminUserRoleEntity adminUserRoleEntity = adminUserRoleEntityFactoryForTest.newAdminUserRoleEntity();
		when(adminUserRoleJpaRepository.findOne(adminUserRole.getId())).thenReturn(adminUserRoleEntity);
		
		AdminUserRoleEntity adminUserRoleEntitySaved = adminUserRoleEntityFactoryForTest.newAdminUserRoleEntity();
		when(adminUserRoleJpaRepository.save(adminUserRoleEntity)).thenReturn(adminUserRoleEntitySaved);
		
		AdminUserRole adminUserRoleSaved = adminUserRoleFactoryForTest.newAdminUserRole();
		when(adminUserRoleServiceMapper.mapAdminUserRoleEntityToAdminUserRole(adminUserRoleEntitySaved)).thenReturn(adminUserRoleSaved);

		// When
		AdminUserRole adminUserRoleResult = adminUserRoleService.update(adminUserRole);

		// Then
		verify(adminUserRoleServiceMapper).mapAdminUserRoleToAdminUserRoleEntity(adminUserRole, adminUserRoleEntity);
		assertTrue(adminUserRoleResult == adminUserRoleSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		adminUserRoleService.delete(id);

		// Then
		verify(adminUserRoleJpaRepository).delete(id);
		
	}

}
