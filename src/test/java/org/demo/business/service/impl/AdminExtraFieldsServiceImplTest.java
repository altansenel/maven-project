/*
 * Created on 24 Þub 2016 ( Time 16:27:49 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.AdminExtraFields;
import org.demo.bean.jpa.AdminExtraFieldsEntity;
import org.demo.business.service.mapping.AdminExtraFieldsServiceMapper;
import org.demo.data.repository.jpa.AdminExtraFieldsJpaRepository;
import org.demo.test.AdminExtraFieldsFactoryForTest;
import org.demo.test.AdminExtraFieldsEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of AdminExtraFieldsService
 */
@RunWith(MockitoJUnitRunner.class)
public class AdminExtraFieldsServiceImplTest {

	@InjectMocks
	private AdminExtraFieldsServiceImpl adminExtraFieldsService;
	@Mock
	private AdminExtraFieldsJpaRepository adminExtraFieldsJpaRepository;
	@Mock
	private AdminExtraFieldsServiceMapper adminExtraFieldsServiceMapper;
	
	private AdminExtraFieldsFactoryForTest adminExtraFieldsFactoryForTest = new AdminExtraFieldsFactoryForTest();

	private AdminExtraFieldsEntityFactoryForTest adminExtraFieldsEntityFactoryForTest = new AdminExtraFieldsEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		AdminExtraFieldsEntity adminExtraFieldsEntity = adminExtraFieldsJpaRepository.findOne(id);
		
		AdminExtraFields adminExtraFields = adminExtraFieldsFactoryForTest.newAdminExtraFields();
		when(adminExtraFieldsServiceMapper.mapAdminExtraFieldsEntityToAdminExtraFields(adminExtraFieldsEntity)).thenReturn(adminExtraFields);

		// When
		AdminExtraFields adminExtraFieldsFound = adminExtraFieldsService.findById(id);

		// Then
		assertEquals(adminExtraFields.getId(),adminExtraFieldsFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<AdminExtraFieldsEntity> adminExtraFieldsEntitys = new ArrayList<AdminExtraFieldsEntity>();
		AdminExtraFieldsEntity adminExtraFieldsEntity1 = adminExtraFieldsEntityFactoryForTest.newAdminExtraFieldsEntity();
		adminExtraFieldsEntitys.add(adminExtraFieldsEntity1);
		AdminExtraFieldsEntity adminExtraFieldsEntity2 = adminExtraFieldsEntityFactoryForTest.newAdminExtraFieldsEntity();
		adminExtraFieldsEntitys.add(adminExtraFieldsEntity2);
		when(adminExtraFieldsJpaRepository.findAll()).thenReturn(adminExtraFieldsEntitys);
		
		AdminExtraFields adminExtraFields1 = adminExtraFieldsFactoryForTest.newAdminExtraFields();
		when(adminExtraFieldsServiceMapper.mapAdminExtraFieldsEntityToAdminExtraFields(adminExtraFieldsEntity1)).thenReturn(adminExtraFields1);
		AdminExtraFields adminExtraFields2 = adminExtraFieldsFactoryForTest.newAdminExtraFields();
		when(adminExtraFieldsServiceMapper.mapAdminExtraFieldsEntityToAdminExtraFields(adminExtraFieldsEntity2)).thenReturn(adminExtraFields2);

		// When
		List<AdminExtraFields> adminExtraFieldssFounds = adminExtraFieldsService.findAll();

		// Then
		assertTrue(adminExtraFields1 == adminExtraFieldssFounds.get(0));
		assertTrue(adminExtraFields2 == adminExtraFieldssFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		AdminExtraFields adminExtraFields = adminExtraFieldsFactoryForTest.newAdminExtraFields();

		AdminExtraFieldsEntity adminExtraFieldsEntity = adminExtraFieldsEntityFactoryForTest.newAdminExtraFieldsEntity();
		when(adminExtraFieldsJpaRepository.findOne(adminExtraFields.getId())).thenReturn(null);
		
		adminExtraFieldsEntity = new AdminExtraFieldsEntity();
		adminExtraFieldsServiceMapper.mapAdminExtraFieldsToAdminExtraFieldsEntity(adminExtraFields, adminExtraFieldsEntity);
		AdminExtraFieldsEntity adminExtraFieldsEntitySaved = adminExtraFieldsJpaRepository.save(adminExtraFieldsEntity);
		
		AdminExtraFields adminExtraFieldsSaved = adminExtraFieldsFactoryForTest.newAdminExtraFields();
		when(adminExtraFieldsServiceMapper.mapAdminExtraFieldsEntityToAdminExtraFields(adminExtraFieldsEntitySaved)).thenReturn(adminExtraFieldsSaved);

		// When
		AdminExtraFields adminExtraFieldsResult = adminExtraFieldsService.create(adminExtraFields);

		// Then
		assertTrue(adminExtraFieldsResult == adminExtraFieldsSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		AdminExtraFields adminExtraFields = adminExtraFieldsFactoryForTest.newAdminExtraFields();

		AdminExtraFieldsEntity adminExtraFieldsEntity = adminExtraFieldsEntityFactoryForTest.newAdminExtraFieldsEntity();
		when(adminExtraFieldsJpaRepository.findOne(adminExtraFields.getId())).thenReturn(adminExtraFieldsEntity);

		// When
		Exception exception = null;
		try {
			adminExtraFieldsService.create(adminExtraFields);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		AdminExtraFields adminExtraFields = adminExtraFieldsFactoryForTest.newAdminExtraFields();

		AdminExtraFieldsEntity adminExtraFieldsEntity = adminExtraFieldsEntityFactoryForTest.newAdminExtraFieldsEntity();
		when(adminExtraFieldsJpaRepository.findOne(adminExtraFields.getId())).thenReturn(adminExtraFieldsEntity);
		
		AdminExtraFieldsEntity adminExtraFieldsEntitySaved = adminExtraFieldsEntityFactoryForTest.newAdminExtraFieldsEntity();
		when(adminExtraFieldsJpaRepository.save(adminExtraFieldsEntity)).thenReturn(adminExtraFieldsEntitySaved);
		
		AdminExtraFields adminExtraFieldsSaved = adminExtraFieldsFactoryForTest.newAdminExtraFields();
		when(adminExtraFieldsServiceMapper.mapAdminExtraFieldsEntityToAdminExtraFields(adminExtraFieldsEntitySaved)).thenReturn(adminExtraFieldsSaved);

		// When
		AdminExtraFields adminExtraFieldsResult = adminExtraFieldsService.update(adminExtraFields);

		// Then
		verify(adminExtraFieldsServiceMapper).mapAdminExtraFieldsToAdminExtraFieldsEntity(adminExtraFields, adminExtraFieldsEntity);
		assertTrue(adminExtraFieldsResult == adminExtraFieldsSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		adminExtraFieldsService.delete(id);

		// Then
		verify(adminExtraFieldsJpaRepository).delete(id);
		
	}

}
