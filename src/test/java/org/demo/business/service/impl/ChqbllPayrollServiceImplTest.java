/*
 * Created on 24 Þub 2016 ( Time 16:27:50 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.ChqbllPayroll;
import org.demo.bean.jpa.ChqbllPayrollEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.ChqbllPayrollServiceMapper;
import org.demo.data.repository.jpa.ChqbllPayrollJpaRepository;
import org.demo.test.ChqbllPayrollFactoryForTest;
import org.demo.test.ChqbllPayrollEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ChqbllPayrollService
 */
@RunWith(MockitoJUnitRunner.class)
public class ChqbllPayrollServiceImplTest {

	@InjectMocks
	private ChqbllPayrollServiceImpl chqbllPayrollService;
	@Mock
	private ChqbllPayrollJpaRepository chqbllPayrollJpaRepository;
	@Mock
	private ChqbllPayrollServiceMapper chqbllPayrollServiceMapper;
	
	private ChqbllPayrollFactoryForTest chqbllPayrollFactoryForTest = new ChqbllPayrollFactoryForTest();

	private ChqbllPayrollEntityFactoryForTest chqbllPayrollEntityFactoryForTest = new ChqbllPayrollEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		ChqbllPayrollEntity chqbllPayrollEntity = chqbllPayrollJpaRepository.findOne(id);
		
		ChqbllPayroll chqbllPayroll = chqbllPayrollFactoryForTest.newChqbllPayroll();
		when(chqbllPayrollServiceMapper.mapChqbllPayrollEntityToChqbllPayroll(chqbllPayrollEntity)).thenReturn(chqbllPayroll);

		// When
		ChqbllPayroll chqbllPayrollFound = chqbllPayrollService.findById(id);

		// Then
		assertEquals(chqbllPayroll.getId(),chqbllPayrollFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ChqbllPayrollEntity> chqbllPayrollEntitys = new ArrayList<ChqbllPayrollEntity>();
		ChqbllPayrollEntity chqbllPayrollEntity1 = chqbllPayrollEntityFactoryForTest.newChqbllPayrollEntity();
		chqbllPayrollEntitys.add(chqbllPayrollEntity1);
		ChqbllPayrollEntity chqbllPayrollEntity2 = chqbllPayrollEntityFactoryForTest.newChqbllPayrollEntity();
		chqbllPayrollEntitys.add(chqbllPayrollEntity2);
		when(chqbllPayrollJpaRepository.findAll()).thenReturn(chqbllPayrollEntitys);
		
		ChqbllPayroll chqbllPayroll1 = chqbllPayrollFactoryForTest.newChqbllPayroll();
		when(chqbllPayrollServiceMapper.mapChqbllPayrollEntityToChqbllPayroll(chqbllPayrollEntity1)).thenReturn(chqbllPayroll1);
		ChqbllPayroll chqbllPayroll2 = chqbllPayrollFactoryForTest.newChqbllPayroll();
		when(chqbllPayrollServiceMapper.mapChqbllPayrollEntityToChqbllPayroll(chqbllPayrollEntity2)).thenReturn(chqbllPayroll2);

		// When
		List<ChqbllPayroll> chqbllPayrollsFounds = chqbllPayrollService.findAll();

		// Then
		assertTrue(chqbllPayroll1 == chqbllPayrollsFounds.get(0));
		assertTrue(chqbllPayroll2 == chqbllPayrollsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		ChqbllPayroll chqbllPayroll = chqbllPayrollFactoryForTest.newChqbllPayroll();

		ChqbllPayrollEntity chqbllPayrollEntity = chqbllPayrollEntityFactoryForTest.newChqbllPayrollEntity();
		when(chqbllPayrollJpaRepository.findOne(chqbllPayroll.getId())).thenReturn(null);
		
		chqbllPayrollEntity = new ChqbllPayrollEntity();
		chqbllPayrollServiceMapper.mapChqbllPayrollToChqbllPayrollEntity(chqbllPayroll, chqbllPayrollEntity);
		ChqbllPayrollEntity chqbllPayrollEntitySaved = chqbllPayrollJpaRepository.save(chqbllPayrollEntity);
		
		ChqbllPayroll chqbllPayrollSaved = chqbllPayrollFactoryForTest.newChqbllPayroll();
		when(chqbllPayrollServiceMapper.mapChqbllPayrollEntityToChqbllPayroll(chqbllPayrollEntitySaved)).thenReturn(chqbllPayrollSaved);

		// When
		ChqbllPayroll chqbllPayrollResult = chqbllPayrollService.create(chqbllPayroll);

		// Then
		assertTrue(chqbllPayrollResult == chqbllPayrollSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		ChqbllPayroll chqbllPayroll = chqbllPayrollFactoryForTest.newChqbllPayroll();

		ChqbllPayrollEntity chqbllPayrollEntity = chqbllPayrollEntityFactoryForTest.newChqbllPayrollEntity();
		when(chqbllPayrollJpaRepository.findOne(chqbllPayroll.getId())).thenReturn(chqbllPayrollEntity);

		// When
		Exception exception = null;
		try {
			chqbllPayrollService.create(chqbllPayroll);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		ChqbllPayroll chqbllPayroll = chqbllPayrollFactoryForTest.newChqbllPayroll();

		ChqbllPayrollEntity chqbllPayrollEntity = chqbllPayrollEntityFactoryForTest.newChqbllPayrollEntity();
		when(chqbllPayrollJpaRepository.findOne(chqbllPayroll.getId())).thenReturn(chqbllPayrollEntity);
		
		ChqbllPayrollEntity chqbllPayrollEntitySaved = chqbllPayrollEntityFactoryForTest.newChqbllPayrollEntity();
		when(chqbllPayrollJpaRepository.save(chqbllPayrollEntity)).thenReturn(chqbllPayrollEntitySaved);
		
		ChqbllPayroll chqbllPayrollSaved = chqbllPayrollFactoryForTest.newChqbllPayroll();
		when(chqbllPayrollServiceMapper.mapChqbllPayrollEntityToChqbllPayroll(chqbllPayrollEntitySaved)).thenReturn(chqbllPayrollSaved);

		// When
		ChqbllPayroll chqbllPayrollResult = chqbllPayrollService.update(chqbllPayroll);

		// Then
		verify(chqbllPayrollServiceMapper).mapChqbllPayrollToChqbllPayrollEntity(chqbllPayroll, chqbllPayrollEntity);
		assertTrue(chqbllPayrollResult == chqbllPayrollSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		chqbllPayrollService.delete(id);

		// Then
		verify(chqbllPayrollJpaRepository).delete(id);
		
	}

}
