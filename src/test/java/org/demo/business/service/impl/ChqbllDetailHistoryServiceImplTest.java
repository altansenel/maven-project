/*
 * Created on 24 Þub 2016 ( Time 16:27:50 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.ChqbllDetailHistory;
import org.demo.bean.jpa.ChqbllDetailHistoryEntity;
import java.util.Date;
import org.demo.business.service.mapping.ChqbllDetailHistoryServiceMapper;
import org.demo.data.repository.jpa.ChqbllDetailHistoryJpaRepository;
import org.demo.test.ChqbllDetailHistoryFactoryForTest;
import org.demo.test.ChqbllDetailHistoryEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ChqbllDetailHistoryService
 */
@RunWith(MockitoJUnitRunner.class)
public class ChqbllDetailHistoryServiceImplTest {

	@InjectMocks
	private ChqbllDetailHistoryServiceImpl chqbllDetailHistoryService;
	@Mock
	private ChqbllDetailHistoryJpaRepository chqbllDetailHistoryJpaRepository;
	@Mock
	private ChqbllDetailHistoryServiceMapper chqbllDetailHistoryServiceMapper;
	
	private ChqbllDetailHistoryFactoryForTest chqbllDetailHistoryFactoryForTest = new ChqbllDetailHistoryFactoryForTest();

	private ChqbllDetailHistoryEntityFactoryForTest chqbllDetailHistoryEntityFactoryForTest = new ChqbllDetailHistoryEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		ChqbllDetailHistoryEntity chqbllDetailHistoryEntity = chqbllDetailHistoryJpaRepository.findOne(id);
		
		ChqbllDetailHistory chqbllDetailHistory = chqbllDetailHistoryFactoryForTest.newChqbllDetailHistory();
		when(chqbllDetailHistoryServiceMapper.mapChqbllDetailHistoryEntityToChqbllDetailHistory(chqbllDetailHistoryEntity)).thenReturn(chqbllDetailHistory);

		// When
		ChqbllDetailHistory chqbllDetailHistoryFound = chqbllDetailHistoryService.findById(id);

		// Then
		assertEquals(chqbllDetailHistory.getId(),chqbllDetailHistoryFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ChqbllDetailHistoryEntity> chqbllDetailHistoryEntitys = new ArrayList<ChqbllDetailHistoryEntity>();
		ChqbllDetailHistoryEntity chqbllDetailHistoryEntity1 = chqbllDetailHistoryEntityFactoryForTest.newChqbllDetailHistoryEntity();
		chqbllDetailHistoryEntitys.add(chqbllDetailHistoryEntity1);
		ChqbllDetailHistoryEntity chqbllDetailHistoryEntity2 = chqbllDetailHistoryEntityFactoryForTest.newChqbllDetailHistoryEntity();
		chqbllDetailHistoryEntitys.add(chqbllDetailHistoryEntity2);
		when(chqbllDetailHistoryJpaRepository.findAll()).thenReturn(chqbllDetailHistoryEntitys);
		
		ChqbllDetailHistory chqbllDetailHistory1 = chqbllDetailHistoryFactoryForTest.newChqbllDetailHistory();
		when(chqbllDetailHistoryServiceMapper.mapChqbllDetailHistoryEntityToChqbllDetailHistory(chqbllDetailHistoryEntity1)).thenReturn(chqbllDetailHistory1);
		ChqbllDetailHistory chqbllDetailHistory2 = chqbllDetailHistoryFactoryForTest.newChqbllDetailHistory();
		when(chqbllDetailHistoryServiceMapper.mapChqbllDetailHistoryEntityToChqbllDetailHistory(chqbllDetailHistoryEntity2)).thenReturn(chqbllDetailHistory2);

		// When
		List<ChqbllDetailHistory> chqbllDetailHistorysFounds = chqbllDetailHistoryService.findAll();

		// Then
		assertTrue(chqbllDetailHistory1 == chqbllDetailHistorysFounds.get(0));
		assertTrue(chqbllDetailHistory2 == chqbllDetailHistorysFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		ChqbllDetailHistory chqbllDetailHistory = chqbllDetailHistoryFactoryForTest.newChqbllDetailHistory();

		ChqbllDetailHistoryEntity chqbllDetailHistoryEntity = chqbllDetailHistoryEntityFactoryForTest.newChqbllDetailHistoryEntity();
		when(chqbllDetailHistoryJpaRepository.findOne(chqbllDetailHistory.getId())).thenReturn(null);
		
		chqbllDetailHistoryEntity = new ChqbllDetailHistoryEntity();
		chqbllDetailHistoryServiceMapper.mapChqbllDetailHistoryToChqbllDetailHistoryEntity(chqbllDetailHistory, chqbllDetailHistoryEntity);
		ChqbllDetailHistoryEntity chqbllDetailHistoryEntitySaved = chqbllDetailHistoryJpaRepository.save(chqbllDetailHistoryEntity);
		
		ChqbllDetailHistory chqbllDetailHistorySaved = chqbllDetailHistoryFactoryForTest.newChqbllDetailHistory();
		when(chqbllDetailHistoryServiceMapper.mapChqbllDetailHistoryEntityToChqbllDetailHistory(chqbllDetailHistoryEntitySaved)).thenReturn(chqbllDetailHistorySaved);

		// When
		ChqbllDetailHistory chqbllDetailHistoryResult = chqbllDetailHistoryService.create(chqbllDetailHistory);

		// Then
		assertTrue(chqbllDetailHistoryResult == chqbllDetailHistorySaved);
	}

	@Test
	public void createKOExists() {
		// Given
		ChqbllDetailHistory chqbllDetailHistory = chqbllDetailHistoryFactoryForTest.newChqbllDetailHistory();

		ChqbllDetailHistoryEntity chqbllDetailHistoryEntity = chqbllDetailHistoryEntityFactoryForTest.newChqbllDetailHistoryEntity();
		when(chqbllDetailHistoryJpaRepository.findOne(chqbllDetailHistory.getId())).thenReturn(chqbllDetailHistoryEntity);

		// When
		Exception exception = null;
		try {
			chqbllDetailHistoryService.create(chqbllDetailHistory);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		ChqbllDetailHistory chqbllDetailHistory = chqbllDetailHistoryFactoryForTest.newChqbllDetailHistory();

		ChqbllDetailHistoryEntity chqbllDetailHistoryEntity = chqbllDetailHistoryEntityFactoryForTest.newChqbllDetailHistoryEntity();
		when(chqbllDetailHistoryJpaRepository.findOne(chqbllDetailHistory.getId())).thenReturn(chqbllDetailHistoryEntity);
		
		ChqbllDetailHistoryEntity chqbllDetailHistoryEntitySaved = chqbllDetailHistoryEntityFactoryForTest.newChqbllDetailHistoryEntity();
		when(chqbllDetailHistoryJpaRepository.save(chqbllDetailHistoryEntity)).thenReturn(chqbllDetailHistoryEntitySaved);
		
		ChqbllDetailHistory chqbllDetailHistorySaved = chqbllDetailHistoryFactoryForTest.newChqbllDetailHistory();
		when(chqbllDetailHistoryServiceMapper.mapChqbllDetailHistoryEntityToChqbllDetailHistory(chqbllDetailHistoryEntitySaved)).thenReturn(chqbllDetailHistorySaved);

		// When
		ChqbllDetailHistory chqbllDetailHistoryResult = chqbllDetailHistoryService.update(chqbllDetailHistory);

		// Then
		verify(chqbllDetailHistoryServiceMapper).mapChqbllDetailHistoryToChqbllDetailHistoryEntity(chqbllDetailHistory, chqbllDetailHistoryEntity);
		assertTrue(chqbllDetailHistoryResult == chqbllDetailHistorySaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		chqbllDetailHistoryService.delete(id);

		// Then
		verify(chqbllDetailHistoryJpaRepository).delete(id);
		
	}

}
