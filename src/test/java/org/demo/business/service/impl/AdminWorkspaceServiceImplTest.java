/*
 * Created on 24 Þub 2016 ( Time 16:27:49 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.AdminWorkspace;
import org.demo.bean.jpa.AdminWorkspaceEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.AdminWorkspaceServiceMapper;
import org.demo.data.repository.jpa.AdminWorkspaceJpaRepository;
import org.demo.test.AdminWorkspaceFactoryForTest;
import org.demo.test.AdminWorkspaceEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of AdminWorkspaceService
 */
@RunWith(MockitoJUnitRunner.class)
public class AdminWorkspaceServiceImplTest {

	@InjectMocks
	private AdminWorkspaceServiceImpl adminWorkspaceService;
	@Mock
	private AdminWorkspaceJpaRepository adminWorkspaceJpaRepository;
	@Mock
	private AdminWorkspaceServiceMapper adminWorkspaceServiceMapper;
	
	private AdminWorkspaceFactoryForTest adminWorkspaceFactoryForTest = new AdminWorkspaceFactoryForTest();

	private AdminWorkspaceEntityFactoryForTest adminWorkspaceEntityFactoryForTest = new AdminWorkspaceEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		AdminWorkspaceEntity adminWorkspaceEntity = adminWorkspaceJpaRepository.findOne(id);
		
		AdminWorkspace adminWorkspace = adminWorkspaceFactoryForTest.newAdminWorkspace();
		when(adminWorkspaceServiceMapper.mapAdminWorkspaceEntityToAdminWorkspace(adminWorkspaceEntity)).thenReturn(adminWorkspace);

		// When
		AdminWorkspace adminWorkspaceFound = adminWorkspaceService.findById(id);

		// Then
		assertEquals(adminWorkspace.getId(),adminWorkspaceFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<AdminWorkspaceEntity> adminWorkspaceEntitys = new ArrayList<AdminWorkspaceEntity>();
		AdminWorkspaceEntity adminWorkspaceEntity1 = adminWorkspaceEntityFactoryForTest.newAdminWorkspaceEntity();
		adminWorkspaceEntitys.add(adminWorkspaceEntity1);
		AdminWorkspaceEntity adminWorkspaceEntity2 = adminWorkspaceEntityFactoryForTest.newAdminWorkspaceEntity();
		adminWorkspaceEntitys.add(adminWorkspaceEntity2);
		when(adminWorkspaceJpaRepository.findAll()).thenReturn(adminWorkspaceEntitys);
		
		AdminWorkspace adminWorkspace1 = adminWorkspaceFactoryForTest.newAdminWorkspace();
		when(adminWorkspaceServiceMapper.mapAdminWorkspaceEntityToAdminWorkspace(adminWorkspaceEntity1)).thenReturn(adminWorkspace1);
		AdminWorkspace adminWorkspace2 = adminWorkspaceFactoryForTest.newAdminWorkspace();
		when(adminWorkspaceServiceMapper.mapAdminWorkspaceEntityToAdminWorkspace(adminWorkspaceEntity2)).thenReturn(adminWorkspace2);

		// When
		List<AdminWorkspace> adminWorkspacesFounds = adminWorkspaceService.findAll();

		// Then
		assertTrue(adminWorkspace1 == adminWorkspacesFounds.get(0));
		assertTrue(adminWorkspace2 == adminWorkspacesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		AdminWorkspace adminWorkspace = adminWorkspaceFactoryForTest.newAdminWorkspace();

		AdminWorkspaceEntity adminWorkspaceEntity = adminWorkspaceEntityFactoryForTest.newAdminWorkspaceEntity();
		when(adminWorkspaceJpaRepository.findOne(adminWorkspace.getId())).thenReturn(null);
		
		adminWorkspaceEntity = new AdminWorkspaceEntity();
		adminWorkspaceServiceMapper.mapAdminWorkspaceToAdminWorkspaceEntity(adminWorkspace, adminWorkspaceEntity);
		AdminWorkspaceEntity adminWorkspaceEntitySaved = adminWorkspaceJpaRepository.save(adminWorkspaceEntity);
		
		AdminWorkspace adminWorkspaceSaved = adminWorkspaceFactoryForTest.newAdminWorkspace();
		when(adminWorkspaceServiceMapper.mapAdminWorkspaceEntityToAdminWorkspace(adminWorkspaceEntitySaved)).thenReturn(adminWorkspaceSaved);

		// When
		AdminWorkspace adminWorkspaceResult = adminWorkspaceService.create(adminWorkspace);

		// Then
		assertTrue(adminWorkspaceResult == adminWorkspaceSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		AdminWorkspace adminWorkspace = adminWorkspaceFactoryForTest.newAdminWorkspace();

		AdminWorkspaceEntity adminWorkspaceEntity = adminWorkspaceEntityFactoryForTest.newAdminWorkspaceEntity();
		when(adminWorkspaceJpaRepository.findOne(adminWorkspace.getId())).thenReturn(adminWorkspaceEntity);

		// When
		Exception exception = null;
		try {
			adminWorkspaceService.create(adminWorkspace);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		AdminWorkspace adminWorkspace = adminWorkspaceFactoryForTest.newAdminWorkspace();

		AdminWorkspaceEntity adminWorkspaceEntity = adminWorkspaceEntityFactoryForTest.newAdminWorkspaceEntity();
		when(adminWorkspaceJpaRepository.findOne(adminWorkspace.getId())).thenReturn(adminWorkspaceEntity);
		
		AdminWorkspaceEntity adminWorkspaceEntitySaved = adminWorkspaceEntityFactoryForTest.newAdminWorkspaceEntity();
		when(adminWorkspaceJpaRepository.save(adminWorkspaceEntity)).thenReturn(adminWorkspaceEntitySaved);
		
		AdminWorkspace adminWorkspaceSaved = adminWorkspaceFactoryForTest.newAdminWorkspace();
		when(adminWorkspaceServiceMapper.mapAdminWorkspaceEntityToAdminWorkspace(adminWorkspaceEntitySaved)).thenReturn(adminWorkspaceSaved);

		// When
		AdminWorkspace adminWorkspaceResult = adminWorkspaceService.update(adminWorkspace);

		// Then
		verify(adminWorkspaceServiceMapper).mapAdminWorkspaceToAdminWorkspaceEntity(adminWorkspace, adminWorkspaceEntity);
		assertTrue(adminWorkspaceResult == adminWorkspaceSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		adminWorkspaceService.delete(id);

		// Then
		verify(adminWorkspaceJpaRepository).delete(id);
		
	}

}
