/*
 * Created on 24 Þub 2016 ( Time 16:27:53 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.StockTransFactor;
import org.demo.bean.jpa.StockTransFactorEntity;
import org.demo.business.service.mapping.StockTransFactorServiceMapper;
import org.demo.data.repository.jpa.StockTransFactorJpaRepository;
import org.demo.test.StockTransFactorFactoryForTest;
import org.demo.test.StockTransFactorEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of StockTransFactorService
 */
@RunWith(MockitoJUnitRunner.class)
public class StockTransFactorServiceImplTest {

	@InjectMocks
	private StockTransFactorServiceImpl stockTransFactorService;
	@Mock
	private StockTransFactorJpaRepository stockTransFactorJpaRepository;
	@Mock
	private StockTransFactorServiceMapper stockTransFactorServiceMapper;
	
	private StockTransFactorFactoryForTest stockTransFactorFactoryForTest = new StockTransFactorFactoryForTest();

	private StockTransFactorEntityFactoryForTest stockTransFactorEntityFactoryForTest = new StockTransFactorEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		StockTransFactorEntity stockTransFactorEntity = stockTransFactorJpaRepository.findOne(id);
		
		StockTransFactor stockTransFactor = stockTransFactorFactoryForTest.newStockTransFactor();
		when(stockTransFactorServiceMapper.mapStockTransFactorEntityToStockTransFactor(stockTransFactorEntity)).thenReturn(stockTransFactor);

		// When
		StockTransFactor stockTransFactorFound = stockTransFactorService.findById(id);

		// Then
		assertEquals(stockTransFactor.getId(),stockTransFactorFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<StockTransFactorEntity> stockTransFactorEntitys = new ArrayList<StockTransFactorEntity>();
		StockTransFactorEntity stockTransFactorEntity1 = stockTransFactorEntityFactoryForTest.newStockTransFactorEntity();
		stockTransFactorEntitys.add(stockTransFactorEntity1);
		StockTransFactorEntity stockTransFactorEntity2 = stockTransFactorEntityFactoryForTest.newStockTransFactorEntity();
		stockTransFactorEntitys.add(stockTransFactorEntity2);
		when(stockTransFactorJpaRepository.findAll()).thenReturn(stockTransFactorEntitys);
		
		StockTransFactor stockTransFactor1 = stockTransFactorFactoryForTest.newStockTransFactor();
		when(stockTransFactorServiceMapper.mapStockTransFactorEntityToStockTransFactor(stockTransFactorEntity1)).thenReturn(stockTransFactor1);
		StockTransFactor stockTransFactor2 = stockTransFactorFactoryForTest.newStockTransFactor();
		when(stockTransFactorServiceMapper.mapStockTransFactorEntityToStockTransFactor(stockTransFactorEntity2)).thenReturn(stockTransFactor2);

		// When
		List<StockTransFactor> stockTransFactorsFounds = stockTransFactorService.findAll();

		// Then
		assertTrue(stockTransFactor1 == stockTransFactorsFounds.get(0));
		assertTrue(stockTransFactor2 == stockTransFactorsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		StockTransFactor stockTransFactor = stockTransFactorFactoryForTest.newStockTransFactor();

		StockTransFactorEntity stockTransFactorEntity = stockTransFactorEntityFactoryForTest.newStockTransFactorEntity();
		when(stockTransFactorJpaRepository.findOne(stockTransFactor.getId())).thenReturn(null);
		
		stockTransFactorEntity = new StockTransFactorEntity();
		stockTransFactorServiceMapper.mapStockTransFactorToStockTransFactorEntity(stockTransFactor, stockTransFactorEntity);
		StockTransFactorEntity stockTransFactorEntitySaved = stockTransFactorJpaRepository.save(stockTransFactorEntity);
		
		StockTransFactor stockTransFactorSaved = stockTransFactorFactoryForTest.newStockTransFactor();
		when(stockTransFactorServiceMapper.mapStockTransFactorEntityToStockTransFactor(stockTransFactorEntitySaved)).thenReturn(stockTransFactorSaved);

		// When
		StockTransFactor stockTransFactorResult = stockTransFactorService.create(stockTransFactor);

		// Then
		assertTrue(stockTransFactorResult == stockTransFactorSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		StockTransFactor stockTransFactor = stockTransFactorFactoryForTest.newStockTransFactor();

		StockTransFactorEntity stockTransFactorEntity = stockTransFactorEntityFactoryForTest.newStockTransFactorEntity();
		when(stockTransFactorJpaRepository.findOne(stockTransFactor.getId())).thenReturn(stockTransFactorEntity);

		// When
		Exception exception = null;
		try {
			stockTransFactorService.create(stockTransFactor);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		StockTransFactor stockTransFactor = stockTransFactorFactoryForTest.newStockTransFactor();

		StockTransFactorEntity stockTransFactorEntity = stockTransFactorEntityFactoryForTest.newStockTransFactorEntity();
		when(stockTransFactorJpaRepository.findOne(stockTransFactor.getId())).thenReturn(stockTransFactorEntity);
		
		StockTransFactorEntity stockTransFactorEntitySaved = stockTransFactorEntityFactoryForTest.newStockTransFactorEntity();
		when(stockTransFactorJpaRepository.save(stockTransFactorEntity)).thenReturn(stockTransFactorEntitySaved);
		
		StockTransFactor stockTransFactorSaved = stockTransFactorFactoryForTest.newStockTransFactor();
		when(stockTransFactorServiceMapper.mapStockTransFactorEntityToStockTransFactor(stockTransFactorEntitySaved)).thenReturn(stockTransFactorSaved);

		// When
		StockTransFactor stockTransFactorResult = stockTransFactorService.update(stockTransFactor);

		// Then
		verify(stockTransFactorServiceMapper).mapStockTransFactorToStockTransFactorEntity(stockTransFactor, stockTransFactorEntity);
		assertTrue(stockTransFactorResult == stockTransFactorSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		stockTransFactorService.delete(id);

		// Then
		verify(stockTransFactorJpaRepository).delete(id);
		
	}

}
