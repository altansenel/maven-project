/*
 * Created on 24 Þub 2016 ( Time 16:27:49 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.AdminUserAudit;
import org.demo.bean.jpa.AdminUserAuditEntity;
import java.util.Date;
import org.demo.business.service.mapping.AdminUserAuditServiceMapper;
import org.demo.data.repository.jpa.AdminUserAuditJpaRepository;
import org.demo.test.AdminUserAuditFactoryForTest;
import org.demo.test.AdminUserAuditEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of AdminUserAuditService
 */
@RunWith(MockitoJUnitRunner.class)
public class AdminUserAuditServiceImplTest {

	@InjectMocks
	private AdminUserAuditServiceImpl adminUserAuditService;
	@Mock
	private AdminUserAuditJpaRepository adminUserAuditJpaRepository;
	@Mock
	private AdminUserAuditServiceMapper adminUserAuditServiceMapper;
	
	private AdminUserAuditFactoryForTest adminUserAuditFactoryForTest = new AdminUserAuditFactoryForTest();

	private AdminUserAuditEntityFactoryForTest adminUserAuditEntityFactoryForTest = new AdminUserAuditEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		AdminUserAuditEntity adminUserAuditEntity = adminUserAuditJpaRepository.findOne(id);
		
		AdminUserAudit adminUserAudit = adminUserAuditFactoryForTest.newAdminUserAudit();
		when(adminUserAuditServiceMapper.mapAdminUserAuditEntityToAdminUserAudit(adminUserAuditEntity)).thenReturn(adminUserAudit);

		// When
		AdminUserAudit adminUserAuditFound = adminUserAuditService.findById(id);

		// Then
		assertEquals(adminUserAudit.getId(),adminUserAuditFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<AdminUserAuditEntity> adminUserAuditEntitys = new ArrayList<AdminUserAuditEntity>();
		AdminUserAuditEntity adminUserAuditEntity1 = adminUserAuditEntityFactoryForTest.newAdminUserAuditEntity();
		adminUserAuditEntitys.add(adminUserAuditEntity1);
		AdminUserAuditEntity adminUserAuditEntity2 = adminUserAuditEntityFactoryForTest.newAdminUserAuditEntity();
		adminUserAuditEntitys.add(adminUserAuditEntity2);
		when(adminUserAuditJpaRepository.findAll()).thenReturn(adminUserAuditEntitys);
		
		AdminUserAudit adminUserAudit1 = adminUserAuditFactoryForTest.newAdminUserAudit();
		when(adminUserAuditServiceMapper.mapAdminUserAuditEntityToAdminUserAudit(adminUserAuditEntity1)).thenReturn(adminUserAudit1);
		AdminUserAudit adminUserAudit2 = adminUserAuditFactoryForTest.newAdminUserAudit();
		when(adminUserAuditServiceMapper.mapAdminUserAuditEntityToAdminUserAudit(adminUserAuditEntity2)).thenReturn(adminUserAudit2);

		// When
		List<AdminUserAudit> adminUserAuditsFounds = adminUserAuditService.findAll();

		// Then
		assertTrue(adminUserAudit1 == adminUserAuditsFounds.get(0));
		assertTrue(adminUserAudit2 == adminUserAuditsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		AdminUserAudit adminUserAudit = adminUserAuditFactoryForTest.newAdminUserAudit();

		AdminUserAuditEntity adminUserAuditEntity = adminUserAuditEntityFactoryForTest.newAdminUserAuditEntity();
		when(adminUserAuditJpaRepository.findOne(adminUserAudit.getId())).thenReturn(null);
		
		adminUserAuditEntity = new AdminUserAuditEntity();
		adminUserAuditServiceMapper.mapAdminUserAuditToAdminUserAuditEntity(adminUserAudit, adminUserAuditEntity);
		AdminUserAuditEntity adminUserAuditEntitySaved = adminUserAuditJpaRepository.save(adminUserAuditEntity);
		
		AdminUserAudit adminUserAuditSaved = adminUserAuditFactoryForTest.newAdminUserAudit();
		when(adminUserAuditServiceMapper.mapAdminUserAuditEntityToAdminUserAudit(adminUserAuditEntitySaved)).thenReturn(adminUserAuditSaved);

		// When
		AdminUserAudit adminUserAuditResult = adminUserAuditService.create(adminUserAudit);

		// Then
		assertTrue(adminUserAuditResult == adminUserAuditSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		AdminUserAudit adminUserAudit = adminUserAuditFactoryForTest.newAdminUserAudit();

		AdminUserAuditEntity adminUserAuditEntity = adminUserAuditEntityFactoryForTest.newAdminUserAuditEntity();
		when(adminUserAuditJpaRepository.findOne(adminUserAudit.getId())).thenReturn(adminUserAuditEntity);

		// When
		Exception exception = null;
		try {
			adminUserAuditService.create(adminUserAudit);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		AdminUserAudit adminUserAudit = adminUserAuditFactoryForTest.newAdminUserAudit();

		AdminUserAuditEntity adminUserAuditEntity = adminUserAuditEntityFactoryForTest.newAdminUserAuditEntity();
		when(adminUserAuditJpaRepository.findOne(adminUserAudit.getId())).thenReturn(adminUserAuditEntity);
		
		AdminUserAuditEntity adminUserAuditEntitySaved = adminUserAuditEntityFactoryForTest.newAdminUserAuditEntity();
		when(adminUserAuditJpaRepository.save(adminUserAuditEntity)).thenReturn(adminUserAuditEntitySaved);
		
		AdminUserAudit adminUserAuditSaved = adminUserAuditFactoryForTest.newAdminUserAudit();
		when(adminUserAuditServiceMapper.mapAdminUserAuditEntityToAdminUserAudit(adminUserAuditEntitySaved)).thenReturn(adminUserAuditSaved);

		// When
		AdminUserAudit adminUserAuditResult = adminUserAuditService.update(adminUserAudit);

		// Then
		verify(adminUserAuditServiceMapper).mapAdminUserAuditToAdminUserAuditEntity(adminUserAudit, adminUserAuditEntity);
		assertTrue(adminUserAuditResult == adminUserAuditSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		adminUserAuditService.delete(id);

		// Then
		verify(adminUserAuditJpaRepository).delete(id);
		
	}

}
