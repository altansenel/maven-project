/*
 * Created on 24 Þub 2016 ( Time 16:27:50 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.Contact;
import org.demo.bean.jpa.ContactEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.ContactServiceMapper;
import org.demo.data.repository.jpa.ContactJpaRepository;
import org.demo.test.ContactFactoryForTest;
import org.demo.test.ContactEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ContactService
 */
@RunWith(MockitoJUnitRunner.class)
public class ContactServiceImplTest {

	@InjectMocks
	private ContactServiceImpl contactService;
	@Mock
	private ContactJpaRepository contactJpaRepository;
	@Mock
	private ContactServiceMapper contactServiceMapper;
	
	private ContactFactoryForTest contactFactoryForTest = new ContactFactoryForTest();

	private ContactEntityFactoryForTest contactEntityFactoryForTest = new ContactEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		ContactEntity contactEntity = contactJpaRepository.findOne(id);
		
		Contact contact = contactFactoryForTest.newContact();
		when(contactServiceMapper.mapContactEntityToContact(contactEntity)).thenReturn(contact);

		// When
		Contact contactFound = contactService.findById(id);

		// Then
		assertEquals(contact.getId(),contactFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ContactEntity> contactEntitys = new ArrayList<ContactEntity>();
		ContactEntity contactEntity1 = contactEntityFactoryForTest.newContactEntity();
		contactEntitys.add(contactEntity1);
		ContactEntity contactEntity2 = contactEntityFactoryForTest.newContactEntity();
		contactEntitys.add(contactEntity2);
		when(contactJpaRepository.findAll()).thenReturn(contactEntitys);
		
		Contact contact1 = contactFactoryForTest.newContact();
		when(contactServiceMapper.mapContactEntityToContact(contactEntity1)).thenReturn(contact1);
		Contact contact2 = contactFactoryForTest.newContact();
		when(contactServiceMapper.mapContactEntityToContact(contactEntity2)).thenReturn(contact2);

		// When
		List<Contact> contactsFounds = contactService.findAll();

		// Then
		assertTrue(contact1 == contactsFounds.get(0));
		assertTrue(contact2 == contactsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Contact contact = contactFactoryForTest.newContact();

		ContactEntity contactEntity = contactEntityFactoryForTest.newContactEntity();
		when(contactJpaRepository.findOne(contact.getId())).thenReturn(null);
		
		contactEntity = new ContactEntity();
		contactServiceMapper.mapContactToContactEntity(contact, contactEntity);
		ContactEntity contactEntitySaved = contactJpaRepository.save(contactEntity);
		
		Contact contactSaved = contactFactoryForTest.newContact();
		when(contactServiceMapper.mapContactEntityToContact(contactEntitySaved)).thenReturn(contactSaved);

		// When
		Contact contactResult = contactService.create(contact);

		// Then
		assertTrue(contactResult == contactSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Contact contact = contactFactoryForTest.newContact();

		ContactEntity contactEntity = contactEntityFactoryForTest.newContactEntity();
		when(contactJpaRepository.findOne(contact.getId())).thenReturn(contactEntity);

		// When
		Exception exception = null;
		try {
			contactService.create(contact);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Contact contact = contactFactoryForTest.newContact();

		ContactEntity contactEntity = contactEntityFactoryForTest.newContactEntity();
		when(contactJpaRepository.findOne(contact.getId())).thenReturn(contactEntity);
		
		ContactEntity contactEntitySaved = contactEntityFactoryForTest.newContactEntity();
		when(contactJpaRepository.save(contactEntity)).thenReturn(contactEntitySaved);
		
		Contact contactSaved = contactFactoryForTest.newContact();
		when(contactServiceMapper.mapContactEntityToContact(contactEntitySaved)).thenReturn(contactSaved);

		// When
		Contact contactResult = contactService.update(contact);

		// Then
		verify(contactServiceMapper).mapContactToContactEntity(contact, contactEntity);
		assertTrue(contactResult == contactSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		contactService.delete(id);

		// Then
		verify(contactJpaRepository).delete(id);
		
	}

}
