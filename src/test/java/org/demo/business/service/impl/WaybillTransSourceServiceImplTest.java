/*
 * Created on 24 Þub 2016 ( Time 16:27:53 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.WaybillTransSource;
import org.demo.bean.jpa.WaybillTransSourceEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.WaybillTransSourceServiceMapper;
import org.demo.data.repository.jpa.WaybillTransSourceJpaRepository;
import org.demo.test.WaybillTransSourceFactoryForTest;
import org.demo.test.WaybillTransSourceEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of WaybillTransSourceService
 */
@RunWith(MockitoJUnitRunner.class)
public class WaybillTransSourceServiceImplTest {

	@InjectMocks
	private WaybillTransSourceServiceImpl waybillTransSourceService;
	@Mock
	private WaybillTransSourceJpaRepository waybillTransSourceJpaRepository;
	@Mock
	private WaybillTransSourceServiceMapper waybillTransSourceServiceMapper;
	
	private WaybillTransSourceFactoryForTest waybillTransSourceFactoryForTest = new WaybillTransSourceFactoryForTest();

	private WaybillTransSourceEntityFactoryForTest waybillTransSourceEntityFactoryForTest = new WaybillTransSourceEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		WaybillTransSourceEntity waybillTransSourceEntity = waybillTransSourceJpaRepository.findOne(id);
		
		WaybillTransSource waybillTransSource = waybillTransSourceFactoryForTest.newWaybillTransSource();
		when(waybillTransSourceServiceMapper.mapWaybillTransSourceEntityToWaybillTransSource(waybillTransSourceEntity)).thenReturn(waybillTransSource);

		// When
		WaybillTransSource waybillTransSourceFound = waybillTransSourceService.findById(id);

		// Then
		assertEquals(waybillTransSource.getId(),waybillTransSourceFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<WaybillTransSourceEntity> waybillTransSourceEntitys = new ArrayList<WaybillTransSourceEntity>();
		WaybillTransSourceEntity waybillTransSourceEntity1 = waybillTransSourceEntityFactoryForTest.newWaybillTransSourceEntity();
		waybillTransSourceEntitys.add(waybillTransSourceEntity1);
		WaybillTransSourceEntity waybillTransSourceEntity2 = waybillTransSourceEntityFactoryForTest.newWaybillTransSourceEntity();
		waybillTransSourceEntitys.add(waybillTransSourceEntity2);
		when(waybillTransSourceJpaRepository.findAll()).thenReturn(waybillTransSourceEntitys);
		
		WaybillTransSource waybillTransSource1 = waybillTransSourceFactoryForTest.newWaybillTransSource();
		when(waybillTransSourceServiceMapper.mapWaybillTransSourceEntityToWaybillTransSource(waybillTransSourceEntity1)).thenReturn(waybillTransSource1);
		WaybillTransSource waybillTransSource2 = waybillTransSourceFactoryForTest.newWaybillTransSource();
		when(waybillTransSourceServiceMapper.mapWaybillTransSourceEntityToWaybillTransSource(waybillTransSourceEntity2)).thenReturn(waybillTransSource2);

		// When
		List<WaybillTransSource> waybillTransSourcesFounds = waybillTransSourceService.findAll();

		// Then
		assertTrue(waybillTransSource1 == waybillTransSourcesFounds.get(0));
		assertTrue(waybillTransSource2 == waybillTransSourcesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		WaybillTransSource waybillTransSource = waybillTransSourceFactoryForTest.newWaybillTransSource();

		WaybillTransSourceEntity waybillTransSourceEntity = waybillTransSourceEntityFactoryForTest.newWaybillTransSourceEntity();
		when(waybillTransSourceJpaRepository.findOne(waybillTransSource.getId())).thenReturn(null);
		
		waybillTransSourceEntity = new WaybillTransSourceEntity();
		waybillTransSourceServiceMapper.mapWaybillTransSourceToWaybillTransSourceEntity(waybillTransSource, waybillTransSourceEntity);
		WaybillTransSourceEntity waybillTransSourceEntitySaved = waybillTransSourceJpaRepository.save(waybillTransSourceEntity);
		
		WaybillTransSource waybillTransSourceSaved = waybillTransSourceFactoryForTest.newWaybillTransSource();
		when(waybillTransSourceServiceMapper.mapWaybillTransSourceEntityToWaybillTransSource(waybillTransSourceEntitySaved)).thenReturn(waybillTransSourceSaved);

		// When
		WaybillTransSource waybillTransSourceResult = waybillTransSourceService.create(waybillTransSource);

		// Then
		assertTrue(waybillTransSourceResult == waybillTransSourceSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		WaybillTransSource waybillTransSource = waybillTransSourceFactoryForTest.newWaybillTransSource();

		WaybillTransSourceEntity waybillTransSourceEntity = waybillTransSourceEntityFactoryForTest.newWaybillTransSourceEntity();
		when(waybillTransSourceJpaRepository.findOne(waybillTransSource.getId())).thenReturn(waybillTransSourceEntity);

		// When
		Exception exception = null;
		try {
			waybillTransSourceService.create(waybillTransSource);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		WaybillTransSource waybillTransSource = waybillTransSourceFactoryForTest.newWaybillTransSource();

		WaybillTransSourceEntity waybillTransSourceEntity = waybillTransSourceEntityFactoryForTest.newWaybillTransSourceEntity();
		when(waybillTransSourceJpaRepository.findOne(waybillTransSource.getId())).thenReturn(waybillTransSourceEntity);
		
		WaybillTransSourceEntity waybillTransSourceEntitySaved = waybillTransSourceEntityFactoryForTest.newWaybillTransSourceEntity();
		when(waybillTransSourceJpaRepository.save(waybillTransSourceEntity)).thenReturn(waybillTransSourceEntitySaved);
		
		WaybillTransSource waybillTransSourceSaved = waybillTransSourceFactoryForTest.newWaybillTransSource();
		when(waybillTransSourceServiceMapper.mapWaybillTransSourceEntityToWaybillTransSource(waybillTransSourceEntitySaved)).thenReturn(waybillTransSourceSaved);

		// When
		WaybillTransSource waybillTransSourceResult = waybillTransSourceService.update(waybillTransSource);

		// Then
		verify(waybillTransSourceServiceMapper).mapWaybillTransSourceToWaybillTransSourceEntity(waybillTransSource, waybillTransSourceEntity);
		assertTrue(waybillTransSourceResult == waybillTransSourceSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		waybillTransSourceService.delete(id);

		// Then
		verify(waybillTransSourceJpaRepository).delete(id);
		
	}

}
