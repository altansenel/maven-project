/*
 * Created on 24 Þub 2016 ( Time 16:27:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.SafeTransSource;
import org.demo.bean.jpa.SafeTransSourceEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.SafeTransSourceServiceMapper;
import org.demo.data.repository.jpa.SafeTransSourceJpaRepository;
import org.demo.test.SafeTransSourceFactoryForTest;
import org.demo.test.SafeTransSourceEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of SafeTransSourceService
 */
@RunWith(MockitoJUnitRunner.class)
public class SafeTransSourceServiceImplTest {

	@InjectMocks
	private SafeTransSourceServiceImpl safeTransSourceService;
	@Mock
	private SafeTransSourceJpaRepository safeTransSourceJpaRepository;
	@Mock
	private SafeTransSourceServiceMapper safeTransSourceServiceMapper;
	
	private SafeTransSourceFactoryForTest safeTransSourceFactoryForTest = new SafeTransSourceFactoryForTest();

	private SafeTransSourceEntityFactoryForTest safeTransSourceEntityFactoryForTest = new SafeTransSourceEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		SafeTransSourceEntity safeTransSourceEntity = safeTransSourceJpaRepository.findOne(id);
		
		SafeTransSource safeTransSource = safeTransSourceFactoryForTest.newSafeTransSource();
		when(safeTransSourceServiceMapper.mapSafeTransSourceEntityToSafeTransSource(safeTransSourceEntity)).thenReturn(safeTransSource);

		// When
		SafeTransSource safeTransSourceFound = safeTransSourceService.findById(id);

		// Then
		assertEquals(safeTransSource.getId(),safeTransSourceFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<SafeTransSourceEntity> safeTransSourceEntitys = new ArrayList<SafeTransSourceEntity>();
		SafeTransSourceEntity safeTransSourceEntity1 = safeTransSourceEntityFactoryForTest.newSafeTransSourceEntity();
		safeTransSourceEntitys.add(safeTransSourceEntity1);
		SafeTransSourceEntity safeTransSourceEntity2 = safeTransSourceEntityFactoryForTest.newSafeTransSourceEntity();
		safeTransSourceEntitys.add(safeTransSourceEntity2);
		when(safeTransSourceJpaRepository.findAll()).thenReturn(safeTransSourceEntitys);
		
		SafeTransSource safeTransSource1 = safeTransSourceFactoryForTest.newSafeTransSource();
		when(safeTransSourceServiceMapper.mapSafeTransSourceEntityToSafeTransSource(safeTransSourceEntity1)).thenReturn(safeTransSource1);
		SafeTransSource safeTransSource2 = safeTransSourceFactoryForTest.newSafeTransSource();
		when(safeTransSourceServiceMapper.mapSafeTransSourceEntityToSafeTransSource(safeTransSourceEntity2)).thenReturn(safeTransSource2);

		// When
		List<SafeTransSource> safeTransSourcesFounds = safeTransSourceService.findAll();

		// Then
		assertTrue(safeTransSource1 == safeTransSourcesFounds.get(0));
		assertTrue(safeTransSource2 == safeTransSourcesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		SafeTransSource safeTransSource = safeTransSourceFactoryForTest.newSafeTransSource();

		SafeTransSourceEntity safeTransSourceEntity = safeTransSourceEntityFactoryForTest.newSafeTransSourceEntity();
		when(safeTransSourceJpaRepository.findOne(safeTransSource.getId())).thenReturn(null);
		
		safeTransSourceEntity = new SafeTransSourceEntity();
		safeTransSourceServiceMapper.mapSafeTransSourceToSafeTransSourceEntity(safeTransSource, safeTransSourceEntity);
		SafeTransSourceEntity safeTransSourceEntitySaved = safeTransSourceJpaRepository.save(safeTransSourceEntity);
		
		SafeTransSource safeTransSourceSaved = safeTransSourceFactoryForTest.newSafeTransSource();
		when(safeTransSourceServiceMapper.mapSafeTransSourceEntityToSafeTransSource(safeTransSourceEntitySaved)).thenReturn(safeTransSourceSaved);

		// When
		SafeTransSource safeTransSourceResult = safeTransSourceService.create(safeTransSource);

		// Then
		assertTrue(safeTransSourceResult == safeTransSourceSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		SafeTransSource safeTransSource = safeTransSourceFactoryForTest.newSafeTransSource();

		SafeTransSourceEntity safeTransSourceEntity = safeTransSourceEntityFactoryForTest.newSafeTransSourceEntity();
		when(safeTransSourceJpaRepository.findOne(safeTransSource.getId())).thenReturn(safeTransSourceEntity);

		// When
		Exception exception = null;
		try {
			safeTransSourceService.create(safeTransSource);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		SafeTransSource safeTransSource = safeTransSourceFactoryForTest.newSafeTransSource();

		SafeTransSourceEntity safeTransSourceEntity = safeTransSourceEntityFactoryForTest.newSafeTransSourceEntity();
		when(safeTransSourceJpaRepository.findOne(safeTransSource.getId())).thenReturn(safeTransSourceEntity);
		
		SafeTransSourceEntity safeTransSourceEntitySaved = safeTransSourceEntityFactoryForTest.newSafeTransSourceEntity();
		when(safeTransSourceJpaRepository.save(safeTransSourceEntity)).thenReturn(safeTransSourceEntitySaved);
		
		SafeTransSource safeTransSourceSaved = safeTransSourceFactoryForTest.newSafeTransSource();
		when(safeTransSourceServiceMapper.mapSafeTransSourceEntityToSafeTransSource(safeTransSourceEntitySaved)).thenReturn(safeTransSourceSaved);

		// When
		SafeTransSource safeTransSourceResult = safeTransSourceService.update(safeTransSource);

		// Then
		verify(safeTransSourceServiceMapper).mapSafeTransSourceToSafeTransSourceEntity(safeTransSource, safeTransSourceEntity);
		assertTrue(safeTransSourceResult == safeTransSourceSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		safeTransSourceService.delete(id);

		// Then
		verify(safeTransSourceJpaRepository).delete(id);
		
	}

}
