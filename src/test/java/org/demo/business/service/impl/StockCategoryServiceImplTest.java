/*
 * Created on 24 Þub 2016 ( Time 16:27:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.StockCategory;
import org.demo.bean.jpa.StockCategoryEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.StockCategoryServiceMapper;
import org.demo.data.repository.jpa.StockCategoryJpaRepository;
import org.demo.test.StockCategoryFactoryForTest;
import org.demo.test.StockCategoryEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of StockCategoryService
 */
@RunWith(MockitoJUnitRunner.class)
public class StockCategoryServiceImplTest {

	@InjectMocks
	private StockCategoryServiceImpl stockCategoryService;
	@Mock
	private StockCategoryJpaRepository stockCategoryJpaRepository;
	@Mock
	private StockCategoryServiceMapper stockCategoryServiceMapper;
	
	private StockCategoryFactoryForTest stockCategoryFactoryForTest = new StockCategoryFactoryForTest();

	private StockCategoryEntityFactoryForTest stockCategoryEntityFactoryForTest = new StockCategoryEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		StockCategoryEntity stockCategoryEntity = stockCategoryJpaRepository.findOne(id);
		
		StockCategory stockCategory = stockCategoryFactoryForTest.newStockCategory();
		when(stockCategoryServiceMapper.mapStockCategoryEntityToStockCategory(stockCategoryEntity)).thenReturn(stockCategory);

		// When
		StockCategory stockCategoryFound = stockCategoryService.findById(id);

		// Then
		assertEquals(stockCategory.getId(),stockCategoryFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<StockCategoryEntity> stockCategoryEntitys = new ArrayList<StockCategoryEntity>();
		StockCategoryEntity stockCategoryEntity1 = stockCategoryEntityFactoryForTest.newStockCategoryEntity();
		stockCategoryEntitys.add(stockCategoryEntity1);
		StockCategoryEntity stockCategoryEntity2 = stockCategoryEntityFactoryForTest.newStockCategoryEntity();
		stockCategoryEntitys.add(stockCategoryEntity2);
		when(stockCategoryJpaRepository.findAll()).thenReturn(stockCategoryEntitys);
		
		StockCategory stockCategory1 = stockCategoryFactoryForTest.newStockCategory();
		when(stockCategoryServiceMapper.mapStockCategoryEntityToStockCategory(stockCategoryEntity1)).thenReturn(stockCategory1);
		StockCategory stockCategory2 = stockCategoryFactoryForTest.newStockCategory();
		when(stockCategoryServiceMapper.mapStockCategoryEntityToStockCategory(stockCategoryEntity2)).thenReturn(stockCategory2);

		// When
		List<StockCategory> stockCategorysFounds = stockCategoryService.findAll();

		// Then
		assertTrue(stockCategory1 == stockCategorysFounds.get(0));
		assertTrue(stockCategory2 == stockCategorysFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		StockCategory stockCategory = stockCategoryFactoryForTest.newStockCategory();

		StockCategoryEntity stockCategoryEntity = stockCategoryEntityFactoryForTest.newStockCategoryEntity();
		when(stockCategoryJpaRepository.findOne(stockCategory.getId())).thenReturn(null);
		
		stockCategoryEntity = new StockCategoryEntity();
		stockCategoryServiceMapper.mapStockCategoryToStockCategoryEntity(stockCategory, stockCategoryEntity);
		StockCategoryEntity stockCategoryEntitySaved = stockCategoryJpaRepository.save(stockCategoryEntity);
		
		StockCategory stockCategorySaved = stockCategoryFactoryForTest.newStockCategory();
		when(stockCategoryServiceMapper.mapStockCategoryEntityToStockCategory(stockCategoryEntitySaved)).thenReturn(stockCategorySaved);

		// When
		StockCategory stockCategoryResult = stockCategoryService.create(stockCategory);

		// Then
		assertTrue(stockCategoryResult == stockCategorySaved);
	}

	@Test
	public void createKOExists() {
		// Given
		StockCategory stockCategory = stockCategoryFactoryForTest.newStockCategory();

		StockCategoryEntity stockCategoryEntity = stockCategoryEntityFactoryForTest.newStockCategoryEntity();
		when(stockCategoryJpaRepository.findOne(stockCategory.getId())).thenReturn(stockCategoryEntity);

		// When
		Exception exception = null;
		try {
			stockCategoryService.create(stockCategory);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		StockCategory stockCategory = stockCategoryFactoryForTest.newStockCategory();

		StockCategoryEntity stockCategoryEntity = stockCategoryEntityFactoryForTest.newStockCategoryEntity();
		when(stockCategoryJpaRepository.findOne(stockCategory.getId())).thenReturn(stockCategoryEntity);
		
		StockCategoryEntity stockCategoryEntitySaved = stockCategoryEntityFactoryForTest.newStockCategoryEntity();
		when(stockCategoryJpaRepository.save(stockCategoryEntity)).thenReturn(stockCategoryEntitySaved);
		
		StockCategory stockCategorySaved = stockCategoryFactoryForTest.newStockCategory();
		when(stockCategoryServiceMapper.mapStockCategoryEntityToStockCategory(stockCategoryEntitySaved)).thenReturn(stockCategorySaved);

		// When
		StockCategory stockCategoryResult = stockCategoryService.update(stockCategory);

		// Then
		verify(stockCategoryServiceMapper).mapStockCategoryToStockCategoryEntity(stockCategory, stockCategoryEntity);
		assertTrue(stockCategoryResult == stockCategorySaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		stockCategoryService.delete(id);

		// Then
		verify(stockCategoryJpaRepository).delete(id);
		
	}

}
