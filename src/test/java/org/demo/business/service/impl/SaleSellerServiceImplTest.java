/*
 * Created on 24 Þub 2016 ( Time 16:27:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.SaleSeller;
import org.demo.bean.jpa.SaleSellerEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.SaleSellerServiceMapper;
import org.demo.data.repository.jpa.SaleSellerJpaRepository;
import org.demo.test.SaleSellerFactoryForTest;
import org.demo.test.SaleSellerEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of SaleSellerService
 */
@RunWith(MockitoJUnitRunner.class)
public class SaleSellerServiceImplTest {

	@InjectMocks
	private SaleSellerServiceImpl saleSellerService;
	@Mock
	private SaleSellerJpaRepository saleSellerJpaRepository;
	@Mock
	private SaleSellerServiceMapper saleSellerServiceMapper;
	
	private SaleSellerFactoryForTest saleSellerFactoryForTest = new SaleSellerFactoryForTest();

	private SaleSellerEntityFactoryForTest saleSellerEntityFactoryForTest = new SaleSellerEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		SaleSellerEntity saleSellerEntity = saleSellerJpaRepository.findOne(id);
		
		SaleSeller saleSeller = saleSellerFactoryForTest.newSaleSeller();
		when(saleSellerServiceMapper.mapSaleSellerEntityToSaleSeller(saleSellerEntity)).thenReturn(saleSeller);

		// When
		SaleSeller saleSellerFound = saleSellerService.findById(id);

		// Then
		assertEquals(saleSeller.getId(),saleSellerFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<SaleSellerEntity> saleSellerEntitys = new ArrayList<SaleSellerEntity>();
		SaleSellerEntity saleSellerEntity1 = saleSellerEntityFactoryForTest.newSaleSellerEntity();
		saleSellerEntitys.add(saleSellerEntity1);
		SaleSellerEntity saleSellerEntity2 = saleSellerEntityFactoryForTest.newSaleSellerEntity();
		saleSellerEntitys.add(saleSellerEntity2);
		when(saleSellerJpaRepository.findAll()).thenReturn(saleSellerEntitys);
		
		SaleSeller saleSeller1 = saleSellerFactoryForTest.newSaleSeller();
		when(saleSellerServiceMapper.mapSaleSellerEntityToSaleSeller(saleSellerEntity1)).thenReturn(saleSeller1);
		SaleSeller saleSeller2 = saleSellerFactoryForTest.newSaleSeller();
		when(saleSellerServiceMapper.mapSaleSellerEntityToSaleSeller(saleSellerEntity2)).thenReturn(saleSeller2);

		// When
		List<SaleSeller> saleSellersFounds = saleSellerService.findAll();

		// Then
		assertTrue(saleSeller1 == saleSellersFounds.get(0));
		assertTrue(saleSeller2 == saleSellersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		SaleSeller saleSeller = saleSellerFactoryForTest.newSaleSeller();

		SaleSellerEntity saleSellerEntity = saleSellerEntityFactoryForTest.newSaleSellerEntity();
		when(saleSellerJpaRepository.findOne(saleSeller.getId())).thenReturn(null);
		
		saleSellerEntity = new SaleSellerEntity();
		saleSellerServiceMapper.mapSaleSellerToSaleSellerEntity(saleSeller, saleSellerEntity);
		SaleSellerEntity saleSellerEntitySaved = saleSellerJpaRepository.save(saleSellerEntity);
		
		SaleSeller saleSellerSaved = saleSellerFactoryForTest.newSaleSeller();
		when(saleSellerServiceMapper.mapSaleSellerEntityToSaleSeller(saleSellerEntitySaved)).thenReturn(saleSellerSaved);

		// When
		SaleSeller saleSellerResult = saleSellerService.create(saleSeller);

		// Then
		assertTrue(saleSellerResult == saleSellerSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		SaleSeller saleSeller = saleSellerFactoryForTest.newSaleSeller();

		SaleSellerEntity saleSellerEntity = saleSellerEntityFactoryForTest.newSaleSellerEntity();
		when(saleSellerJpaRepository.findOne(saleSeller.getId())).thenReturn(saleSellerEntity);

		// When
		Exception exception = null;
		try {
			saleSellerService.create(saleSeller);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		SaleSeller saleSeller = saleSellerFactoryForTest.newSaleSeller();

		SaleSellerEntity saleSellerEntity = saleSellerEntityFactoryForTest.newSaleSellerEntity();
		when(saleSellerJpaRepository.findOne(saleSeller.getId())).thenReturn(saleSellerEntity);
		
		SaleSellerEntity saleSellerEntitySaved = saleSellerEntityFactoryForTest.newSaleSellerEntity();
		when(saleSellerJpaRepository.save(saleSellerEntity)).thenReturn(saleSellerEntitySaved);
		
		SaleSeller saleSellerSaved = saleSellerFactoryForTest.newSaleSeller();
		when(saleSellerServiceMapper.mapSaleSellerEntityToSaleSeller(saleSellerEntitySaved)).thenReturn(saleSellerSaved);

		// When
		SaleSeller saleSellerResult = saleSellerService.update(saleSeller);

		// Then
		verify(saleSellerServiceMapper).mapSaleSellerToSaleSellerEntity(saleSeller, saleSellerEntity);
		assertTrue(saleSellerResult == saleSellerSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		saleSellerService.delete(id);

		// Then
		verify(saleSellerJpaRepository).delete(id);
		
	}

}
