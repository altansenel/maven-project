/*
 * Created on 24 Þub 2016 ( Time 16:27:50 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.GlobalPrivateCode;
import org.demo.bean.jpa.GlobalPrivateCodeEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.GlobalPrivateCodeServiceMapper;
import org.demo.data.repository.jpa.GlobalPrivateCodeJpaRepository;
import org.demo.test.GlobalPrivateCodeFactoryForTest;
import org.demo.test.GlobalPrivateCodeEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of GlobalPrivateCodeService
 */
@RunWith(MockitoJUnitRunner.class)
public class GlobalPrivateCodeServiceImplTest {

	@InjectMocks
	private GlobalPrivateCodeServiceImpl globalPrivateCodeService;
	@Mock
	private GlobalPrivateCodeJpaRepository globalPrivateCodeJpaRepository;
	@Mock
	private GlobalPrivateCodeServiceMapper globalPrivateCodeServiceMapper;
	
	private GlobalPrivateCodeFactoryForTest globalPrivateCodeFactoryForTest = new GlobalPrivateCodeFactoryForTest();

	private GlobalPrivateCodeEntityFactoryForTest globalPrivateCodeEntityFactoryForTest = new GlobalPrivateCodeEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		GlobalPrivateCodeEntity globalPrivateCodeEntity = globalPrivateCodeJpaRepository.findOne(id);
		
		GlobalPrivateCode globalPrivateCode = globalPrivateCodeFactoryForTest.newGlobalPrivateCode();
		when(globalPrivateCodeServiceMapper.mapGlobalPrivateCodeEntityToGlobalPrivateCode(globalPrivateCodeEntity)).thenReturn(globalPrivateCode);

		// When
		GlobalPrivateCode globalPrivateCodeFound = globalPrivateCodeService.findById(id);

		// Then
		assertEquals(globalPrivateCode.getId(),globalPrivateCodeFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<GlobalPrivateCodeEntity> globalPrivateCodeEntitys = new ArrayList<GlobalPrivateCodeEntity>();
		GlobalPrivateCodeEntity globalPrivateCodeEntity1 = globalPrivateCodeEntityFactoryForTest.newGlobalPrivateCodeEntity();
		globalPrivateCodeEntitys.add(globalPrivateCodeEntity1);
		GlobalPrivateCodeEntity globalPrivateCodeEntity2 = globalPrivateCodeEntityFactoryForTest.newGlobalPrivateCodeEntity();
		globalPrivateCodeEntitys.add(globalPrivateCodeEntity2);
		when(globalPrivateCodeJpaRepository.findAll()).thenReturn(globalPrivateCodeEntitys);
		
		GlobalPrivateCode globalPrivateCode1 = globalPrivateCodeFactoryForTest.newGlobalPrivateCode();
		when(globalPrivateCodeServiceMapper.mapGlobalPrivateCodeEntityToGlobalPrivateCode(globalPrivateCodeEntity1)).thenReturn(globalPrivateCode1);
		GlobalPrivateCode globalPrivateCode2 = globalPrivateCodeFactoryForTest.newGlobalPrivateCode();
		when(globalPrivateCodeServiceMapper.mapGlobalPrivateCodeEntityToGlobalPrivateCode(globalPrivateCodeEntity2)).thenReturn(globalPrivateCode2);

		// When
		List<GlobalPrivateCode> globalPrivateCodesFounds = globalPrivateCodeService.findAll();

		// Then
		assertTrue(globalPrivateCode1 == globalPrivateCodesFounds.get(0));
		assertTrue(globalPrivateCode2 == globalPrivateCodesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		GlobalPrivateCode globalPrivateCode = globalPrivateCodeFactoryForTest.newGlobalPrivateCode();

		GlobalPrivateCodeEntity globalPrivateCodeEntity = globalPrivateCodeEntityFactoryForTest.newGlobalPrivateCodeEntity();
		when(globalPrivateCodeJpaRepository.findOne(globalPrivateCode.getId())).thenReturn(null);
		
		globalPrivateCodeEntity = new GlobalPrivateCodeEntity();
		globalPrivateCodeServiceMapper.mapGlobalPrivateCodeToGlobalPrivateCodeEntity(globalPrivateCode, globalPrivateCodeEntity);
		GlobalPrivateCodeEntity globalPrivateCodeEntitySaved = globalPrivateCodeJpaRepository.save(globalPrivateCodeEntity);
		
		GlobalPrivateCode globalPrivateCodeSaved = globalPrivateCodeFactoryForTest.newGlobalPrivateCode();
		when(globalPrivateCodeServiceMapper.mapGlobalPrivateCodeEntityToGlobalPrivateCode(globalPrivateCodeEntitySaved)).thenReturn(globalPrivateCodeSaved);

		// When
		GlobalPrivateCode globalPrivateCodeResult = globalPrivateCodeService.create(globalPrivateCode);

		// Then
		assertTrue(globalPrivateCodeResult == globalPrivateCodeSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		GlobalPrivateCode globalPrivateCode = globalPrivateCodeFactoryForTest.newGlobalPrivateCode();

		GlobalPrivateCodeEntity globalPrivateCodeEntity = globalPrivateCodeEntityFactoryForTest.newGlobalPrivateCodeEntity();
		when(globalPrivateCodeJpaRepository.findOne(globalPrivateCode.getId())).thenReturn(globalPrivateCodeEntity);

		// When
		Exception exception = null;
		try {
			globalPrivateCodeService.create(globalPrivateCode);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		GlobalPrivateCode globalPrivateCode = globalPrivateCodeFactoryForTest.newGlobalPrivateCode();

		GlobalPrivateCodeEntity globalPrivateCodeEntity = globalPrivateCodeEntityFactoryForTest.newGlobalPrivateCodeEntity();
		when(globalPrivateCodeJpaRepository.findOne(globalPrivateCode.getId())).thenReturn(globalPrivateCodeEntity);
		
		GlobalPrivateCodeEntity globalPrivateCodeEntitySaved = globalPrivateCodeEntityFactoryForTest.newGlobalPrivateCodeEntity();
		when(globalPrivateCodeJpaRepository.save(globalPrivateCodeEntity)).thenReturn(globalPrivateCodeEntitySaved);
		
		GlobalPrivateCode globalPrivateCodeSaved = globalPrivateCodeFactoryForTest.newGlobalPrivateCode();
		when(globalPrivateCodeServiceMapper.mapGlobalPrivateCodeEntityToGlobalPrivateCode(globalPrivateCodeEntitySaved)).thenReturn(globalPrivateCodeSaved);

		// When
		GlobalPrivateCode globalPrivateCodeResult = globalPrivateCodeService.update(globalPrivateCode);

		// Then
		verify(globalPrivateCodeServiceMapper).mapGlobalPrivateCodeToGlobalPrivateCodeEntity(globalPrivateCode, globalPrivateCodeEntity);
		assertTrue(globalPrivateCodeResult == globalPrivateCodeSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		globalPrivateCodeService.delete(id);

		// Then
		verify(globalPrivateCodeJpaRepository).delete(id);
		
	}

}
