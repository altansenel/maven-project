/*
 * Created on 24 Þub 2016 ( Time 16:27:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.StockTransDetail;
import org.demo.bean.jpa.StockTransDetailEntity;
import java.util.Date;
import org.demo.business.service.mapping.StockTransDetailServiceMapper;
import org.demo.data.repository.jpa.StockTransDetailJpaRepository;
import org.demo.test.StockTransDetailFactoryForTest;
import org.demo.test.StockTransDetailEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of StockTransDetailService
 */
@RunWith(MockitoJUnitRunner.class)
public class StockTransDetailServiceImplTest {

	@InjectMocks
	private StockTransDetailServiceImpl stockTransDetailService;
	@Mock
	private StockTransDetailJpaRepository stockTransDetailJpaRepository;
	@Mock
	private StockTransDetailServiceMapper stockTransDetailServiceMapper;
	
	private StockTransDetailFactoryForTest stockTransDetailFactoryForTest = new StockTransDetailFactoryForTest();

	private StockTransDetailEntityFactoryForTest stockTransDetailEntityFactoryForTest = new StockTransDetailEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		StockTransDetailEntity stockTransDetailEntity = stockTransDetailJpaRepository.findOne(id);
		
		StockTransDetail stockTransDetail = stockTransDetailFactoryForTest.newStockTransDetail();
		when(stockTransDetailServiceMapper.mapStockTransDetailEntityToStockTransDetail(stockTransDetailEntity)).thenReturn(stockTransDetail);

		// When
		StockTransDetail stockTransDetailFound = stockTransDetailService.findById(id);

		// Then
		assertEquals(stockTransDetail.getId(),stockTransDetailFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<StockTransDetailEntity> stockTransDetailEntitys = new ArrayList<StockTransDetailEntity>();
		StockTransDetailEntity stockTransDetailEntity1 = stockTransDetailEntityFactoryForTest.newStockTransDetailEntity();
		stockTransDetailEntitys.add(stockTransDetailEntity1);
		StockTransDetailEntity stockTransDetailEntity2 = stockTransDetailEntityFactoryForTest.newStockTransDetailEntity();
		stockTransDetailEntitys.add(stockTransDetailEntity2);
		when(stockTransDetailJpaRepository.findAll()).thenReturn(stockTransDetailEntitys);
		
		StockTransDetail stockTransDetail1 = stockTransDetailFactoryForTest.newStockTransDetail();
		when(stockTransDetailServiceMapper.mapStockTransDetailEntityToStockTransDetail(stockTransDetailEntity1)).thenReturn(stockTransDetail1);
		StockTransDetail stockTransDetail2 = stockTransDetailFactoryForTest.newStockTransDetail();
		when(stockTransDetailServiceMapper.mapStockTransDetailEntityToStockTransDetail(stockTransDetailEntity2)).thenReturn(stockTransDetail2);

		// When
		List<StockTransDetail> stockTransDetailsFounds = stockTransDetailService.findAll();

		// Then
		assertTrue(stockTransDetail1 == stockTransDetailsFounds.get(0));
		assertTrue(stockTransDetail2 == stockTransDetailsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		StockTransDetail stockTransDetail = stockTransDetailFactoryForTest.newStockTransDetail();

		StockTransDetailEntity stockTransDetailEntity = stockTransDetailEntityFactoryForTest.newStockTransDetailEntity();
		when(stockTransDetailJpaRepository.findOne(stockTransDetail.getId())).thenReturn(null);
		
		stockTransDetailEntity = new StockTransDetailEntity();
		stockTransDetailServiceMapper.mapStockTransDetailToStockTransDetailEntity(stockTransDetail, stockTransDetailEntity);
		StockTransDetailEntity stockTransDetailEntitySaved = stockTransDetailJpaRepository.save(stockTransDetailEntity);
		
		StockTransDetail stockTransDetailSaved = stockTransDetailFactoryForTest.newStockTransDetail();
		when(stockTransDetailServiceMapper.mapStockTransDetailEntityToStockTransDetail(stockTransDetailEntitySaved)).thenReturn(stockTransDetailSaved);

		// When
		StockTransDetail stockTransDetailResult = stockTransDetailService.create(stockTransDetail);

		// Then
		assertTrue(stockTransDetailResult == stockTransDetailSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		StockTransDetail stockTransDetail = stockTransDetailFactoryForTest.newStockTransDetail();

		StockTransDetailEntity stockTransDetailEntity = stockTransDetailEntityFactoryForTest.newStockTransDetailEntity();
		when(stockTransDetailJpaRepository.findOne(stockTransDetail.getId())).thenReturn(stockTransDetailEntity);

		// When
		Exception exception = null;
		try {
			stockTransDetailService.create(stockTransDetail);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		StockTransDetail stockTransDetail = stockTransDetailFactoryForTest.newStockTransDetail();

		StockTransDetailEntity stockTransDetailEntity = stockTransDetailEntityFactoryForTest.newStockTransDetailEntity();
		when(stockTransDetailJpaRepository.findOne(stockTransDetail.getId())).thenReturn(stockTransDetailEntity);
		
		StockTransDetailEntity stockTransDetailEntitySaved = stockTransDetailEntityFactoryForTest.newStockTransDetailEntity();
		when(stockTransDetailJpaRepository.save(stockTransDetailEntity)).thenReturn(stockTransDetailEntitySaved);
		
		StockTransDetail stockTransDetailSaved = stockTransDetailFactoryForTest.newStockTransDetail();
		when(stockTransDetailServiceMapper.mapStockTransDetailEntityToStockTransDetail(stockTransDetailEntitySaved)).thenReturn(stockTransDetailSaved);

		// When
		StockTransDetail stockTransDetailResult = stockTransDetailService.update(stockTransDetail);

		// Then
		verify(stockTransDetailServiceMapper).mapStockTransDetailToStockTransDetailEntity(stockTransDetail, stockTransDetailEntity);
		assertTrue(stockTransDetailResult == stockTransDetailSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		stockTransDetailService.delete(id);

		// Then
		verify(stockTransDetailJpaRepository).delete(id);
		
	}

}
