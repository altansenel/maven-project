/*
 * Created on 24 Þub 2016 ( Time 16:27:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.StockExtraFields;
import org.demo.bean.jpa.StockExtraFieldsEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.StockExtraFieldsServiceMapper;
import org.demo.data.repository.jpa.StockExtraFieldsJpaRepository;
import org.demo.test.StockExtraFieldsFactoryForTest;
import org.demo.test.StockExtraFieldsEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of StockExtraFieldsService
 */
@RunWith(MockitoJUnitRunner.class)
public class StockExtraFieldsServiceImplTest {

	@InjectMocks
	private StockExtraFieldsServiceImpl stockExtraFieldsService;
	@Mock
	private StockExtraFieldsJpaRepository stockExtraFieldsJpaRepository;
	@Mock
	private StockExtraFieldsServiceMapper stockExtraFieldsServiceMapper;
	
	private StockExtraFieldsFactoryForTest stockExtraFieldsFactoryForTest = new StockExtraFieldsFactoryForTest();

	private StockExtraFieldsEntityFactoryForTest stockExtraFieldsEntityFactoryForTest = new StockExtraFieldsEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		StockExtraFieldsEntity stockExtraFieldsEntity = stockExtraFieldsJpaRepository.findOne(id);
		
		StockExtraFields stockExtraFields = stockExtraFieldsFactoryForTest.newStockExtraFields();
		when(stockExtraFieldsServiceMapper.mapStockExtraFieldsEntityToStockExtraFields(stockExtraFieldsEntity)).thenReturn(stockExtraFields);

		// When
		StockExtraFields stockExtraFieldsFound = stockExtraFieldsService.findById(id);

		// Then
		assertEquals(stockExtraFields.getId(),stockExtraFieldsFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<StockExtraFieldsEntity> stockExtraFieldsEntitys = new ArrayList<StockExtraFieldsEntity>();
		StockExtraFieldsEntity stockExtraFieldsEntity1 = stockExtraFieldsEntityFactoryForTest.newStockExtraFieldsEntity();
		stockExtraFieldsEntitys.add(stockExtraFieldsEntity1);
		StockExtraFieldsEntity stockExtraFieldsEntity2 = stockExtraFieldsEntityFactoryForTest.newStockExtraFieldsEntity();
		stockExtraFieldsEntitys.add(stockExtraFieldsEntity2);
		when(stockExtraFieldsJpaRepository.findAll()).thenReturn(stockExtraFieldsEntitys);
		
		StockExtraFields stockExtraFields1 = stockExtraFieldsFactoryForTest.newStockExtraFields();
		when(stockExtraFieldsServiceMapper.mapStockExtraFieldsEntityToStockExtraFields(stockExtraFieldsEntity1)).thenReturn(stockExtraFields1);
		StockExtraFields stockExtraFields2 = stockExtraFieldsFactoryForTest.newStockExtraFields();
		when(stockExtraFieldsServiceMapper.mapStockExtraFieldsEntityToStockExtraFields(stockExtraFieldsEntity2)).thenReturn(stockExtraFields2);

		// When
		List<StockExtraFields> stockExtraFieldssFounds = stockExtraFieldsService.findAll();

		// Then
		assertTrue(stockExtraFields1 == stockExtraFieldssFounds.get(0));
		assertTrue(stockExtraFields2 == stockExtraFieldssFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		StockExtraFields stockExtraFields = stockExtraFieldsFactoryForTest.newStockExtraFields();

		StockExtraFieldsEntity stockExtraFieldsEntity = stockExtraFieldsEntityFactoryForTest.newStockExtraFieldsEntity();
		when(stockExtraFieldsJpaRepository.findOne(stockExtraFields.getId())).thenReturn(null);
		
		stockExtraFieldsEntity = new StockExtraFieldsEntity();
		stockExtraFieldsServiceMapper.mapStockExtraFieldsToStockExtraFieldsEntity(stockExtraFields, stockExtraFieldsEntity);
		StockExtraFieldsEntity stockExtraFieldsEntitySaved = stockExtraFieldsJpaRepository.save(stockExtraFieldsEntity);
		
		StockExtraFields stockExtraFieldsSaved = stockExtraFieldsFactoryForTest.newStockExtraFields();
		when(stockExtraFieldsServiceMapper.mapStockExtraFieldsEntityToStockExtraFields(stockExtraFieldsEntitySaved)).thenReturn(stockExtraFieldsSaved);

		// When
		StockExtraFields stockExtraFieldsResult = stockExtraFieldsService.create(stockExtraFields);

		// Then
		assertTrue(stockExtraFieldsResult == stockExtraFieldsSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		StockExtraFields stockExtraFields = stockExtraFieldsFactoryForTest.newStockExtraFields();

		StockExtraFieldsEntity stockExtraFieldsEntity = stockExtraFieldsEntityFactoryForTest.newStockExtraFieldsEntity();
		when(stockExtraFieldsJpaRepository.findOne(stockExtraFields.getId())).thenReturn(stockExtraFieldsEntity);

		// When
		Exception exception = null;
		try {
			stockExtraFieldsService.create(stockExtraFields);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		StockExtraFields stockExtraFields = stockExtraFieldsFactoryForTest.newStockExtraFields();

		StockExtraFieldsEntity stockExtraFieldsEntity = stockExtraFieldsEntityFactoryForTest.newStockExtraFieldsEntity();
		when(stockExtraFieldsJpaRepository.findOne(stockExtraFields.getId())).thenReturn(stockExtraFieldsEntity);
		
		StockExtraFieldsEntity stockExtraFieldsEntitySaved = stockExtraFieldsEntityFactoryForTest.newStockExtraFieldsEntity();
		when(stockExtraFieldsJpaRepository.save(stockExtraFieldsEntity)).thenReturn(stockExtraFieldsEntitySaved);
		
		StockExtraFields stockExtraFieldsSaved = stockExtraFieldsFactoryForTest.newStockExtraFields();
		when(stockExtraFieldsServiceMapper.mapStockExtraFieldsEntityToStockExtraFields(stockExtraFieldsEntitySaved)).thenReturn(stockExtraFieldsSaved);

		// When
		StockExtraFields stockExtraFieldsResult = stockExtraFieldsService.update(stockExtraFields);

		// Then
		verify(stockExtraFieldsServiceMapper).mapStockExtraFieldsToStockExtraFieldsEntity(stockExtraFields, stockExtraFieldsEntity);
		assertTrue(stockExtraFieldsResult == stockExtraFieldsSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		stockExtraFieldsService.delete(id);

		// Then
		verify(stockExtraFieldsJpaRepository).delete(id);
		
	}

}
