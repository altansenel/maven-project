/*
 * Created on 24 Þub 2016 ( Time 16:27:53 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.StockUnit;
import org.demo.bean.jpa.StockUnitEntity;
import java.util.Date;
import org.demo.business.service.mapping.StockUnitServiceMapper;
import org.demo.data.repository.jpa.StockUnitJpaRepository;
import org.demo.test.StockUnitFactoryForTest;
import org.demo.test.StockUnitEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of StockUnitService
 */
@RunWith(MockitoJUnitRunner.class)
public class StockUnitServiceImplTest {

	@InjectMocks
	private StockUnitServiceImpl stockUnitService;
	@Mock
	private StockUnitJpaRepository stockUnitJpaRepository;
	@Mock
	private StockUnitServiceMapper stockUnitServiceMapper;
	
	private StockUnitFactoryForTest stockUnitFactoryForTest = new StockUnitFactoryForTest();

	private StockUnitEntityFactoryForTest stockUnitEntityFactoryForTest = new StockUnitEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		StockUnitEntity stockUnitEntity = stockUnitJpaRepository.findOne(id);
		
		StockUnit stockUnit = stockUnitFactoryForTest.newStockUnit();
		when(stockUnitServiceMapper.mapStockUnitEntityToStockUnit(stockUnitEntity)).thenReturn(stockUnit);

		// When
		StockUnit stockUnitFound = stockUnitService.findById(id);

		// Then
		assertEquals(stockUnit.getId(),stockUnitFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<StockUnitEntity> stockUnitEntitys = new ArrayList<StockUnitEntity>();
		StockUnitEntity stockUnitEntity1 = stockUnitEntityFactoryForTest.newStockUnitEntity();
		stockUnitEntitys.add(stockUnitEntity1);
		StockUnitEntity stockUnitEntity2 = stockUnitEntityFactoryForTest.newStockUnitEntity();
		stockUnitEntitys.add(stockUnitEntity2);
		when(stockUnitJpaRepository.findAll()).thenReturn(stockUnitEntitys);
		
		StockUnit stockUnit1 = stockUnitFactoryForTest.newStockUnit();
		when(stockUnitServiceMapper.mapStockUnitEntityToStockUnit(stockUnitEntity1)).thenReturn(stockUnit1);
		StockUnit stockUnit2 = stockUnitFactoryForTest.newStockUnit();
		when(stockUnitServiceMapper.mapStockUnitEntityToStockUnit(stockUnitEntity2)).thenReturn(stockUnit2);

		// When
		List<StockUnit> stockUnitsFounds = stockUnitService.findAll();

		// Then
		assertTrue(stockUnit1 == stockUnitsFounds.get(0));
		assertTrue(stockUnit2 == stockUnitsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		StockUnit stockUnit = stockUnitFactoryForTest.newStockUnit();

		StockUnitEntity stockUnitEntity = stockUnitEntityFactoryForTest.newStockUnitEntity();
		when(stockUnitJpaRepository.findOne(stockUnit.getId())).thenReturn(null);
		
		stockUnitEntity = new StockUnitEntity();
		stockUnitServiceMapper.mapStockUnitToStockUnitEntity(stockUnit, stockUnitEntity);
		StockUnitEntity stockUnitEntitySaved = stockUnitJpaRepository.save(stockUnitEntity);
		
		StockUnit stockUnitSaved = stockUnitFactoryForTest.newStockUnit();
		when(stockUnitServiceMapper.mapStockUnitEntityToStockUnit(stockUnitEntitySaved)).thenReturn(stockUnitSaved);

		// When
		StockUnit stockUnitResult = stockUnitService.create(stockUnit);

		// Then
		assertTrue(stockUnitResult == stockUnitSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		StockUnit stockUnit = stockUnitFactoryForTest.newStockUnit();

		StockUnitEntity stockUnitEntity = stockUnitEntityFactoryForTest.newStockUnitEntity();
		when(stockUnitJpaRepository.findOne(stockUnit.getId())).thenReturn(stockUnitEntity);

		// When
		Exception exception = null;
		try {
			stockUnitService.create(stockUnit);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		StockUnit stockUnit = stockUnitFactoryForTest.newStockUnit();

		StockUnitEntity stockUnitEntity = stockUnitEntityFactoryForTest.newStockUnitEntity();
		when(stockUnitJpaRepository.findOne(stockUnit.getId())).thenReturn(stockUnitEntity);
		
		StockUnitEntity stockUnitEntitySaved = stockUnitEntityFactoryForTest.newStockUnitEntity();
		when(stockUnitJpaRepository.save(stockUnitEntity)).thenReturn(stockUnitEntitySaved);
		
		StockUnit stockUnitSaved = stockUnitFactoryForTest.newStockUnit();
		when(stockUnitServiceMapper.mapStockUnitEntityToStockUnit(stockUnitEntitySaved)).thenReturn(stockUnitSaved);

		// When
		StockUnit stockUnitResult = stockUnitService.update(stockUnit);

		// Then
		verify(stockUnitServiceMapper).mapStockUnitToStockUnitEntity(stockUnit, stockUnitEntity);
		assertTrue(stockUnitResult == stockUnitSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		stockUnitService.delete(id);

		// Then
		verify(stockUnitJpaRepository).delete(id);
		
	}

}
