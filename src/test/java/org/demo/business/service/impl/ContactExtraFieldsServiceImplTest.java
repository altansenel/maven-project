/*
 * Created on 24 Þub 2016 ( Time 16:27:50 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.ContactExtraFields;
import org.demo.bean.jpa.ContactExtraFieldsEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.ContactExtraFieldsServiceMapper;
import org.demo.data.repository.jpa.ContactExtraFieldsJpaRepository;
import org.demo.test.ContactExtraFieldsFactoryForTest;
import org.demo.test.ContactExtraFieldsEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ContactExtraFieldsService
 */
@RunWith(MockitoJUnitRunner.class)
public class ContactExtraFieldsServiceImplTest {

	@InjectMocks
	private ContactExtraFieldsServiceImpl contactExtraFieldsService;
	@Mock
	private ContactExtraFieldsJpaRepository contactExtraFieldsJpaRepository;
	@Mock
	private ContactExtraFieldsServiceMapper contactExtraFieldsServiceMapper;
	
	private ContactExtraFieldsFactoryForTest contactExtraFieldsFactoryForTest = new ContactExtraFieldsFactoryForTest();

	private ContactExtraFieldsEntityFactoryForTest contactExtraFieldsEntityFactoryForTest = new ContactExtraFieldsEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		ContactExtraFieldsEntity contactExtraFieldsEntity = contactExtraFieldsJpaRepository.findOne(id);
		
		ContactExtraFields contactExtraFields = contactExtraFieldsFactoryForTest.newContactExtraFields();
		when(contactExtraFieldsServiceMapper.mapContactExtraFieldsEntityToContactExtraFields(contactExtraFieldsEntity)).thenReturn(contactExtraFields);

		// When
		ContactExtraFields contactExtraFieldsFound = contactExtraFieldsService.findById(id);

		// Then
		assertEquals(contactExtraFields.getId(),contactExtraFieldsFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ContactExtraFieldsEntity> contactExtraFieldsEntitys = new ArrayList<ContactExtraFieldsEntity>();
		ContactExtraFieldsEntity contactExtraFieldsEntity1 = contactExtraFieldsEntityFactoryForTest.newContactExtraFieldsEntity();
		contactExtraFieldsEntitys.add(contactExtraFieldsEntity1);
		ContactExtraFieldsEntity contactExtraFieldsEntity2 = contactExtraFieldsEntityFactoryForTest.newContactExtraFieldsEntity();
		contactExtraFieldsEntitys.add(contactExtraFieldsEntity2);
		when(contactExtraFieldsJpaRepository.findAll()).thenReturn(contactExtraFieldsEntitys);
		
		ContactExtraFields contactExtraFields1 = contactExtraFieldsFactoryForTest.newContactExtraFields();
		when(contactExtraFieldsServiceMapper.mapContactExtraFieldsEntityToContactExtraFields(contactExtraFieldsEntity1)).thenReturn(contactExtraFields1);
		ContactExtraFields contactExtraFields2 = contactExtraFieldsFactoryForTest.newContactExtraFields();
		when(contactExtraFieldsServiceMapper.mapContactExtraFieldsEntityToContactExtraFields(contactExtraFieldsEntity2)).thenReturn(contactExtraFields2);

		// When
		List<ContactExtraFields> contactExtraFieldssFounds = contactExtraFieldsService.findAll();

		// Then
		assertTrue(contactExtraFields1 == contactExtraFieldssFounds.get(0));
		assertTrue(contactExtraFields2 == contactExtraFieldssFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		ContactExtraFields contactExtraFields = contactExtraFieldsFactoryForTest.newContactExtraFields();

		ContactExtraFieldsEntity contactExtraFieldsEntity = contactExtraFieldsEntityFactoryForTest.newContactExtraFieldsEntity();
		when(contactExtraFieldsJpaRepository.findOne(contactExtraFields.getId())).thenReturn(null);
		
		contactExtraFieldsEntity = new ContactExtraFieldsEntity();
		contactExtraFieldsServiceMapper.mapContactExtraFieldsToContactExtraFieldsEntity(contactExtraFields, contactExtraFieldsEntity);
		ContactExtraFieldsEntity contactExtraFieldsEntitySaved = contactExtraFieldsJpaRepository.save(contactExtraFieldsEntity);
		
		ContactExtraFields contactExtraFieldsSaved = contactExtraFieldsFactoryForTest.newContactExtraFields();
		when(contactExtraFieldsServiceMapper.mapContactExtraFieldsEntityToContactExtraFields(contactExtraFieldsEntitySaved)).thenReturn(contactExtraFieldsSaved);

		// When
		ContactExtraFields contactExtraFieldsResult = contactExtraFieldsService.create(contactExtraFields);

		// Then
		assertTrue(contactExtraFieldsResult == contactExtraFieldsSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		ContactExtraFields contactExtraFields = contactExtraFieldsFactoryForTest.newContactExtraFields();

		ContactExtraFieldsEntity contactExtraFieldsEntity = contactExtraFieldsEntityFactoryForTest.newContactExtraFieldsEntity();
		when(contactExtraFieldsJpaRepository.findOne(contactExtraFields.getId())).thenReturn(contactExtraFieldsEntity);

		// When
		Exception exception = null;
		try {
			contactExtraFieldsService.create(contactExtraFields);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		ContactExtraFields contactExtraFields = contactExtraFieldsFactoryForTest.newContactExtraFields();

		ContactExtraFieldsEntity contactExtraFieldsEntity = contactExtraFieldsEntityFactoryForTest.newContactExtraFieldsEntity();
		when(contactExtraFieldsJpaRepository.findOne(contactExtraFields.getId())).thenReturn(contactExtraFieldsEntity);
		
		ContactExtraFieldsEntity contactExtraFieldsEntitySaved = contactExtraFieldsEntityFactoryForTest.newContactExtraFieldsEntity();
		when(contactExtraFieldsJpaRepository.save(contactExtraFieldsEntity)).thenReturn(contactExtraFieldsEntitySaved);
		
		ContactExtraFields contactExtraFieldsSaved = contactExtraFieldsFactoryForTest.newContactExtraFields();
		when(contactExtraFieldsServiceMapper.mapContactExtraFieldsEntityToContactExtraFields(contactExtraFieldsEntitySaved)).thenReturn(contactExtraFieldsSaved);

		// When
		ContactExtraFields contactExtraFieldsResult = contactExtraFieldsService.update(contactExtraFields);

		// Then
		verify(contactExtraFieldsServiceMapper).mapContactExtraFieldsToContactExtraFieldsEntity(contactExtraFields, contactExtraFieldsEntity);
		assertTrue(contactExtraFieldsResult == contactExtraFieldsSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		contactExtraFieldsService.delete(id);

		// Then
		verify(contactExtraFieldsJpaRepository).delete(id);
		
	}

}
