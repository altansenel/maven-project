/*
 * Created on 24 Þub 2016 ( Time 16:27:51 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.InvoiceTransSource;
import org.demo.bean.jpa.InvoiceTransSourceEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.InvoiceTransSourceServiceMapper;
import org.demo.data.repository.jpa.InvoiceTransSourceJpaRepository;
import org.demo.test.InvoiceTransSourceFactoryForTest;
import org.demo.test.InvoiceTransSourceEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of InvoiceTransSourceService
 */
@RunWith(MockitoJUnitRunner.class)
public class InvoiceTransSourceServiceImplTest {

	@InjectMocks
	private InvoiceTransSourceServiceImpl invoiceTransSourceService;
	@Mock
	private InvoiceTransSourceJpaRepository invoiceTransSourceJpaRepository;
	@Mock
	private InvoiceTransSourceServiceMapper invoiceTransSourceServiceMapper;
	
	private InvoiceTransSourceFactoryForTest invoiceTransSourceFactoryForTest = new InvoiceTransSourceFactoryForTest();

	private InvoiceTransSourceEntityFactoryForTest invoiceTransSourceEntityFactoryForTest = new InvoiceTransSourceEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		InvoiceTransSourceEntity invoiceTransSourceEntity = invoiceTransSourceJpaRepository.findOne(id);
		
		InvoiceTransSource invoiceTransSource = invoiceTransSourceFactoryForTest.newInvoiceTransSource();
		when(invoiceTransSourceServiceMapper.mapInvoiceTransSourceEntityToInvoiceTransSource(invoiceTransSourceEntity)).thenReturn(invoiceTransSource);

		// When
		InvoiceTransSource invoiceTransSourceFound = invoiceTransSourceService.findById(id);

		// Then
		assertEquals(invoiceTransSource.getId(),invoiceTransSourceFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<InvoiceTransSourceEntity> invoiceTransSourceEntitys = new ArrayList<InvoiceTransSourceEntity>();
		InvoiceTransSourceEntity invoiceTransSourceEntity1 = invoiceTransSourceEntityFactoryForTest.newInvoiceTransSourceEntity();
		invoiceTransSourceEntitys.add(invoiceTransSourceEntity1);
		InvoiceTransSourceEntity invoiceTransSourceEntity2 = invoiceTransSourceEntityFactoryForTest.newInvoiceTransSourceEntity();
		invoiceTransSourceEntitys.add(invoiceTransSourceEntity2);
		when(invoiceTransSourceJpaRepository.findAll()).thenReturn(invoiceTransSourceEntitys);
		
		InvoiceTransSource invoiceTransSource1 = invoiceTransSourceFactoryForTest.newInvoiceTransSource();
		when(invoiceTransSourceServiceMapper.mapInvoiceTransSourceEntityToInvoiceTransSource(invoiceTransSourceEntity1)).thenReturn(invoiceTransSource1);
		InvoiceTransSource invoiceTransSource2 = invoiceTransSourceFactoryForTest.newInvoiceTransSource();
		when(invoiceTransSourceServiceMapper.mapInvoiceTransSourceEntityToInvoiceTransSource(invoiceTransSourceEntity2)).thenReturn(invoiceTransSource2);

		// When
		List<InvoiceTransSource> invoiceTransSourcesFounds = invoiceTransSourceService.findAll();

		// Then
		assertTrue(invoiceTransSource1 == invoiceTransSourcesFounds.get(0));
		assertTrue(invoiceTransSource2 == invoiceTransSourcesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		InvoiceTransSource invoiceTransSource = invoiceTransSourceFactoryForTest.newInvoiceTransSource();

		InvoiceTransSourceEntity invoiceTransSourceEntity = invoiceTransSourceEntityFactoryForTest.newInvoiceTransSourceEntity();
		when(invoiceTransSourceJpaRepository.findOne(invoiceTransSource.getId())).thenReturn(null);
		
		invoiceTransSourceEntity = new InvoiceTransSourceEntity();
		invoiceTransSourceServiceMapper.mapInvoiceTransSourceToInvoiceTransSourceEntity(invoiceTransSource, invoiceTransSourceEntity);
		InvoiceTransSourceEntity invoiceTransSourceEntitySaved = invoiceTransSourceJpaRepository.save(invoiceTransSourceEntity);
		
		InvoiceTransSource invoiceTransSourceSaved = invoiceTransSourceFactoryForTest.newInvoiceTransSource();
		when(invoiceTransSourceServiceMapper.mapInvoiceTransSourceEntityToInvoiceTransSource(invoiceTransSourceEntitySaved)).thenReturn(invoiceTransSourceSaved);

		// When
		InvoiceTransSource invoiceTransSourceResult = invoiceTransSourceService.create(invoiceTransSource);

		// Then
		assertTrue(invoiceTransSourceResult == invoiceTransSourceSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		InvoiceTransSource invoiceTransSource = invoiceTransSourceFactoryForTest.newInvoiceTransSource();

		InvoiceTransSourceEntity invoiceTransSourceEntity = invoiceTransSourceEntityFactoryForTest.newInvoiceTransSourceEntity();
		when(invoiceTransSourceJpaRepository.findOne(invoiceTransSource.getId())).thenReturn(invoiceTransSourceEntity);

		// When
		Exception exception = null;
		try {
			invoiceTransSourceService.create(invoiceTransSource);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		InvoiceTransSource invoiceTransSource = invoiceTransSourceFactoryForTest.newInvoiceTransSource();

		InvoiceTransSourceEntity invoiceTransSourceEntity = invoiceTransSourceEntityFactoryForTest.newInvoiceTransSourceEntity();
		when(invoiceTransSourceJpaRepository.findOne(invoiceTransSource.getId())).thenReturn(invoiceTransSourceEntity);
		
		InvoiceTransSourceEntity invoiceTransSourceEntitySaved = invoiceTransSourceEntityFactoryForTest.newInvoiceTransSourceEntity();
		when(invoiceTransSourceJpaRepository.save(invoiceTransSourceEntity)).thenReturn(invoiceTransSourceEntitySaved);
		
		InvoiceTransSource invoiceTransSourceSaved = invoiceTransSourceFactoryForTest.newInvoiceTransSource();
		when(invoiceTransSourceServiceMapper.mapInvoiceTransSourceEntityToInvoiceTransSource(invoiceTransSourceEntitySaved)).thenReturn(invoiceTransSourceSaved);

		// When
		InvoiceTransSource invoiceTransSourceResult = invoiceTransSourceService.update(invoiceTransSource);

		// Then
		verify(invoiceTransSourceServiceMapper).mapInvoiceTransSourceToInvoiceTransSourceEntity(invoiceTransSource, invoiceTransSourceEntity);
		assertTrue(invoiceTransSourceResult == invoiceTransSourceSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		invoiceTransSourceService.delete(id);

		// Then
		verify(invoiceTransSourceJpaRepository).delete(id);
		
	}

}
