/*
 * Created on 24 Þub 2016 ( Time 16:27:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.StockTrans;
import org.demo.bean.jpa.StockTransEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.StockTransServiceMapper;
import org.demo.data.repository.jpa.StockTransJpaRepository;
import org.demo.test.StockTransFactoryForTest;
import org.demo.test.StockTransEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of StockTransService
 */
@RunWith(MockitoJUnitRunner.class)
public class StockTransServiceImplTest {

	@InjectMocks
	private StockTransServiceImpl stockTransService;
	@Mock
	private StockTransJpaRepository stockTransJpaRepository;
	@Mock
	private StockTransServiceMapper stockTransServiceMapper;
	
	private StockTransFactoryForTest stockTransFactoryForTest = new StockTransFactoryForTest();

	private StockTransEntityFactoryForTest stockTransEntityFactoryForTest = new StockTransEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		StockTransEntity stockTransEntity = stockTransJpaRepository.findOne(id);
		
		StockTrans stockTrans = stockTransFactoryForTest.newStockTrans();
		when(stockTransServiceMapper.mapStockTransEntityToStockTrans(stockTransEntity)).thenReturn(stockTrans);

		// When
		StockTrans stockTransFound = stockTransService.findById(id);

		// Then
		assertEquals(stockTrans.getId(),stockTransFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<StockTransEntity> stockTransEntitys = new ArrayList<StockTransEntity>();
		StockTransEntity stockTransEntity1 = stockTransEntityFactoryForTest.newStockTransEntity();
		stockTransEntitys.add(stockTransEntity1);
		StockTransEntity stockTransEntity2 = stockTransEntityFactoryForTest.newStockTransEntity();
		stockTransEntitys.add(stockTransEntity2);
		when(stockTransJpaRepository.findAll()).thenReturn(stockTransEntitys);
		
		StockTrans stockTrans1 = stockTransFactoryForTest.newStockTrans();
		when(stockTransServiceMapper.mapStockTransEntityToStockTrans(stockTransEntity1)).thenReturn(stockTrans1);
		StockTrans stockTrans2 = stockTransFactoryForTest.newStockTrans();
		when(stockTransServiceMapper.mapStockTransEntityToStockTrans(stockTransEntity2)).thenReturn(stockTrans2);

		// When
		List<StockTrans> stockTranssFounds = stockTransService.findAll();

		// Then
		assertTrue(stockTrans1 == stockTranssFounds.get(0));
		assertTrue(stockTrans2 == stockTranssFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		StockTrans stockTrans = stockTransFactoryForTest.newStockTrans();

		StockTransEntity stockTransEntity = stockTransEntityFactoryForTest.newStockTransEntity();
		when(stockTransJpaRepository.findOne(stockTrans.getId())).thenReturn(null);
		
		stockTransEntity = new StockTransEntity();
		stockTransServiceMapper.mapStockTransToStockTransEntity(stockTrans, stockTransEntity);
		StockTransEntity stockTransEntitySaved = stockTransJpaRepository.save(stockTransEntity);
		
		StockTrans stockTransSaved = stockTransFactoryForTest.newStockTrans();
		when(stockTransServiceMapper.mapStockTransEntityToStockTrans(stockTransEntitySaved)).thenReturn(stockTransSaved);

		// When
		StockTrans stockTransResult = stockTransService.create(stockTrans);

		// Then
		assertTrue(stockTransResult == stockTransSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		StockTrans stockTrans = stockTransFactoryForTest.newStockTrans();

		StockTransEntity stockTransEntity = stockTransEntityFactoryForTest.newStockTransEntity();
		when(stockTransJpaRepository.findOne(stockTrans.getId())).thenReturn(stockTransEntity);

		// When
		Exception exception = null;
		try {
			stockTransService.create(stockTrans);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		StockTrans stockTrans = stockTransFactoryForTest.newStockTrans();

		StockTransEntity stockTransEntity = stockTransEntityFactoryForTest.newStockTransEntity();
		when(stockTransJpaRepository.findOne(stockTrans.getId())).thenReturn(stockTransEntity);
		
		StockTransEntity stockTransEntitySaved = stockTransEntityFactoryForTest.newStockTransEntity();
		when(stockTransJpaRepository.save(stockTransEntity)).thenReturn(stockTransEntitySaved);
		
		StockTrans stockTransSaved = stockTransFactoryForTest.newStockTrans();
		when(stockTransServiceMapper.mapStockTransEntityToStockTrans(stockTransEntitySaved)).thenReturn(stockTransSaved);

		// When
		StockTrans stockTransResult = stockTransService.update(stockTrans);

		// Then
		verify(stockTransServiceMapper).mapStockTransToStockTransEntity(stockTrans, stockTransEntity);
		assertTrue(stockTransResult == stockTransSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		stockTransService.delete(id);

		// Then
		verify(stockTransJpaRepository).delete(id);
		
	}

}
