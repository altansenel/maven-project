/*
 * Created on 24 Þub 2016 ( Time 16:27:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.StockPriceList;
import org.demo.bean.jpa.StockPriceListEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.StockPriceListServiceMapper;
import org.demo.data.repository.jpa.StockPriceListJpaRepository;
import org.demo.test.StockPriceListFactoryForTest;
import org.demo.test.StockPriceListEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of StockPriceListService
 */
@RunWith(MockitoJUnitRunner.class)
public class StockPriceListServiceImplTest {

	@InjectMocks
	private StockPriceListServiceImpl stockPriceListService;
	@Mock
	private StockPriceListJpaRepository stockPriceListJpaRepository;
	@Mock
	private StockPriceListServiceMapper stockPriceListServiceMapper;
	
	private StockPriceListFactoryForTest stockPriceListFactoryForTest = new StockPriceListFactoryForTest();

	private StockPriceListEntityFactoryForTest stockPriceListEntityFactoryForTest = new StockPriceListEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		StockPriceListEntity stockPriceListEntity = stockPriceListJpaRepository.findOne(id);
		
		StockPriceList stockPriceList = stockPriceListFactoryForTest.newStockPriceList();
		when(stockPriceListServiceMapper.mapStockPriceListEntityToStockPriceList(stockPriceListEntity)).thenReturn(stockPriceList);

		// When
		StockPriceList stockPriceListFound = stockPriceListService.findById(id);

		// Then
		assertEquals(stockPriceList.getId(),stockPriceListFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<StockPriceListEntity> stockPriceListEntitys = new ArrayList<StockPriceListEntity>();
		StockPriceListEntity stockPriceListEntity1 = stockPriceListEntityFactoryForTest.newStockPriceListEntity();
		stockPriceListEntitys.add(stockPriceListEntity1);
		StockPriceListEntity stockPriceListEntity2 = stockPriceListEntityFactoryForTest.newStockPriceListEntity();
		stockPriceListEntitys.add(stockPriceListEntity2);
		when(stockPriceListJpaRepository.findAll()).thenReturn(stockPriceListEntitys);
		
		StockPriceList stockPriceList1 = stockPriceListFactoryForTest.newStockPriceList();
		when(stockPriceListServiceMapper.mapStockPriceListEntityToStockPriceList(stockPriceListEntity1)).thenReturn(stockPriceList1);
		StockPriceList stockPriceList2 = stockPriceListFactoryForTest.newStockPriceList();
		when(stockPriceListServiceMapper.mapStockPriceListEntityToStockPriceList(stockPriceListEntity2)).thenReturn(stockPriceList2);

		// When
		List<StockPriceList> stockPriceListsFounds = stockPriceListService.findAll();

		// Then
		assertTrue(stockPriceList1 == stockPriceListsFounds.get(0));
		assertTrue(stockPriceList2 == stockPriceListsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		StockPriceList stockPriceList = stockPriceListFactoryForTest.newStockPriceList();

		StockPriceListEntity stockPriceListEntity = stockPriceListEntityFactoryForTest.newStockPriceListEntity();
		when(stockPriceListJpaRepository.findOne(stockPriceList.getId())).thenReturn(null);
		
		stockPriceListEntity = new StockPriceListEntity();
		stockPriceListServiceMapper.mapStockPriceListToStockPriceListEntity(stockPriceList, stockPriceListEntity);
		StockPriceListEntity stockPriceListEntitySaved = stockPriceListJpaRepository.save(stockPriceListEntity);
		
		StockPriceList stockPriceListSaved = stockPriceListFactoryForTest.newStockPriceList();
		when(stockPriceListServiceMapper.mapStockPriceListEntityToStockPriceList(stockPriceListEntitySaved)).thenReturn(stockPriceListSaved);

		// When
		StockPriceList stockPriceListResult = stockPriceListService.create(stockPriceList);

		// Then
		assertTrue(stockPriceListResult == stockPriceListSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		StockPriceList stockPriceList = stockPriceListFactoryForTest.newStockPriceList();

		StockPriceListEntity stockPriceListEntity = stockPriceListEntityFactoryForTest.newStockPriceListEntity();
		when(stockPriceListJpaRepository.findOne(stockPriceList.getId())).thenReturn(stockPriceListEntity);

		// When
		Exception exception = null;
		try {
			stockPriceListService.create(stockPriceList);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		StockPriceList stockPriceList = stockPriceListFactoryForTest.newStockPriceList();

		StockPriceListEntity stockPriceListEntity = stockPriceListEntityFactoryForTest.newStockPriceListEntity();
		when(stockPriceListJpaRepository.findOne(stockPriceList.getId())).thenReturn(stockPriceListEntity);
		
		StockPriceListEntity stockPriceListEntitySaved = stockPriceListEntityFactoryForTest.newStockPriceListEntity();
		when(stockPriceListJpaRepository.save(stockPriceListEntity)).thenReturn(stockPriceListEntitySaved);
		
		StockPriceList stockPriceListSaved = stockPriceListFactoryForTest.newStockPriceList();
		when(stockPriceListServiceMapper.mapStockPriceListEntityToStockPriceList(stockPriceListEntitySaved)).thenReturn(stockPriceListSaved);

		// When
		StockPriceList stockPriceListResult = stockPriceListService.update(stockPriceList);

		// Then
		verify(stockPriceListServiceMapper).mapStockPriceListToStockPriceListEntity(stockPriceList, stockPriceListEntity);
		assertTrue(stockPriceListResult == stockPriceListSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		stockPriceListService.delete(id);

		// Then
		verify(stockPriceListJpaRepository).delete(id);
		
	}

}
