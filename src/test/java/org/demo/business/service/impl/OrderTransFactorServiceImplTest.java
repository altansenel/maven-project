/*
 * Created on 24 Þub 2016 ( Time 16:27:51 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.OrderTransFactor;
import org.demo.bean.jpa.OrderTransFactorEntity;
import org.demo.business.service.mapping.OrderTransFactorServiceMapper;
import org.demo.data.repository.jpa.OrderTransFactorJpaRepository;
import org.demo.test.OrderTransFactorFactoryForTest;
import org.demo.test.OrderTransFactorEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of OrderTransFactorService
 */
@RunWith(MockitoJUnitRunner.class)
public class OrderTransFactorServiceImplTest {

	@InjectMocks
	private OrderTransFactorServiceImpl orderTransFactorService;
	@Mock
	private OrderTransFactorJpaRepository orderTransFactorJpaRepository;
	@Mock
	private OrderTransFactorServiceMapper orderTransFactorServiceMapper;
	
	private OrderTransFactorFactoryForTest orderTransFactorFactoryForTest = new OrderTransFactorFactoryForTest();

	private OrderTransFactorEntityFactoryForTest orderTransFactorEntityFactoryForTest = new OrderTransFactorEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		OrderTransFactorEntity orderTransFactorEntity = orderTransFactorJpaRepository.findOne(id);
		
		OrderTransFactor orderTransFactor = orderTransFactorFactoryForTest.newOrderTransFactor();
		when(orderTransFactorServiceMapper.mapOrderTransFactorEntityToOrderTransFactor(orderTransFactorEntity)).thenReturn(orderTransFactor);

		// When
		OrderTransFactor orderTransFactorFound = orderTransFactorService.findById(id);

		// Then
		assertEquals(orderTransFactor.getId(),orderTransFactorFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<OrderTransFactorEntity> orderTransFactorEntitys = new ArrayList<OrderTransFactorEntity>();
		OrderTransFactorEntity orderTransFactorEntity1 = orderTransFactorEntityFactoryForTest.newOrderTransFactorEntity();
		orderTransFactorEntitys.add(orderTransFactorEntity1);
		OrderTransFactorEntity orderTransFactorEntity2 = orderTransFactorEntityFactoryForTest.newOrderTransFactorEntity();
		orderTransFactorEntitys.add(orderTransFactorEntity2);
		when(orderTransFactorJpaRepository.findAll()).thenReturn(orderTransFactorEntitys);
		
		OrderTransFactor orderTransFactor1 = orderTransFactorFactoryForTest.newOrderTransFactor();
		when(orderTransFactorServiceMapper.mapOrderTransFactorEntityToOrderTransFactor(orderTransFactorEntity1)).thenReturn(orderTransFactor1);
		OrderTransFactor orderTransFactor2 = orderTransFactorFactoryForTest.newOrderTransFactor();
		when(orderTransFactorServiceMapper.mapOrderTransFactorEntityToOrderTransFactor(orderTransFactorEntity2)).thenReturn(orderTransFactor2);

		// When
		List<OrderTransFactor> orderTransFactorsFounds = orderTransFactorService.findAll();

		// Then
		assertTrue(orderTransFactor1 == orderTransFactorsFounds.get(0));
		assertTrue(orderTransFactor2 == orderTransFactorsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		OrderTransFactor orderTransFactor = orderTransFactorFactoryForTest.newOrderTransFactor();

		OrderTransFactorEntity orderTransFactorEntity = orderTransFactorEntityFactoryForTest.newOrderTransFactorEntity();
		when(orderTransFactorJpaRepository.findOne(orderTransFactor.getId())).thenReturn(null);
		
		orderTransFactorEntity = new OrderTransFactorEntity();
		orderTransFactorServiceMapper.mapOrderTransFactorToOrderTransFactorEntity(orderTransFactor, orderTransFactorEntity);
		OrderTransFactorEntity orderTransFactorEntitySaved = orderTransFactorJpaRepository.save(orderTransFactorEntity);
		
		OrderTransFactor orderTransFactorSaved = orderTransFactorFactoryForTest.newOrderTransFactor();
		when(orderTransFactorServiceMapper.mapOrderTransFactorEntityToOrderTransFactor(orderTransFactorEntitySaved)).thenReturn(orderTransFactorSaved);

		// When
		OrderTransFactor orderTransFactorResult = orderTransFactorService.create(orderTransFactor);

		// Then
		assertTrue(orderTransFactorResult == orderTransFactorSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		OrderTransFactor orderTransFactor = orderTransFactorFactoryForTest.newOrderTransFactor();

		OrderTransFactorEntity orderTransFactorEntity = orderTransFactorEntityFactoryForTest.newOrderTransFactorEntity();
		when(orderTransFactorJpaRepository.findOne(orderTransFactor.getId())).thenReturn(orderTransFactorEntity);

		// When
		Exception exception = null;
		try {
			orderTransFactorService.create(orderTransFactor);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		OrderTransFactor orderTransFactor = orderTransFactorFactoryForTest.newOrderTransFactor();

		OrderTransFactorEntity orderTransFactorEntity = orderTransFactorEntityFactoryForTest.newOrderTransFactorEntity();
		when(orderTransFactorJpaRepository.findOne(orderTransFactor.getId())).thenReturn(orderTransFactorEntity);
		
		OrderTransFactorEntity orderTransFactorEntitySaved = orderTransFactorEntityFactoryForTest.newOrderTransFactorEntity();
		when(orderTransFactorJpaRepository.save(orderTransFactorEntity)).thenReturn(orderTransFactorEntitySaved);
		
		OrderTransFactor orderTransFactorSaved = orderTransFactorFactoryForTest.newOrderTransFactor();
		when(orderTransFactorServiceMapper.mapOrderTransFactorEntityToOrderTransFactor(orderTransFactorEntitySaved)).thenReturn(orderTransFactorSaved);

		// When
		OrderTransFactor orderTransFactorResult = orderTransFactorService.update(orderTransFactor);

		// Then
		verify(orderTransFactorServiceMapper).mapOrderTransFactorToOrderTransFactorEntity(orderTransFactor, orderTransFactorEntity);
		assertTrue(orderTransFactorResult == orderTransFactorSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		orderTransFactorService.delete(id);

		// Then
		verify(orderTransFactorJpaRepository).delete(id);
		
	}

}
