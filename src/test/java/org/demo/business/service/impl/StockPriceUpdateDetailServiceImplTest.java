/*
 * Created on 24 Þub 2016 ( Time 16:27:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.StockPriceUpdateDetail;
import org.demo.bean.jpa.StockPriceUpdateDetailEntity;
import org.demo.business.service.mapping.StockPriceUpdateDetailServiceMapper;
import org.demo.data.repository.jpa.StockPriceUpdateDetailJpaRepository;
import org.demo.test.StockPriceUpdateDetailFactoryForTest;
import org.demo.test.StockPriceUpdateDetailEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of StockPriceUpdateDetailService
 */
@RunWith(MockitoJUnitRunner.class)
public class StockPriceUpdateDetailServiceImplTest {

	@InjectMocks
	private StockPriceUpdateDetailServiceImpl stockPriceUpdateDetailService;
	@Mock
	private StockPriceUpdateDetailJpaRepository stockPriceUpdateDetailJpaRepository;
	@Mock
	private StockPriceUpdateDetailServiceMapper stockPriceUpdateDetailServiceMapper;
	
	private StockPriceUpdateDetailFactoryForTest stockPriceUpdateDetailFactoryForTest = new StockPriceUpdateDetailFactoryForTest();

	private StockPriceUpdateDetailEntityFactoryForTest stockPriceUpdateDetailEntityFactoryForTest = new StockPriceUpdateDetailEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		StockPriceUpdateDetailEntity stockPriceUpdateDetailEntity = stockPriceUpdateDetailJpaRepository.findOne(id);
		
		StockPriceUpdateDetail stockPriceUpdateDetail = stockPriceUpdateDetailFactoryForTest.newStockPriceUpdateDetail();
		when(stockPriceUpdateDetailServiceMapper.mapStockPriceUpdateDetailEntityToStockPriceUpdateDetail(stockPriceUpdateDetailEntity)).thenReturn(stockPriceUpdateDetail);

		// When
		StockPriceUpdateDetail stockPriceUpdateDetailFound = stockPriceUpdateDetailService.findById(id);

		// Then
		assertEquals(stockPriceUpdateDetail.getId(),stockPriceUpdateDetailFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<StockPriceUpdateDetailEntity> stockPriceUpdateDetailEntitys = new ArrayList<StockPriceUpdateDetailEntity>();
		StockPriceUpdateDetailEntity stockPriceUpdateDetailEntity1 = stockPriceUpdateDetailEntityFactoryForTest.newStockPriceUpdateDetailEntity();
		stockPriceUpdateDetailEntitys.add(stockPriceUpdateDetailEntity1);
		StockPriceUpdateDetailEntity stockPriceUpdateDetailEntity2 = stockPriceUpdateDetailEntityFactoryForTest.newStockPriceUpdateDetailEntity();
		stockPriceUpdateDetailEntitys.add(stockPriceUpdateDetailEntity2);
		when(stockPriceUpdateDetailJpaRepository.findAll()).thenReturn(stockPriceUpdateDetailEntitys);
		
		StockPriceUpdateDetail stockPriceUpdateDetail1 = stockPriceUpdateDetailFactoryForTest.newStockPriceUpdateDetail();
		when(stockPriceUpdateDetailServiceMapper.mapStockPriceUpdateDetailEntityToStockPriceUpdateDetail(stockPriceUpdateDetailEntity1)).thenReturn(stockPriceUpdateDetail1);
		StockPriceUpdateDetail stockPriceUpdateDetail2 = stockPriceUpdateDetailFactoryForTest.newStockPriceUpdateDetail();
		when(stockPriceUpdateDetailServiceMapper.mapStockPriceUpdateDetailEntityToStockPriceUpdateDetail(stockPriceUpdateDetailEntity2)).thenReturn(stockPriceUpdateDetail2);

		// When
		List<StockPriceUpdateDetail> stockPriceUpdateDetailsFounds = stockPriceUpdateDetailService.findAll();

		// Then
		assertTrue(stockPriceUpdateDetail1 == stockPriceUpdateDetailsFounds.get(0));
		assertTrue(stockPriceUpdateDetail2 == stockPriceUpdateDetailsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		StockPriceUpdateDetail stockPriceUpdateDetail = stockPriceUpdateDetailFactoryForTest.newStockPriceUpdateDetail();

		StockPriceUpdateDetailEntity stockPriceUpdateDetailEntity = stockPriceUpdateDetailEntityFactoryForTest.newStockPriceUpdateDetailEntity();
		when(stockPriceUpdateDetailJpaRepository.findOne(stockPriceUpdateDetail.getId())).thenReturn(null);
		
		stockPriceUpdateDetailEntity = new StockPriceUpdateDetailEntity();
		stockPriceUpdateDetailServiceMapper.mapStockPriceUpdateDetailToStockPriceUpdateDetailEntity(stockPriceUpdateDetail, stockPriceUpdateDetailEntity);
		StockPriceUpdateDetailEntity stockPriceUpdateDetailEntitySaved = stockPriceUpdateDetailJpaRepository.save(stockPriceUpdateDetailEntity);
		
		StockPriceUpdateDetail stockPriceUpdateDetailSaved = stockPriceUpdateDetailFactoryForTest.newStockPriceUpdateDetail();
		when(stockPriceUpdateDetailServiceMapper.mapStockPriceUpdateDetailEntityToStockPriceUpdateDetail(stockPriceUpdateDetailEntitySaved)).thenReturn(stockPriceUpdateDetailSaved);

		// When
		StockPriceUpdateDetail stockPriceUpdateDetailResult = stockPriceUpdateDetailService.create(stockPriceUpdateDetail);

		// Then
		assertTrue(stockPriceUpdateDetailResult == stockPriceUpdateDetailSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		StockPriceUpdateDetail stockPriceUpdateDetail = stockPriceUpdateDetailFactoryForTest.newStockPriceUpdateDetail();

		StockPriceUpdateDetailEntity stockPriceUpdateDetailEntity = stockPriceUpdateDetailEntityFactoryForTest.newStockPriceUpdateDetailEntity();
		when(stockPriceUpdateDetailJpaRepository.findOne(stockPriceUpdateDetail.getId())).thenReturn(stockPriceUpdateDetailEntity);

		// When
		Exception exception = null;
		try {
			stockPriceUpdateDetailService.create(stockPriceUpdateDetail);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		StockPriceUpdateDetail stockPriceUpdateDetail = stockPriceUpdateDetailFactoryForTest.newStockPriceUpdateDetail();

		StockPriceUpdateDetailEntity stockPriceUpdateDetailEntity = stockPriceUpdateDetailEntityFactoryForTest.newStockPriceUpdateDetailEntity();
		when(stockPriceUpdateDetailJpaRepository.findOne(stockPriceUpdateDetail.getId())).thenReturn(stockPriceUpdateDetailEntity);
		
		StockPriceUpdateDetailEntity stockPriceUpdateDetailEntitySaved = stockPriceUpdateDetailEntityFactoryForTest.newStockPriceUpdateDetailEntity();
		when(stockPriceUpdateDetailJpaRepository.save(stockPriceUpdateDetailEntity)).thenReturn(stockPriceUpdateDetailEntitySaved);
		
		StockPriceUpdateDetail stockPriceUpdateDetailSaved = stockPriceUpdateDetailFactoryForTest.newStockPriceUpdateDetail();
		when(stockPriceUpdateDetailServiceMapper.mapStockPriceUpdateDetailEntityToStockPriceUpdateDetail(stockPriceUpdateDetailEntitySaved)).thenReturn(stockPriceUpdateDetailSaved);

		// When
		StockPriceUpdateDetail stockPriceUpdateDetailResult = stockPriceUpdateDetailService.update(stockPriceUpdateDetail);

		// Then
		verify(stockPriceUpdateDetailServiceMapper).mapStockPriceUpdateDetailToStockPriceUpdateDetailEntity(stockPriceUpdateDetail, stockPriceUpdateDetailEntity);
		assertTrue(stockPriceUpdateDetailResult == stockPriceUpdateDetailSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		stockPriceUpdateDetailService.delete(id);

		// Then
		verify(stockPriceUpdateDetailJpaRepository).delete(id);
		
	}

}
