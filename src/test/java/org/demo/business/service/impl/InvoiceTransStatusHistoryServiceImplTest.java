/*
 * Created on 24 Þub 2016 ( Time 16:27:51 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.InvoiceTransStatusHistory;
import org.demo.bean.jpa.InvoiceTransStatusHistoryEntity;
import java.util.Date;
import org.demo.business.service.mapping.InvoiceTransStatusHistoryServiceMapper;
import org.demo.data.repository.jpa.InvoiceTransStatusHistoryJpaRepository;
import org.demo.test.InvoiceTransStatusHistoryFactoryForTest;
import org.demo.test.InvoiceTransStatusHistoryEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of InvoiceTransStatusHistoryService
 */
@RunWith(MockitoJUnitRunner.class)
public class InvoiceTransStatusHistoryServiceImplTest {

	@InjectMocks
	private InvoiceTransStatusHistoryServiceImpl invoiceTransStatusHistoryService;
	@Mock
	private InvoiceTransStatusHistoryJpaRepository invoiceTransStatusHistoryJpaRepository;
	@Mock
	private InvoiceTransStatusHistoryServiceMapper invoiceTransStatusHistoryServiceMapper;
	
	private InvoiceTransStatusHistoryFactoryForTest invoiceTransStatusHistoryFactoryForTest = new InvoiceTransStatusHistoryFactoryForTest();

	private InvoiceTransStatusHistoryEntityFactoryForTest invoiceTransStatusHistoryEntityFactoryForTest = new InvoiceTransStatusHistoryEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		InvoiceTransStatusHistoryEntity invoiceTransStatusHistoryEntity = invoiceTransStatusHistoryJpaRepository.findOne(id);
		
		InvoiceTransStatusHistory invoiceTransStatusHistory = invoiceTransStatusHistoryFactoryForTest.newInvoiceTransStatusHistory();
		when(invoiceTransStatusHistoryServiceMapper.mapInvoiceTransStatusHistoryEntityToInvoiceTransStatusHistory(invoiceTransStatusHistoryEntity)).thenReturn(invoiceTransStatusHistory);

		// When
		InvoiceTransStatusHistory invoiceTransStatusHistoryFound = invoiceTransStatusHistoryService.findById(id);

		// Then
		assertEquals(invoiceTransStatusHistory.getId(),invoiceTransStatusHistoryFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<InvoiceTransStatusHistoryEntity> invoiceTransStatusHistoryEntitys = new ArrayList<InvoiceTransStatusHistoryEntity>();
		InvoiceTransStatusHistoryEntity invoiceTransStatusHistoryEntity1 = invoiceTransStatusHistoryEntityFactoryForTest.newInvoiceTransStatusHistoryEntity();
		invoiceTransStatusHistoryEntitys.add(invoiceTransStatusHistoryEntity1);
		InvoiceTransStatusHistoryEntity invoiceTransStatusHistoryEntity2 = invoiceTransStatusHistoryEntityFactoryForTest.newInvoiceTransStatusHistoryEntity();
		invoiceTransStatusHistoryEntitys.add(invoiceTransStatusHistoryEntity2);
		when(invoiceTransStatusHistoryJpaRepository.findAll()).thenReturn(invoiceTransStatusHistoryEntitys);
		
		InvoiceTransStatusHistory invoiceTransStatusHistory1 = invoiceTransStatusHistoryFactoryForTest.newInvoiceTransStatusHistory();
		when(invoiceTransStatusHistoryServiceMapper.mapInvoiceTransStatusHistoryEntityToInvoiceTransStatusHistory(invoiceTransStatusHistoryEntity1)).thenReturn(invoiceTransStatusHistory1);
		InvoiceTransStatusHistory invoiceTransStatusHistory2 = invoiceTransStatusHistoryFactoryForTest.newInvoiceTransStatusHistory();
		when(invoiceTransStatusHistoryServiceMapper.mapInvoiceTransStatusHistoryEntityToInvoiceTransStatusHistory(invoiceTransStatusHistoryEntity2)).thenReturn(invoiceTransStatusHistory2);

		// When
		List<InvoiceTransStatusHistory> invoiceTransStatusHistorysFounds = invoiceTransStatusHistoryService.findAll();

		// Then
		assertTrue(invoiceTransStatusHistory1 == invoiceTransStatusHistorysFounds.get(0));
		assertTrue(invoiceTransStatusHistory2 == invoiceTransStatusHistorysFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		InvoiceTransStatusHistory invoiceTransStatusHistory = invoiceTransStatusHistoryFactoryForTest.newInvoiceTransStatusHistory();

		InvoiceTransStatusHistoryEntity invoiceTransStatusHistoryEntity = invoiceTransStatusHistoryEntityFactoryForTest.newInvoiceTransStatusHistoryEntity();
		when(invoiceTransStatusHistoryJpaRepository.findOne(invoiceTransStatusHistory.getId())).thenReturn(null);
		
		invoiceTransStatusHistoryEntity = new InvoiceTransStatusHistoryEntity();
		invoiceTransStatusHistoryServiceMapper.mapInvoiceTransStatusHistoryToInvoiceTransStatusHistoryEntity(invoiceTransStatusHistory, invoiceTransStatusHistoryEntity);
		InvoiceTransStatusHistoryEntity invoiceTransStatusHistoryEntitySaved = invoiceTransStatusHistoryJpaRepository.save(invoiceTransStatusHistoryEntity);
		
		InvoiceTransStatusHistory invoiceTransStatusHistorySaved = invoiceTransStatusHistoryFactoryForTest.newInvoiceTransStatusHistory();
		when(invoiceTransStatusHistoryServiceMapper.mapInvoiceTransStatusHistoryEntityToInvoiceTransStatusHistory(invoiceTransStatusHistoryEntitySaved)).thenReturn(invoiceTransStatusHistorySaved);

		// When
		InvoiceTransStatusHistory invoiceTransStatusHistoryResult = invoiceTransStatusHistoryService.create(invoiceTransStatusHistory);

		// Then
		assertTrue(invoiceTransStatusHistoryResult == invoiceTransStatusHistorySaved);
	}

	@Test
	public void createKOExists() {
		// Given
		InvoiceTransStatusHistory invoiceTransStatusHistory = invoiceTransStatusHistoryFactoryForTest.newInvoiceTransStatusHistory();

		InvoiceTransStatusHistoryEntity invoiceTransStatusHistoryEntity = invoiceTransStatusHistoryEntityFactoryForTest.newInvoiceTransStatusHistoryEntity();
		when(invoiceTransStatusHistoryJpaRepository.findOne(invoiceTransStatusHistory.getId())).thenReturn(invoiceTransStatusHistoryEntity);

		// When
		Exception exception = null;
		try {
			invoiceTransStatusHistoryService.create(invoiceTransStatusHistory);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		InvoiceTransStatusHistory invoiceTransStatusHistory = invoiceTransStatusHistoryFactoryForTest.newInvoiceTransStatusHistory();

		InvoiceTransStatusHistoryEntity invoiceTransStatusHistoryEntity = invoiceTransStatusHistoryEntityFactoryForTest.newInvoiceTransStatusHistoryEntity();
		when(invoiceTransStatusHistoryJpaRepository.findOne(invoiceTransStatusHistory.getId())).thenReturn(invoiceTransStatusHistoryEntity);
		
		InvoiceTransStatusHistoryEntity invoiceTransStatusHistoryEntitySaved = invoiceTransStatusHistoryEntityFactoryForTest.newInvoiceTransStatusHistoryEntity();
		when(invoiceTransStatusHistoryJpaRepository.save(invoiceTransStatusHistoryEntity)).thenReturn(invoiceTransStatusHistoryEntitySaved);
		
		InvoiceTransStatusHistory invoiceTransStatusHistorySaved = invoiceTransStatusHistoryFactoryForTest.newInvoiceTransStatusHistory();
		when(invoiceTransStatusHistoryServiceMapper.mapInvoiceTransStatusHistoryEntityToInvoiceTransStatusHistory(invoiceTransStatusHistoryEntitySaved)).thenReturn(invoiceTransStatusHistorySaved);

		// When
		InvoiceTransStatusHistory invoiceTransStatusHistoryResult = invoiceTransStatusHistoryService.update(invoiceTransStatusHistory);

		// Then
		verify(invoiceTransStatusHistoryServiceMapper).mapInvoiceTransStatusHistoryToInvoiceTransStatusHistoryEntity(invoiceTransStatusHistory, invoiceTransStatusHistoryEntity);
		assertTrue(invoiceTransStatusHistoryResult == invoiceTransStatusHistorySaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		invoiceTransStatusHistoryService.delete(id);

		// Then
		verify(invoiceTransStatusHistoryJpaRepository).delete(id);
		
	}

}
