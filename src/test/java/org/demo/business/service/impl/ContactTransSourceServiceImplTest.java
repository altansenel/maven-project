/*
 * Created on 24 Þub 2016 ( Time 16:27:50 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.ContactTransSource;
import org.demo.bean.jpa.ContactTransSourceEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.ContactTransSourceServiceMapper;
import org.demo.data.repository.jpa.ContactTransSourceJpaRepository;
import org.demo.test.ContactTransSourceFactoryForTest;
import org.demo.test.ContactTransSourceEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ContactTransSourceService
 */
@RunWith(MockitoJUnitRunner.class)
public class ContactTransSourceServiceImplTest {

	@InjectMocks
	private ContactTransSourceServiceImpl contactTransSourceService;
	@Mock
	private ContactTransSourceJpaRepository contactTransSourceJpaRepository;
	@Mock
	private ContactTransSourceServiceMapper contactTransSourceServiceMapper;
	
	private ContactTransSourceFactoryForTest contactTransSourceFactoryForTest = new ContactTransSourceFactoryForTest();

	private ContactTransSourceEntityFactoryForTest contactTransSourceEntityFactoryForTest = new ContactTransSourceEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		ContactTransSourceEntity contactTransSourceEntity = contactTransSourceJpaRepository.findOne(id);
		
		ContactTransSource contactTransSource = contactTransSourceFactoryForTest.newContactTransSource();
		when(contactTransSourceServiceMapper.mapContactTransSourceEntityToContactTransSource(contactTransSourceEntity)).thenReturn(contactTransSource);

		// When
		ContactTransSource contactTransSourceFound = contactTransSourceService.findById(id);

		// Then
		assertEquals(contactTransSource.getId(),contactTransSourceFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ContactTransSourceEntity> contactTransSourceEntitys = new ArrayList<ContactTransSourceEntity>();
		ContactTransSourceEntity contactTransSourceEntity1 = contactTransSourceEntityFactoryForTest.newContactTransSourceEntity();
		contactTransSourceEntitys.add(contactTransSourceEntity1);
		ContactTransSourceEntity contactTransSourceEntity2 = contactTransSourceEntityFactoryForTest.newContactTransSourceEntity();
		contactTransSourceEntitys.add(contactTransSourceEntity2);
		when(contactTransSourceJpaRepository.findAll()).thenReturn(contactTransSourceEntitys);
		
		ContactTransSource contactTransSource1 = contactTransSourceFactoryForTest.newContactTransSource();
		when(contactTransSourceServiceMapper.mapContactTransSourceEntityToContactTransSource(contactTransSourceEntity1)).thenReturn(contactTransSource1);
		ContactTransSource contactTransSource2 = contactTransSourceFactoryForTest.newContactTransSource();
		when(contactTransSourceServiceMapper.mapContactTransSourceEntityToContactTransSource(contactTransSourceEntity2)).thenReturn(contactTransSource2);

		// When
		List<ContactTransSource> contactTransSourcesFounds = contactTransSourceService.findAll();

		// Then
		assertTrue(contactTransSource1 == contactTransSourcesFounds.get(0));
		assertTrue(contactTransSource2 == contactTransSourcesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		ContactTransSource contactTransSource = contactTransSourceFactoryForTest.newContactTransSource();

		ContactTransSourceEntity contactTransSourceEntity = contactTransSourceEntityFactoryForTest.newContactTransSourceEntity();
		when(contactTransSourceJpaRepository.findOne(contactTransSource.getId())).thenReturn(null);
		
		contactTransSourceEntity = new ContactTransSourceEntity();
		contactTransSourceServiceMapper.mapContactTransSourceToContactTransSourceEntity(contactTransSource, contactTransSourceEntity);
		ContactTransSourceEntity contactTransSourceEntitySaved = contactTransSourceJpaRepository.save(contactTransSourceEntity);
		
		ContactTransSource contactTransSourceSaved = contactTransSourceFactoryForTest.newContactTransSource();
		when(contactTransSourceServiceMapper.mapContactTransSourceEntityToContactTransSource(contactTransSourceEntitySaved)).thenReturn(contactTransSourceSaved);

		// When
		ContactTransSource contactTransSourceResult = contactTransSourceService.create(contactTransSource);

		// Then
		assertTrue(contactTransSourceResult == contactTransSourceSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		ContactTransSource contactTransSource = contactTransSourceFactoryForTest.newContactTransSource();

		ContactTransSourceEntity contactTransSourceEntity = contactTransSourceEntityFactoryForTest.newContactTransSourceEntity();
		when(contactTransSourceJpaRepository.findOne(contactTransSource.getId())).thenReturn(contactTransSourceEntity);

		// When
		Exception exception = null;
		try {
			contactTransSourceService.create(contactTransSource);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		ContactTransSource contactTransSource = contactTransSourceFactoryForTest.newContactTransSource();

		ContactTransSourceEntity contactTransSourceEntity = contactTransSourceEntityFactoryForTest.newContactTransSourceEntity();
		when(contactTransSourceJpaRepository.findOne(contactTransSource.getId())).thenReturn(contactTransSourceEntity);
		
		ContactTransSourceEntity contactTransSourceEntitySaved = contactTransSourceEntityFactoryForTest.newContactTransSourceEntity();
		when(contactTransSourceJpaRepository.save(contactTransSourceEntity)).thenReturn(contactTransSourceEntitySaved);
		
		ContactTransSource contactTransSourceSaved = contactTransSourceFactoryForTest.newContactTransSource();
		when(contactTransSourceServiceMapper.mapContactTransSourceEntityToContactTransSource(contactTransSourceEntitySaved)).thenReturn(contactTransSourceSaved);

		// When
		ContactTransSource contactTransSourceResult = contactTransSourceService.update(contactTransSource);

		// Then
		verify(contactTransSourceServiceMapper).mapContactTransSourceToContactTransSourceEntity(contactTransSource, contactTransSourceEntity);
		assertTrue(contactTransSourceResult == contactTransSourceSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		contactTransSourceService.delete(id);

		// Then
		verify(contactTransSourceJpaRepository).delete(id);
		
	}

}
