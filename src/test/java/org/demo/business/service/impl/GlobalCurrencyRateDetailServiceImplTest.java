/*
 * Created on 24 Þub 2016 ( Time 16:27:50 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.GlobalCurrencyRateDetail;
import org.demo.bean.jpa.GlobalCurrencyRateDetailEntity;
import java.util.Date;
import org.demo.business.service.mapping.GlobalCurrencyRateDetailServiceMapper;
import org.demo.data.repository.jpa.GlobalCurrencyRateDetailJpaRepository;
import org.demo.test.GlobalCurrencyRateDetailFactoryForTest;
import org.demo.test.GlobalCurrencyRateDetailEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of GlobalCurrencyRateDetailService
 */
@RunWith(MockitoJUnitRunner.class)
public class GlobalCurrencyRateDetailServiceImplTest {

	@InjectMocks
	private GlobalCurrencyRateDetailServiceImpl globalCurrencyRateDetailService;
	@Mock
	private GlobalCurrencyRateDetailJpaRepository globalCurrencyRateDetailJpaRepository;
	@Mock
	private GlobalCurrencyRateDetailServiceMapper globalCurrencyRateDetailServiceMapper;
	
	private GlobalCurrencyRateDetailFactoryForTest globalCurrencyRateDetailFactoryForTest = new GlobalCurrencyRateDetailFactoryForTest();

	private GlobalCurrencyRateDetailEntityFactoryForTest globalCurrencyRateDetailEntityFactoryForTest = new GlobalCurrencyRateDetailEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		GlobalCurrencyRateDetailEntity globalCurrencyRateDetailEntity = globalCurrencyRateDetailJpaRepository.findOne(id);
		
		GlobalCurrencyRateDetail globalCurrencyRateDetail = globalCurrencyRateDetailFactoryForTest.newGlobalCurrencyRateDetail();
		when(globalCurrencyRateDetailServiceMapper.mapGlobalCurrencyRateDetailEntityToGlobalCurrencyRateDetail(globalCurrencyRateDetailEntity)).thenReturn(globalCurrencyRateDetail);

		// When
		GlobalCurrencyRateDetail globalCurrencyRateDetailFound = globalCurrencyRateDetailService.findById(id);

		// Then
		assertEquals(globalCurrencyRateDetail.getId(),globalCurrencyRateDetailFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<GlobalCurrencyRateDetailEntity> globalCurrencyRateDetailEntitys = new ArrayList<GlobalCurrencyRateDetailEntity>();
		GlobalCurrencyRateDetailEntity globalCurrencyRateDetailEntity1 = globalCurrencyRateDetailEntityFactoryForTest.newGlobalCurrencyRateDetailEntity();
		globalCurrencyRateDetailEntitys.add(globalCurrencyRateDetailEntity1);
		GlobalCurrencyRateDetailEntity globalCurrencyRateDetailEntity2 = globalCurrencyRateDetailEntityFactoryForTest.newGlobalCurrencyRateDetailEntity();
		globalCurrencyRateDetailEntitys.add(globalCurrencyRateDetailEntity2);
		when(globalCurrencyRateDetailJpaRepository.findAll()).thenReturn(globalCurrencyRateDetailEntitys);
		
		GlobalCurrencyRateDetail globalCurrencyRateDetail1 = globalCurrencyRateDetailFactoryForTest.newGlobalCurrencyRateDetail();
		when(globalCurrencyRateDetailServiceMapper.mapGlobalCurrencyRateDetailEntityToGlobalCurrencyRateDetail(globalCurrencyRateDetailEntity1)).thenReturn(globalCurrencyRateDetail1);
		GlobalCurrencyRateDetail globalCurrencyRateDetail2 = globalCurrencyRateDetailFactoryForTest.newGlobalCurrencyRateDetail();
		when(globalCurrencyRateDetailServiceMapper.mapGlobalCurrencyRateDetailEntityToGlobalCurrencyRateDetail(globalCurrencyRateDetailEntity2)).thenReturn(globalCurrencyRateDetail2);

		// When
		List<GlobalCurrencyRateDetail> globalCurrencyRateDetailsFounds = globalCurrencyRateDetailService.findAll();

		// Then
		assertTrue(globalCurrencyRateDetail1 == globalCurrencyRateDetailsFounds.get(0));
		assertTrue(globalCurrencyRateDetail2 == globalCurrencyRateDetailsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		GlobalCurrencyRateDetail globalCurrencyRateDetail = globalCurrencyRateDetailFactoryForTest.newGlobalCurrencyRateDetail();

		GlobalCurrencyRateDetailEntity globalCurrencyRateDetailEntity = globalCurrencyRateDetailEntityFactoryForTest.newGlobalCurrencyRateDetailEntity();
		when(globalCurrencyRateDetailJpaRepository.findOne(globalCurrencyRateDetail.getId())).thenReturn(null);
		
		globalCurrencyRateDetailEntity = new GlobalCurrencyRateDetailEntity();
		globalCurrencyRateDetailServiceMapper.mapGlobalCurrencyRateDetailToGlobalCurrencyRateDetailEntity(globalCurrencyRateDetail, globalCurrencyRateDetailEntity);
		GlobalCurrencyRateDetailEntity globalCurrencyRateDetailEntitySaved = globalCurrencyRateDetailJpaRepository.save(globalCurrencyRateDetailEntity);
		
		GlobalCurrencyRateDetail globalCurrencyRateDetailSaved = globalCurrencyRateDetailFactoryForTest.newGlobalCurrencyRateDetail();
		when(globalCurrencyRateDetailServiceMapper.mapGlobalCurrencyRateDetailEntityToGlobalCurrencyRateDetail(globalCurrencyRateDetailEntitySaved)).thenReturn(globalCurrencyRateDetailSaved);

		// When
		GlobalCurrencyRateDetail globalCurrencyRateDetailResult = globalCurrencyRateDetailService.create(globalCurrencyRateDetail);

		// Then
		assertTrue(globalCurrencyRateDetailResult == globalCurrencyRateDetailSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		GlobalCurrencyRateDetail globalCurrencyRateDetail = globalCurrencyRateDetailFactoryForTest.newGlobalCurrencyRateDetail();

		GlobalCurrencyRateDetailEntity globalCurrencyRateDetailEntity = globalCurrencyRateDetailEntityFactoryForTest.newGlobalCurrencyRateDetailEntity();
		when(globalCurrencyRateDetailJpaRepository.findOne(globalCurrencyRateDetail.getId())).thenReturn(globalCurrencyRateDetailEntity);

		// When
		Exception exception = null;
		try {
			globalCurrencyRateDetailService.create(globalCurrencyRateDetail);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		GlobalCurrencyRateDetail globalCurrencyRateDetail = globalCurrencyRateDetailFactoryForTest.newGlobalCurrencyRateDetail();

		GlobalCurrencyRateDetailEntity globalCurrencyRateDetailEntity = globalCurrencyRateDetailEntityFactoryForTest.newGlobalCurrencyRateDetailEntity();
		when(globalCurrencyRateDetailJpaRepository.findOne(globalCurrencyRateDetail.getId())).thenReturn(globalCurrencyRateDetailEntity);
		
		GlobalCurrencyRateDetailEntity globalCurrencyRateDetailEntitySaved = globalCurrencyRateDetailEntityFactoryForTest.newGlobalCurrencyRateDetailEntity();
		when(globalCurrencyRateDetailJpaRepository.save(globalCurrencyRateDetailEntity)).thenReturn(globalCurrencyRateDetailEntitySaved);
		
		GlobalCurrencyRateDetail globalCurrencyRateDetailSaved = globalCurrencyRateDetailFactoryForTest.newGlobalCurrencyRateDetail();
		when(globalCurrencyRateDetailServiceMapper.mapGlobalCurrencyRateDetailEntityToGlobalCurrencyRateDetail(globalCurrencyRateDetailEntitySaved)).thenReturn(globalCurrencyRateDetailSaved);

		// When
		GlobalCurrencyRateDetail globalCurrencyRateDetailResult = globalCurrencyRateDetailService.update(globalCurrencyRateDetail);

		// Then
		verify(globalCurrencyRateDetailServiceMapper).mapGlobalCurrencyRateDetailToGlobalCurrencyRateDetailEntity(globalCurrencyRateDetail, globalCurrencyRateDetailEntity);
		assertTrue(globalCurrencyRateDetailResult == globalCurrencyRateDetailSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		globalCurrencyRateDetailService.delete(id);

		// Then
		verify(globalCurrencyRateDetailJpaRepository).delete(id);
		
	}

}
