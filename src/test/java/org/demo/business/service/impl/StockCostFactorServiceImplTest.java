/*
 * Created on 24 Þub 2016 ( Time 16:27:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.StockCostFactor;
import org.demo.bean.jpa.StockCostFactorEntity;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.StockCostFactorServiceMapper;
import org.demo.data.repository.jpa.StockCostFactorJpaRepository;
import org.demo.test.StockCostFactorFactoryForTest;
import org.demo.test.StockCostFactorEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of StockCostFactorService
 */
@RunWith(MockitoJUnitRunner.class)
public class StockCostFactorServiceImplTest {

	@InjectMocks
	private StockCostFactorServiceImpl stockCostFactorService;
	@Mock
	private StockCostFactorJpaRepository stockCostFactorJpaRepository;
	@Mock
	private StockCostFactorServiceMapper stockCostFactorServiceMapper;
	
	private StockCostFactorFactoryForTest stockCostFactorFactoryForTest = new StockCostFactorFactoryForTest();

	private StockCostFactorEntityFactoryForTest stockCostFactorEntityFactoryForTest = new StockCostFactorEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		StockCostFactorEntity stockCostFactorEntity = stockCostFactorJpaRepository.findOne(id);
		
		StockCostFactor stockCostFactor = stockCostFactorFactoryForTest.newStockCostFactor();
		when(stockCostFactorServiceMapper.mapStockCostFactorEntityToStockCostFactor(stockCostFactorEntity)).thenReturn(stockCostFactor);

		// When
		StockCostFactor stockCostFactorFound = stockCostFactorService.findById(id);

		// Then
		assertEquals(stockCostFactor.getId(),stockCostFactorFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<StockCostFactorEntity> stockCostFactorEntitys = new ArrayList<StockCostFactorEntity>();
		StockCostFactorEntity stockCostFactorEntity1 = stockCostFactorEntityFactoryForTest.newStockCostFactorEntity();
		stockCostFactorEntitys.add(stockCostFactorEntity1);
		StockCostFactorEntity stockCostFactorEntity2 = stockCostFactorEntityFactoryForTest.newStockCostFactorEntity();
		stockCostFactorEntitys.add(stockCostFactorEntity2);
		when(stockCostFactorJpaRepository.findAll()).thenReturn(stockCostFactorEntitys);
		
		StockCostFactor stockCostFactor1 = stockCostFactorFactoryForTest.newStockCostFactor();
		when(stockCostFactorServiceMapper.mapStockCostFactorEntityToStockCostFactor(stockCostFactorEntity1)).thenReturn(stockCostFactor1);
		StockCostFactor stockCostFactor2 = stockCostFactorFactoryForTest.newStockCostFactor();
		when(stockCostFactorServiceMapper.mapStockCostFactorEntityToStockCostFactor(stockCostFactorEntity2)).thenReturn(stockCostFactor2);

		// When
		List<StockCostFactor> stockCostFactorsFounds = stockCostFactorService.findAll();

		// Then
		assertTrue(stockCostFactor1 == stockCostFactorsFounds.get(0));
		assertTrue(stockCostFactor2 == stockCostFactorsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		StockCostFactor stockCostFactor = stockCostFactorFactoryForTest.newStockCostFactor();

		StockCostFactorEntity stockCostFactorEntity = stockCostFactorEntityFactoryForTest.newStockCostFactorEntity();
		when(stockCostFactorJpaRepository.findOne(stockCostFactor.getId())).thenReturn(null);
		
		stockCostFactorEntity = new StockCostFactorEntity();
		stockCostFactorServiceMapper.mapStockCostFactorToStockCostFactorEntity(stockCostFactor, stockCostFactorEntity);
		StockCostFactorEntity stockCostFactorEntitySaved = stockCostFactorJpaRepository.save(stockCostFactorEntity);
		
		StockCostFactor stockCostFactorSaved = stockCostFactorFactoryForTest.newStockCostFactor();
		when(stockCostFactorServiceMapper.mapStockCostFactorEntityToStockCostFactor(stockCostFactorEntitySaved)).thenReturn(stockCostFactorSaved);

		// When
		StockCostFactor stockCostFactorResult = stockCostFactorService.create(stockCostFactor);

		// Then
		assertTrue(stockCostFactorResult == stockCostFactorSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		StockCostFactor stockCostFactor = stockCostFactorFactoryForTest.newStockCostFactor();

		StockCostFactorEntity stockCostFactorEntity = stockCostFactorEntityFactoryForTest.newStockCostFactorEntity();
		when(stockCostFactorJpaRepository.findOne(stockCostFactor.getId())).thenReturn(stockCostFactorEntity);

		// When
		Exception exception = null;
		try {
			stockCostFactorService.create(stockCostFactor);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		StockCostFactor stockCostFactor = stockCostFactorFactoryForTest.newStockCostFactor();

		StockCostFactorEntity stockCostFactorEntity = stockCostFactorEntityFactoryForTest.newStockCostFactorEntity();
		when(stockCostFactorJpaRepository.findOne(stockCostFactor.getId())).thenReturn(stockCostFactorEntity);
		
		StockCostFactorEntity stockCostFactorEntitySaved = stockCostFactorEntityFactoryForTest.newStockCostFactorEntity();
		when(stockCostFactorJpaRepository.save(stockCostFactorEntity)).thenReturn(stockCostFactorEntitySaved);
		
		StockCostFactor stockCostFactorSaved = stockCostFactorFactoryForTest.newStockCostFactor();
		when(stockCostFactorServiceMapper.mapStockCostFactorEntityToStockCostFactor(stockCostFactorEntitySaved)).thenReturn(stockCostFactorSaved);

		// When
		StockCostFactor stockCostFactorResult = stockCostFactorService.update(stockCostFactor);

		// Then
		verify(stockCostFactorServiceMapper).mapStockCostFactorToStockCostFactorEntity(stockCostFactor, stockCostFactorEntity);
		assertTrue(stockCostFactorResult == stockCostFactorSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		stockCostFactorService.delete(id);

		// Then
		verify(stockCostFactorJpaRepository).delete(id);
		
	}

}
