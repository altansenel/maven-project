/*
 * Created on 24 Þub 2016 ( Time 16:27:52 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.StockBarcode;
import org.demo.bean.jpa.StockBarcodeEntity;
import java.util.Date;
import org.demo.business.service.mapping.StockBarcodeServiceMapper;
import org.demo.data.repository.jpa.StockBarcodeJpaRepository;
import org.demo.test.StockBarcodeFactoryForTest;
import org.demo.test.StockBarcodeEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of StockBarcodeService
 */
@RunWith(MockitoJUnitRunner.class)
public class StockBarcodeServiceImplTest {

	@InjectMocks
	private StockBarcodeServiceImpl stockBarcodeService;
	@Mock
	private StockBarcodeJpaRepository stockBarcodeJpaRepository;
	@Mock
	private StockBarcodeServiceMapper stockBarcodeServiceMapper;
	
	private StockBarcodeFactoryForTest stockBarcodeFactoryForTest = new StockBarcodeFactoryForTest();

	private StockBarcodeEntityFactoryForTest stockBarcodeEntityFactoryForTest = new StockBarcodeEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		StockBarcodeEntity stockBarcodeEntity = stockBarcodeJpaRepository.findOne(id);
		
		StockBarcode stockBarcode = stockBarcodeFactoryForTest.newStockBarcode();
		when(stockBarcodeServiceMapper.mapStockBarcodeEntityToStockBarcode(stockBarcodeEntity)).thenReturn(stockBarcode);

		// When
		StockBarcode stockBarcodeFound = stockBarcodeService.findById(id);

		// Then
		assertEquals(stockBarcode.getId(),stockBarcodeFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<StockBarcodeEntity> stockBarcodeEntitys = new ArrayList<StockBarcodeEntity>();
		StockBarcodeEntity stockBarcodeEntity1 = stockBarcodeEntityFactoryForTest.newStockBarcodeEntity();
		stockBarcodeEntitys.add(stockBarcodeEntity1);
		StockBarcodeEntity stockBarcodeEntity2 = stockBarcodeEntityFactoryForTest.newStockBarcodeEntity();
		stockBarcodeEntitys.add(stockBarcodeEntity2);
		when(stockBarcodeJpaRepository.findAll()).thenReturn(stockBarcodeEntitys);
		
		StockBarcode stockBarcode1 = stockBarcodeFactoryForTest.newStockBarcode();
		when(stockBarcodeServiceMapper.mapStockBarcodeEntityToStockBarcode(stockBarcodeEntity1)).thenReturn(stockBarcode1);
		StockBarcode stockBarcode2 = stockBarcodeFactoryForTest.newStockBarcode();
		when(stockBarcodeServiceMapper.mapStockBarcodeEntityToStockBarcode(stockBarcodeEntity2)).thenReturn(stockBarcode2);

		// When
		List<StockBarcode> stockBarcodesFounds = stockBarcodeService.findAll();

		// Then
		assertTrue(stockBarcode1 == stockBarcodesFounds.get(0));
		assertTrue(stockBarcode2 == stockBarcodesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		StockBarcode stockBarcode = stockBarcodeFactoryForTest.newStockBarcode();

		StockBarcodeEntity stockBarcodeEntity = stockBarcodeEntityFactoryForTest.newStockBarcodeEntity();
		when(stockBarcodeJpaRepository.findOne(stockBarcode.getId())).thenReturn(null);
		
		stockBarcodeEntity = new StockBarcodeEntity();
		stockBarcodeServiceMapper.mapStockBarcodeToStockBarcodeEntity(stockBarcode, stockBarcodeEntity);
		StockBarcodeEntity stockBarcodeEntitySaved = stockBarcodeJpaRepository.save(stockBarcodeEntity);
		
		StockBarcode stockBarcodeSaved = stockBarcodeFactoryForTest.newStockBarcode();
		when(stockBarcodeServiceMapper.mapStockBarcodeEntityToStockBarcode(stockBarcodeEntitySaved)).thenReturn(stockBarcodeSaved);

		// When
		StockBarcode stockBarcodeResult = stockBarcodeService.create(stockBarcode);

		// Then
		assertTrue(stockBarcodeResult == stockBarcodeSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		StockBarcode stockBarcode = stockBarcodeFactoryForTest.newStockBarcode();

		StockBarcodeEntity stockBarcodeEntity = stockBarcodeEntityFactoryForTest.newStockBarcodeEntity();
		when(stockBarcodeJpaRepository.findOne(stockBarcode.getId())).thenReturn(stockBarcodeEntity);

		// When
		Exception exception = null;
		try {
			stockBarcodeService.create(stockBarcode);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		StockBarcode stockBarcode = stockBarcodeFactoryForTest.newStockBarcode();

		StockBarcodeEntity stockBarcodeEntity = stockBarcodeEntityFactoryForTest.newStockBarcodeEntity();
		when(stockBarcodeJpaRepository.findOne(stockBarcode.getId())).thenReturn(stockBarcodeEntity);
		
		StockBarcodeEntity stockBarcodeEntitySaved = stockBarcodeEntityFactoryForTest.newStockBarcodeEntity();
		when(stockBarcodeJpaRepository.save(stockBarcodeEntity)).thenReturn(stockBarcodeEntitySaved);
		
		StockBarcode stockBarcodeSaved = stockBarcodeFactoryForTest.newStockBarcode();
		when(stockBarcodeServiceMapper.mapStockBarcodeEntityToStockBarcode(stockBarcodeEntitySaved)).thenReturn(stockBarcodeSaved);

		// When
		StockBarcode stockBarcodeResult = stockBarcodeService.update(stockBarcode);

		// Then
		verify(stockBarcodeServiceMapper).mapStockBarcodeToStockBarcodeEntity(stockBarcode, stockBarcodeEntity);
		assertTrue(stockBarcodeResult == stockBarcodeSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		stockBarcodeService.delete(id);

		// Then
		verify(stockBarcodeJpaRepository).delete(id);
		
	}

}
